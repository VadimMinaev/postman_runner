{
  "info": {
    "_postman_id": "6b0e94e4-a7d8-4964-835d-7b45b07305b1",
    "name": "17. Workflows",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-31T06:35:38.000Z",
    "createdAt": "2025-07-25T05:57:18.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-6b0e94e4-a7d8-4964-835d-7b45b07305b1"
  },
  "item": [
    {
      "name": "Workflows",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List workflows",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è\r",
                      "const ignoredFields = [\"sourceID\", \"source\", \"nodeID\"];\r",
                      "\r",
                      "// –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–∂–∏–¥–∞–µ–º–∞—è –æ—Ç –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞\r",
                      "const expectedStructure = {\r",
                      "    id: \"number\",\r",
                      "    subject: \"string\",\r",
                      "    category: \"string\",\r",
                      "    impact: \"string\",\r",
                      "    status: \"string\",\r",
                      "    completion_target_at: \"string\", // –¥–∞—Ç–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ string\r",
                      "    completed_at: \"string\",\r",
                      "    created_at: \"string\",\r",
                      "    updated_at: \"string\",\r",
                      "    manager: {\r",
                      "        id: \"number\",\r",
                      "        name: \"string\",\r",
                      "        account: {\r",
                      "            id: \"string\",\r",
                      "            name: \"string\"\r",
                      "        }\r",
                      "    },\r",
                      "    service: {\r",
                      "        id: \"number\",\r",
                      "        name: \"string\",\r",
                      "        localized_name: \"string\",\r",
                      "        provider: {\r",
                      "            id: \"number\",\r",
                      "            name: \"string\",\r",
                      "            account: {\r",
                      "                id: \"string\",\r",
                      "                name: \"string\"\r",
                      "            }\r",
                      "        }\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å —É—á—ë—Ç–æ–º null –∏ –º–∞—Å—Å–∏–≤–∞\r",
                      "function isValidType(value, expectedType) {\r",
                      "    if (value === null) return true;\r",
                      "    if (expectedType === \"array\") return Array.isArray(value);\r",
                      "    return typeof value === expectedType;\r",
                      "}\r",
                      "\r",
                      "// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞\r",
                      "function validateObject(obj, template, path = \"\") {\r",
                      "    for (let key in template) {\r",
                      "        if (ignoredFields.includes(key)) continue;\r",
                      "\r",
                      "        const fullPath = path ? `${path}.${key}` : key;\r",
                      "        const expectedType = template[key];\r",
                      "\r",
                      "        if (!obj.hasOwnProperty(key)) {\r",
                      "            errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ \"${fullPath}\"`);\r",
                      "            continue;\r",
                      "        }\r",
                      "\r",
                      "        const value = obj[key];\r",
                      "\r",
                      "        if (expectedType && typeof expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || Array.isArray(value)) {\r",
                      "                    errors.push(`‚ùå –û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç –≤ \"${fullPath}\", –Ω–æ –ø–æ–ª—É—á–µ–Ω \"${typeof value}\"`);\r",
                      "                } else {\r",
                      "                    validateObject(value, expectedType, fullPath);\r",
                      "                }\r",
                      "            }\r",
                      "        } else {\r",
                      "            if (!isValidType(value, expectedType)) {\r",
                      "                errors.push(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è \"${fullPath}\": –æ–∂–∏–¥–∞–ª—Å—è \"${expectedType}\", –ø–æ–ª—É—á–µ–Ω \"${typeof value}\"`);\r",
                      "            }\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞\r",
                      "pm.test(\"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "try {\r",
                      "    const response = pm.response.json();\r",
                      "    const target = Array.isArray(response) ? response[0] : response;\r",
                      "\r",
                      "    validateObject(target, expectedStructure);\r",
                      "\r",
                      "    pm.test(\"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ç–∏–ø—ã –≤–∞–ª–∏–¥–Ω—ã\", function () {\r",
                      "        if (errors.length > 0) {\r",
                      "            console.error(\"‚ÄºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\");\r",
                      "            errors.forEach(e => console.error(e));\r",
                      "            console.error(\"üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\", JSON.stringify(target, null, 2));\r",
                      "        }\r",
                      "        pm.expect(errors.length, \"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\").to.equal(0);\r",
                      "    });\r",
                      "} catch (err) {\r",
                      "    pm.test(\"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON\", function () {\r",
                      "        console.error(\"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ JSON:\", err.message);\r",
                      "        console.error(\"üìÑ –û—Ç–≤–µ—Ç:\", pm.response.text());\r",
                      "        throw err;\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7c41ded5-b670-4756-892f-db657cd42904",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows",
                  "host": [
                    "{{url}}workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7c41ded5-b670-4756-892f-db657cd42904"
            },
            {
              "name": "Get a single workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const item = Array.isArray(jsonData) ? jsonData[0] : jsonData;\r",
                      "\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ array, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (expectedType === \"object\") {\r",
                      "            if (value === null && nullable) return;\r",
                      "            if (actualType !== \"object\" || Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ object, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    function validate(obj, path = '') {\r",
                      "        function p(prop) {\r",
                      "            return path ? `${path}.${prop}` : prop;\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"actual_effort\"), obj.actual_effort, \"number\");\r",
                      "        checkType(p(\"actual_vs_planned_effort_percentage\"), obj.actual_vs_planned_effort_percentage, \"number\");\r",
                      "        checkType(p(\"attachments\"), obj.attachments, \"array\");\r",
                      "        checkType(p(\"category\"), obj.category, \"string\");\r",
                      "        checkType(p(\"completed_at\"), obj.completed_at, \"string\", true);\r",
                      "        checkType(p(\"completion_reason\"), obj.completion_reason, \"string\", true);\r",
                      "        checkType(p(\"completion_target_at\"), obj.completion_target_at, \"string\", true);\r",
                      "        checkType(p(\"created_at\"), obj.created_at, \"string\");\r",
                      "        checkType(p(\"custom_fields\"), obj.custom_fields, \"object\", true);\r",
                      "        checkType(p(\"id\"), obj.id, \"number\");\r",
                      "        checkType(p(\"impact\"), obj.impact, \"string\");\r",
                      "        checkType(p(\"justification\"), obj.justification, \"string\");\r",
                      "\r",
                      "        // manager\r",
                      "        if (obj.manager !== null) {\r",
                      "            checkType(p(\"manager\"), obj.manager, \"object\");\r",
                      "            checkType(p(\"manager.id\"), obj.manager.id, \"number\");\r",
                      "            checkType(p(\"manager.name\"), obj.manager.name, \"string\");\r",
                      "            if (obj.manager.account !== null) {\r",
                      "                checkType(p(\"manager.account\"), obj.manager.account, \"object\");\r",
                      "                checkType(p(\"manager.account.id\"), obj.manager.account.id, \"string\");\r",
                      "                checkType(p(\"manager.account.name\"), obj.manager.account.name, \"string\");\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"planned_effort\"), obj.planned_effort, \"number\");\r",
                      "        checkType(p(\"project\"), obj.project, \"object\", true);\r",
                      "\r",
                      "        // release\r",
                      "        if (obj.release !== null) {\r",
                      "            checkType(p(\"release\"), obj.release, \"object\");\r",
                      "            checkType(p(\"release.id\"), obj.release.id, \"number\");\r",
                      "            checkType(p(\"release.subject\"), obj.release.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"resolution_duration\"), obj.resolution_duration, \"number\", true);\r",
                      "\r",
                      "        // service\r",
                      "        if (obj.service !== null) {\r",
                      "            checkType(p(\"service\"), obj.service, \"object\");\r",
                      "            checkType(p(\"service.id\"), obj.service.id, \"number\");\r",
                      "            checkType(p(\"service.name\"), obj.service.name, \"string\");\r",
                      "            checkType(p(\"service.localized_name\"), obj.service.localized_name, \"string\");\r",
                      "\r",
                      "            if (obj.service.provider !== null) {\r",
                      "                checkType(p(\"service.provider\"), obj.service.provider, \"object\");\r",
                      "                checkType(p(\"service.provider.id\"), obj.service.provider.id, \"number\");\r",
                      "                checkType(p(\"service.provider.name\"), obj.service.provider.name, \"string\");\r",
                      "\r",
                      "                if (obj.service.provider.account !== null) {\r",
                      "                    checkType(p(\"service.provider.account\"), obj.service.provider.account, \"object\");\r",
                      "                    checkType(p(\"service.provider.account.id\"), obj.service.provider.account.id, \"string\");\r",
                      "                    checkType(p(\"service.provider.account.name\"), obj.service.provider.account.name, \"string\");\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"start_at\"), obj.start_at, \"string\", true);\r",
                      "        checkType(p(\"status\"), obj.status, \"string\");\r",
                      "        checkType(p(\"subject\"), obj.subject, \"string\");\r",
                      "\r",
                      "        // template\r",
                      "        if (obj.template !== null) {\r",
                      "            checkType(p(\"template\"), obj.template, \"object\");\r",
                      "            checkType(p(\"template.id\"), obj.template.id, \"number\");\r",
                      "            checkType(p(\"template.subject\"), obj.template.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"updated_at\"), obj.updated_at, \"string\");\r",
                      "        checkType(p(\"workflow_type\"), obj.workflow_type, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    validate(item);\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"üîç –û–±—ä–µ–∫—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "17b83d32-a4a7-41c3-a868-8cb6637db582",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-17b83d32-a4a7-41c3-a868-8cb6637db582"
            }
          ],
          "id": "c77a48ca-6d97-4f4f-8aba-c4c38b740c6a",
          "uid": "32335283-c77a48ca-6d97-4f4f-8aba-c4c38b740c6a"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    const response = pm.response.json();\r",
                      "    pm.environment.set(\"workflows_id\", response.id);\r",
                      "    console.log(\"workflows_id\", response.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const item = Array.isArray(jsonData) ? jsonData[0] : jsonData;\r",
                      "    \r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ array, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (expectedType === \"object\") {\r",
                      "            if (value === null && nullable) return;\r",
                      "            if (actualType !== \"object\" || Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ object, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    function validate(obj, path = '') {\r",
                      "        function p(prop) {\r",
                      "            return path ? `${path}.${prop}` : prop;\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"actual_effort\"), obj.actual_effort, \"number\");\r",
                      "        checkType(p(\"actual_vs_planned_effort_percentage\"), obj.actual_vs_planned_effort_percentage, \"number\");\r",
                      "        checkType(p(\"attachments\"), obj.attachments, \"array\");\r",
                      "        checkType(p(\"category\"), obj.category, \"string\");\r",
                      "        checkType(p(\"completed_at\"), obj.completed_at, \"string\", true);\r",
                      "        checkType(p(\"completion_reason\"), obj.completion_reason, \"string\", true);\r",
                      "        checkType(p(\"completion_target_at\"), obj.completion_target_at, \"string\", true);\r",
                      "        checkType(p(\"created_at\"), obj.created_at, \"string\");\r",
                      "        checkType(p(\"custom_fields\"), obj.custom_fields, \"object\", true);\r",
                      "        checkType(p(\"id\"), obj.id, \"number\");\r",
                      "        checkType(p(\"impact\"), obj.impact, \"string\");\r",
                      "        checkType(p(\"justification\"), obj.justification, \"string\");\r",
                      "\r",
                      "        // manager\r",
                      "        if (obj.manager !== null) {\r",
                      "            checkType(p(\"manager\"), obj.manager, \"object\");\r",
                      "            checkType(p(\"manager.id\"), obj.manager.id, \"number\");\r",
                      "            checkType(p(\"manager.name\"), obj.manager.name, \"string\");\r",
                      "            if (obj.manager.account !== null) {\r",
                      "                checkType(p(\"manager.account\"), obj.manager.account, \"object\");\r",
                      "                checkType(p(\"manager.account.id\"), obj.manager.account.id, \"string\");\r",
                      "                checkType(p(\"manager.account.name\"), obj.manager.account.name, \"string\");\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"planned_effort\"), obj.planned_effort, \"number\");\r",
                      "        checkType(p(\"project\"), obj.project, \"object\", true);\r",
                      "\r",
                      "        // release\r",
                      "        if (obj.release !== null) {\r",
                      "            checkType(p(\"release\"), obj.release, \"object\");\r",
                      "            checkType(p(\"release.id\"), obj.release.id, \"number\");\r",
                      "            checkType(p(\"release.subject\"), obj.release.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"resolution_duration\"), obj.resolution_duration, \"number\", true);\r",
                      "\r",
                      "        // service\r",
                      "        if (obj.service !== null) {\r",
                      "            checkType(p(\"service\"), obj.service, \"object\");\r",
                      "            checkType(p(\"service.id\"), obj.service.id, \"number\");\r",
                      "            checkType(p(\"service.name\"), obj.service.name, \"string\");\r",
                      "            checkType(p(\"service.localized_name\"), obj.service.localized_name, \"string\");\r",
                      "\r",
                      "            if (obj.service.provider !== null) {\r",
                      "                checkType(p(\"service.provider\"), obj.service.provider, \"object\");\r",
                      "                checkType(p(\"service.provider.id\"), obj.service.provider.id, \"number\");\r",
                      "                checkType(p(\"service.provider.name\"), obj.service.provider.name, \"string\");\r",
                      "\r",
                      "                if (obj.service.provider.account !== null) {\r",
                      "                    checkType(p(\"service.provider.account\"), obj.service.provider.account, \"object\");\r",
                      "                    checkType(p(\"service.provider.account.id\"), obj.service.provider.account.id, \"string\");\r",
                      "                    checkType(p(\"service.provider.account.name\"), obj.service.provider.account.name, \"string\");\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"start_at\"), obj.start_at, \"string\", true);\r",
                      "        checkType(p(\"status\"), obj.status, \"string\");\r",
                      "        checkType(p(\"subject\"), obj.subject, \"string\");\r",
                      "\r",
                      "        // template\r",
                      "        if (obj.template !== null) {\r",
                      "            checkType(p(\"template\"), obj.template, \"object\");\r",
                      "            checkType(p(\"template.id\"), obj.template.id, \"number\");\r",
                      "            checkType(p(\"template.subject\"), obj.template.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"updated_at\"), obj.updated_at, \"string\");\r",
                      "        checkType(p(\"workflow_type\"), obj.workflow_type, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    validate(item);\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"üîç –û–±—ä–µ–∫—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1cb81f03-e7eb-4a1f-88cf-e4bf6bd8c793",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"actual_effort\": 0,\r\n    \"actual_vs_planned_effort_percentage\": 0,\r\n    \"category\": \"non_standard\",\r\n    \"impact\": \"none\",\r\n    \"justification\": \"improvement\",\r\n    \"manager_id\": 745,\r\n    \"planned_effort\": 4930,\r\n    \"release_id\": 2,\r\n    \"service_id\": 97,\r\n    \"status\": \"being_created\",\r\n    \"subject\": \"–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç—ã –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö —Å API –æ–±–º–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ {{$randomCompanyName}}\",\r\n    \"template_id\": 68,\r\n    \"workflow_type\": \"application_change\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows",
                  "host": [
                    "{{url}}workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1cb81f03-e7eb-4a1f-88cf-e4bf6bd8c793"
            }
          ],
          "id": "413623ec-54a3-4fce-80ef-8c83d124cdc2",
          "uid": "32335283-413623ec-54a3-4fce-80ef-8c83d124cdc2"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è manager\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.status).to.eql(\"completed\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "// // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É\r",
                      "// setTimeout(() => {}, 2000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "87cc77b4-ed48-41ba-9ee9-f2be358fb9f7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": \"completed\",\r\n    \"completion_reason\": \"complete\",\r\n    \"note\": \"kdffmgn\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows/107",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "107"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-87cc77b4-ed48-41ba-9ee9-f2be358fb9f7"
            }
          ],
          "id": "c9280140-6eec-4d4e-947d-bcca72f4d184",
          "uid": "32335283-c9280140-6eec-4d4e-947d-bcca72f4d184"
        },
        {
          "name": "Archive a workflow",
          "item": [
            {
              "name": "Archive a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è manager\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.archived).to.eql(true);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "fa4b4a68-2bca-4896-96c7-b1852e79e0ee",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/107/archive",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "107",
                    "archive"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-fa4b4a68-2bca-4896-96c7-b1852e79e0ee"
            }
          ],
          "id": "37a71d30-8352-4969-8da7-27df9c002bee",
          "uid": "32335283-37a71d30-8352-4969-8da7-27df9c002bee"
        },
        {
          "name": "Trash a workflow",
          "item": [
            {
              "name": "Trash a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è manager\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.trashed).to.eql(true);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e920c95e-205c-41ec-a88d-508f03aa43f1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/107/trash",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "107",
                    "trash"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e920c95e-205c-41ec-a88d-508f03aa43f1"
            }
          ],
          "id": "da350b69-ea60-4445-8c0e-cab3d4c69251",
          "uid": "32335283-da350b69-ea60-4445-8c0e-cab3d4c69251"
        },
        {
          "name": "Restore a workflow",
          "item": [
            {
              "name": "Restore a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const item = Array.isArray(jsonData) ? jsonData[0] : jsonData;\r",
                      "\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ array, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (expectedType === \"object\") {\r",
                      "            if (value === null && nullable) return;\r",
                      "            if (actualType !== \"object\" || Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ object, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–∫ ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    function validate(obj, path = '') {\r",
                      "        function p(prop) {\r",
                      "            return path ? `${path}.${prop}` : prop;\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"actual_effort\"), obj.actual_effort, \"number\");\r",
                      "        checkType(p(\"actual_vs_planned_effort_percentage\"), obj.actual_vs_planned_effort_percentage, \"number\");\r",
                      "        checkType(p(\"attachments\"), obj.attachments, \"array\");\r",
                      "        checkType(p(\"category\"), obj.category, \"string\");\r",
                      "        checkType(p(\"completed_at\"), obj.completed_at, \"string\", true);\r",
                      "        checkType(p(\"completion_reason\"), obj.completion_reason, \"string\", true);\r",
                      "        checkType(p(\"completion_target_at\"), obj.completion_target_at, \"string\", true);\r",
                      "        checkType(p(\"created_at\"), obj.created_at, \"string\");\r",
                      "        checkType(p(\"custom_fields\"), obj.custom_fields, \"object\", true);\r",
                      "        checkType(p(\"id\"), obj.id, \"number\");\r",
                      "        checkType(p(\"impact\"), obj.impact, \"string\");\r",
                      "        checkType(p(\"justification\"), obj.justification, \"string\");\r",
                      "\r",
                      "        // manager\r",
                      "        if (obj.manager !== null) {\r",
                      "            checkType(p(\"manager\"), obj.manager, \"object\");\r",
                      "            checkType(p(\"manager.id\"), obj.manager.id, \"number\");\r",
                      "            checkType(p(\"manager.name\"), obj.manager.name, \"string\");\r",
                      "            if (obj.manager.account !== null) {\r",
                      "                checkType(p(\"manager.account\"), obj.manager.account, \"object\");\r",
                      "                checkType(p(\"manager.account.id\"), obj.manager.account.id, \"string\");\r",
                      "                checkType(p(\"manager.account.name\"), obj.manager.account.name, \"string\");\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"planned_effort\"), obj.planned_effort, \"number\");\r",
                      "        checkType(p(\"project\"), obj.project, \"object\", true);\r",
                      "\r",
                      "        // release\r",
                      "        if (obj.release !== null) {\r",
                      "            checkType(p(\"release\"), obj.release, \"object\");\r",
                      "            checkType(p(\"release.id\"), obj.release.id, \"number\");\r",
                      "            checkType(p(\"release.subject\"), obj.release.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"resolution_duration\"), obj.resolution_duration, \"number\", true);\r",
                      "\r",
                      "        // service\r",
                      "        if (obj.service !== null) {\r",
                      "            checkType(p(\"service\"), obj.service, \"object\");\r",
                      "            checkType(p(\"service.id\"), obj.service.id, \"number\");\r",
                      "            checkType(p(\"service.name\"), obj.service.name, \"string\");\r",
                      "            checkType(p(\"service.localized_name\"), obj.service.localized_name, \"string\");\r",
                      "\r",
                      "            if (obj.service.provider !== null) {\r",
                      "                checkType(p(\"service.provider\"), obj.service.provider, \"object\");\r",
                      "                checkType(p(\"service.provider.id\"), obj.service.provider.id, \"number\");\r",
                      "                checkType(p(\"service.provider.name\"), obj.service.provider.name, \"string\");\r",
                      "\r",
                      "                if (obj.service.provider.account !== null) {\r",
                      "                    checkType(p(\"service.provider.account\"), obj.service.provider.account, \"object\");\r",
                      "                    checkType(p(\"service.provider.account.id\"), obj.service.provider.account.id, \"string\");\r",
                      "                    checkType(p(\"service.provider.account.name\"), obj.service.provider.account.name, \"string\");\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"start_at\"), obj.start_at, \"string\", true);\r",
                      "        checkType(p(\"status\"), obj.status, \"string\");\r",
                      "        checkType(p(\"subject\"), obj.subject, \"string\");\r",
                      "\r",
                      "        // template\r",
                      "        if (obj.template !== null) {\r",
                      "            checkType(p(\"template\"), obj.template, \"object\");\r",
                      "            checkType(p(\"template.id\"), obj.template.id, \"number\");\r",
                      "            checkType(p(\"template.subject\"), obj.template.subject, \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkType(p(\"updated_at\"), obj.updated_at, \"string\");\r",
                      "        checkType(p(\"workflow_type\"), obj.workflow_type, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    validate(item);\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"üîç –û–±—ä–µ–∫—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2f61ddc9-7fc5-4334-961a-1a7c33b71e2e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/107/restore",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "107",
                    "restore"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2f61ddc9-7fc5-4334-961a-1a7c33b71e2e"
            }
          ],
          "id": "fec20fab-7617-43d7-adce-8b4fe19bce96",
          "uid": "32335283-fec20fab-7617-43d7-adce-8b4fe19bce96"
        }
      ],
      "id": "ec2908ac-f76a-4b18-8206-9dd61e5a2ce3",
      "uid": "32335283-ec2908ac-f76a-4b18-8206-9dd61e5a2ce3"
    },
    {
      "name": "Automation Rules",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List automation rules of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2cc2baea-881f-44bb-bae1-fc258c4b1835",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/automation_rules",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "automation_rules"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2cc2baea-881f-44bb-bae1-fc258c4b1835"
            }
          ],
          "id": "d2bea491-6d07-49b9-89b9-d46c9a600cce",
          "uid": "32335283-d2bea491-6d07-49b9-89b9-d46c9a600cce"
        }
      ],
      "id": "0cbb9b18-5b4c-42bc-9bdd-d06b85643d1d",
      "uid": "32335283-0cbb9b18-5b4c-42bc-9bdd-d06b85643d1d"
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a note",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"note_id\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "30f31bb0-a589-4f2f-8e6a-c7c66ff28a5a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"–í –ì–æ—Å–¥—É–º–µ –≥–æ—Ç–æ–≤—è—Ç –∑–∞–∫–æ–Ω –æ –ø–æ–ª–Ω–æ–º –∑–∞–ø—Ä–µ—Ç–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è {{$randomInt}}-{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows/10/notes",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-30f31bb0-a589-4f2f-8e6a-c7c66ff28a5a"
            }
          ],
          "id": "0b06fec8-1495-4cfd-ac03-4c009454007d",
          "uid": "32335283-0b06fec8-1495-4cfd-ac03-4c009454007d"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List notes of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fbff2577-c209-47ed-acac-883c6bdb3d0c",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "68aa5ece-eac5-42c4-8222-a0781f523ab5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/notes",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-68aa5ece-eac5-42c4-8222-a0781f523ab5"
            }
          ],
          "id": "b7f44078-9611-4714-93b2-7f8bc30b82b9",
          "uid": "32335283-b7f44078-9611-4714-93b2-7f8bc30b82b9"
        }
      ],
      "id": "7cb977e8-735d-46a8-bd92-dd8f78dea8eb",
      "uid": "32335283-7cb977e8-735d-46a8-bd92-dd8f78dea8eb"
    },
    {
      "name": "Phases",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a phase to a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.environment.set(\"phases_id\", pm.response.json().id);\r",
                      "});\r",
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–æ—Ç–≤–µ—Ç ‚Äî –æ–±—ä–µ–∫—Ç)\", function () {\r",
                      "    const item = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if ([\"sourceID\", \"source\", \"nodeID\"].includes(prop)) return;\r",
                      "        if (nullable && value === null) return;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å array, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "            }\r",
                      "        } else if (typeof value !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkType(\"completed_at\", item.completed_at, \"string\", true);\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"position\", item.position, \"number\");\r",
                      "    checkType(\"started_at\", item.started_at, \"string\", true);\r",
                      "    checkType(\"status\", item.status, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    // checkType(\"nodeID\", item.nodeID, \"string\"); // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ—Å—å–±–µ\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "8ef0bceb-7d8c-4758-84ac-8683fbd50731",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\" \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows/10/phases",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-8ef0bceb-7d8c-4758-84ac-8683fbd50731"
            }
          ],
          "id": "552ea0fa-9b46-4863-8029-94276526d174",
          "uid": "32335283-552ea0fa-9b46-4863-8029-94276526d174"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all phases of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Team (–ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Å—Å–∏–≤–∞)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const item = jsonData[0];\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if ([\"sourceID\", \"source\", \"nodeID\"].includes(prop)) return;\r",
                      "        if (nullable && value === null) return;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å array, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "            }\r",
                      "        } else if (typeof value !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkType(\"completed_at\", item.completed_at, \"string\", true);\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"position\", item.position, \"number\");\r",
                      "    checkType(\"started_at\", item.started_at, \"string\", true);\r",
                      "    checkType(\"status\", item.status, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    // checkType(\"nodeID\", item.nodeID, \"string\"); // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "916d081b-2458-49b4-8d9f-3eeeafb0a17b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/phases",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-916d081b-2458-49b4-8d9f-3eeeafb0a17b"
            },
            {
              "name": "Get a single phase of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–æ—Ç–≤–µ—Ç ‚Äî –æ–±—ä–µ–∫—Ç)\", function () {\r",
                      "    const item = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if ([\"sourceID\", \"source\", \"nodeID\"].includes(prop)) return;\r",
                      "        if (nullable && value === null) return;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å array, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "            }\r",
                      "        } else if (typeof value !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkType(\"completed_at\", item.completed_at, \"string\", true);\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"position\", item.position, \"number\");\r",
                      "    checkType(\"started_at\", item.started_at, \"string\", true);\r",
                      "    checkType(\"status\", item.status, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    // checkType(\"nodeID\", item.nodeID, \"string\"); // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ—Å—å–±–µ\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "22c54c5d-64bc-435b-8410-31ff300c4487",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-22c54c5d-64bc-435b-8410-31ff300c4487"
            }
          ],
          "id": "242ba034-9b3e-430b-8675-8287c4f886ba",
          "uid": "32335283-242ba034-9b3e-430b-8675-8287c4f886ba"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a phase of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–æ—Ç–≤–µ—Ç ‚Äî –æ–±—ä–µ–∫—Ç)\", function () {\r",
                      "    const item = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if ([\"sourceID\", \"source\", \"nodeID\"].includes(prop)) return;\r",
                      "        if (nullable && value === null) return;\r",
                      "        if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å array, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "            }\r",
                      "        } else if (typeof value !== expectedType) {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å ${expectedType}, –∞ –ø—Ä–∏—à–ª–æ ${typeof value}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkType(\"completed_at\", item.completed_at, \"string\", true);\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"position\", item.position, \"number\");\r",
                      "    checkType(\"started_at\", item.started_at, \"string\", true);\r",
                      "    checkType(\"status\", item.status, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    // checkType(\"nodeID\", item.nodeID, \"string\"); // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ—Å—å–±–µ\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "8446b770-a4f9-4019-a680-769cf576b7a3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows/10/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-8446b770-a4f9-4019-a680-769cf576b7a3"
            }
          ],
          "id": "3fb6dccd-d9ea-419f-90c5-0a9d75245d15",
          "uid": "32335283-3fb6dccd-d9ea-419f-90c5-0a9d75245d15"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a phase from a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d75f2e83-6a5e-49fb-b881-4eea1c6a55f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflows/10/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d75f2e83-6a5e-49fb-b881-4eea1c6a55f2"
            },
            {
              "name": "Check \"Remove a phase from a workflow\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "18ecf8e1-eaeb-4fd7-a422-069ee0977b6d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-18ecf8e1-eaeb-4fd7-a422-069ee0977b6d"
            }
          ],
          "id": "d0c2ad5f-7ed7-4358-8c19-f5cfb20954dd",
          "uid": "32335283-d0c2ad5f-7ed7-4358-8c19-f5cfb20954dd"
        }
      ],
      "id": "01991378-011d-4862-8936-053bc9d08c22",
      "uid": "32335283-01991378-011d-4862-8936-053bc9d08c22"
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all requests of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "console.log(\"–û—Ç–≤–µ—Ç (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ú–∞—Å—Å–∏–≤ Request —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "if (jsonData.length > 0) {\r",
                      "    let item = jsonData[0];\r",
                      "\r",
                      "    pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–≥–æ Request\", () => {\r",
                      "        try {\r",
                      "            pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item).to.have.property(\"sourceID\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "            pm.expect(item).to.have.property(\"subject\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"category\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"impact\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "            pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"next_target_at\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"completed_at\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "\r",
                      "            // team\r",
                      "            pm.expect(item).to.have.property(\"team\").that.is.an(\"object\");\r",
                      "            pm.expect(item.team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item.team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            // nodeID –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\r",
                      "\r",
                      "            // member\r",
                      "            pm.expect(item).to.have.property(\"member\").that.is.an(\"object\");\r",
                      "            pm.expect(item.member).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item.member).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(item.member).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(item.member.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(item.member.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            // grouped_into\r",
                      "            pm.expect(item).to.have.property(\"grouped_into\").that.satisfy(v => v === null || typeof v === \"object\");\r",
                      "\r",
                      "            // service_instance\r",
                      "            pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "            let si = item.service_instance;\r",
                      "            pm.expect(si).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(si).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(si).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "            // nodeID –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\r",
                      "\r",
                      "            // timestamps\r",
                      "            pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        } catch (e) {\r",
                      "            console.error(\"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: \" + e.message);\r",
                      "            console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a9af774b-1169-4dc0-a486-1a7e0b7650c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/requests",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a9af774b-1169-4dc0-a486-1a7e0b7650c2"
            }
          ],
          "id": "34c6dc23-febf-4b72-adf1-a5b9d966d7bc",
          "uid": "32335283-34c6dc23-febf-4b72-adf1-a5b9d966d7bc"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a request to a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0d98fdf4-f9f7-440b-b200-71c6a3bddb49",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/requests/140",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "requests",
                    "140"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0d98fdf4-f9f7-440b-b200-71c6a3bddb49"
            },
            {
              "name": "Check \"Add a request to a workflow\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test to check if the response array contains an object with id 140\r",
                      "pm.test(\"Array contains an object with id 140\", function () {\r",
                      "    var containsId140 = responseJSON.some(function (request) {\r",
                      "        return request.id === 140;\r",
                      "    });\r",
                      "    pm.expect(containsId140).to.be.true;\r",
                      "    if (!containsId140) {\r",
                      "        console.error(\"No object with id 140 found in the response array.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1fff05a2-f86b-4cf2-9cca-a3ee5b5a6d9a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/requests",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1fff05a2-f86b-4cf2-9cca-a3ee5b5a6d9a"
            }
          ],
          "id": "b795dcf0-a2a7-4fc0-bfdb-5de14829b598",
          "uid": "32335283-b795dcf0-a2a7-4fc0-bfdb-5de14829b598"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a request from a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "86d9b0a1-b0aa-4008-a270-f79fde7d89c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/requests/140",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "requests",
                    "140"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-86d9b0a1-b0aa-4008-a270-f79fde7d89c2"
            },
            {
              "name": "Check \"Remove a request from a workflow\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å id 140 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è\r",
                      "pm.test(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å id:140 –≤ –º–∞—Å—Å–∏–≤–µ`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 140;\r",
                      "\r",
                      "    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –æ–±—ä–µ–∫—Ç —Å id: ${targetId} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å id 140 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`);\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `–û–±—ä–µ–∫—Ç —Å id: ${targetId} –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "33462281-8b1e-49be-9e0f-e96b09d3680a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/requests",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-33462281-8b1e-49be-9e0f-e96b09d3680a"
            }
          ],
          "id": "e5474758-0096-43b6-a0e2-1fd02b611f03",
          "uid": "32335283-e5474758-0096-43b6-a0e2-1fd02b611f03"
        }
      ],
      "id": "9926d338-0225-40e2-98ab-998b96eee40a",
      "uid": "32335283-9926d338-0225-40e2-98ab-998b96eee40a"
    },
    {
      "name": "Problems",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all problems of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "console.log(\"–û—Ç–≤–µ—Ç (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"–ú–∞—Å—Å–∏–≤ Problem —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "if (jsonData.length > 0) {\r",
                      "    const item = jsonData[0];\r",
                      "\r",
                      "    pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–≥–æ Problem\", () => {\r",
                      "        try {\r",
                      "            pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item).to.have.property(\"sourceID\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "            pm.expect(item).to.have.property(\"subject\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"impact\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"known_error\").that.is.a(\"boolean\");\r",
                      "            pm.expect(item).to.have.property(\"analysis_target_at\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"solved_at\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "\r",
                      "            // team\r",
                      "            pm.expect(item).to.have.property(\"team\").that.is.an(\"object\");\r",
                      "            pm.expect(item.team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item.team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            // member\r",
                      "            pm.expect(item).to.have.property(\"member\").that.is.an(\"object\");\r",
                      "            pm.expect(item.member).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(item.member).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(item.member).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(item.member.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(item.member.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            // service\r",
                      "            pm.expect(item).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "            let svc = item.service;\r",
                      "            pm.expect(svc).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(svc).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(svc).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "            // provider\r",
                      "            pm.expect(svc).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "            let provider = svc.provider;\r",
                      "            pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            // timestamps\r",
                      "            pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        } catch (e) {\r",
                      "            console.error(\"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: \" + e.message);\r",
                      "            console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(item, null, 2));\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0e216661-ab75-46fb-a98f-97012d576cd2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/29/problems",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "29",
                    "problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0e216661-ab75-46fb-a98f-97012d576cd2"
            }
          ],
          "id": "0416874e-4754-43ba-a221-c0a803289ea4",
          "uid": "32335283-0416874e-4754-43ba-a221-c0a803289ea4"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a problem to a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1349dcc6-3f48-4c46-b1a4-7dd620625233",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/problems/35",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "problems",
                    "35"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1349dcc6-3f48-4c46-b1a4-7dd620625233"
            },
            {
              "name": "Check \"Add a problem to a workflow\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å id 35\r",
                      "pm.test(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å id: 35 –≤ –º–∞—Å—Å–∏–≤–µ`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 35;\r",
                      "\r",
                      "    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –æ–±—ä–µ–∫—Ç —Å id: ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å id 35`);\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `–û–±—ä–µ–∫—Ç —Å id: ${targetId} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ`).to.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3e9126be-cd92-48cd-9518-24b8d5819af2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/problems",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3e9126be-cd92-48cd-9518-24b8d5819af2"
            }
          ],
          "id": "5222f712-0b32-4381-bdc1-a733a3c47680",
          "uid": "32335283-5222f712-0b32-4381-bdc1-a733a3c47680"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a problem from a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ ‚Äî 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "eed83446-82fe-402f-b288-a0a9ca72bebb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/problems/35",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "problems",
                    "35"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-eed83446-82fe-402f-b288-a0a9ca72bebb"
            },
            {
              "name": "Check \"Remove a problem from a workflow\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å id 35\r",
                      "pm.test(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å id: 35 –≤ –º–∞—Å—Å–∏–≤–µ`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 35;\r",
                      "\r",
                      "    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –æ–±—ä–µ–∫—Ç —Å id: ${targetId} –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å id 35 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`);\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `–û–±—ä–µ–∫—Ç —Å id: ${targetId} –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "679925af-f234-4412-9be2-57020f43d201",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/10/problems",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "10",
                    "problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-679925af-f234-4412-9be2-57020f43d201"
            }
          ],
          "id": "eb335a52-ff7e-4fc0-82eb-d14d14739dcd",
          "uid": "32335283-eb335a52-ff7e-4fc0-82eb-d14d14739dcd"
        }
      ],
      "id": "88601d4f-90ca-4eba-8fa6-b8806906ec48",
      "uid": "32335283-88601d4f-90ca-4eba-8fa6-b8806906ec48"
    },
    {
      "name": "Tasks",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all tasks of a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"–û—Ç–≤–µ—Ç (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"–û—Ç–≤–µ—Ç ‚Äî –º–∞—Å—Å–∏–≤ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º\", function () {\r",
                      "    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "let task = jsonData[0];\r",
                      "\r",
                      "pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Task\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    if (typeof task.id !== \"number\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'id' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å number, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.id}`);\r",
                      "    }\r",
                      "\r",
                      "    if (task.sourceID !== null && typeof task.sourceID !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'sourceID' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string –∏–ª–∏ null, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.sourceID}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.subject !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'subject' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.subject}`);\r",
                      "    }\r",
                      "\r",
                      "    if (task.phase !== null && typeof task.phase !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'phase' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string –∏–ª–∏ null, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.phase}`);\r",
                      "    }\r",
                      "\r",
                      "    if (task.impact !== null && typeof task.impact !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'impact' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string –∏–ª–∏ null, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.impact}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.category !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'category' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.category}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.status !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'status' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.status}`);\r",
                      "    }\r",
                      "\r",
                      "    if (task.team !== null) {\r",
                      "        if (typeof task.team.id !== \"number\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'team.id' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å number, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.team.id}`);\r",
                      "        }\r",
                      "        if (typeof task.team.name !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'team.name' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.team.name}`);\r",
                      "        }\r",
                      "        if (typeof task.team.nodeID !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'team.nodeID' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.team.nodeID}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    if (task.member !== null) {\r",
                      "        if (typeof task.member.id !== \"number\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'member.id' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å number, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.member.id}`);\r",
                      "        }\r",
                      "        if (typeof task.member.name !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'member.name' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.member.name}`);\r",
                      "        }\r",
                      "        if (typeof task.member.account.id !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'member.account.id' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.member.account.id}`);\r",
                      "        }\r",
                      "        if (typeof task.member.account.name !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'member.account.name' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.member.account.name}`);\r",
                      "        }\r",
                      "        if (typeof task.member.nodeID !== \"string\") {\r",
                      "            errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'member.nodeID' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.member.nodeID}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.completion_target_at !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'completion_target_at' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.completion_target_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (task.finished_at !== null && typeof task.finished_at !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'finished_at' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string –∏–ª–∏ null, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.finished_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.created_at !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'created_at' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.created_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.updated_at !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'updated_at' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.updated_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof task.nodeID !== \"string\") {\r",
                      "        errors.push(`–°–≤–æ–π—Å—Ç–≤–æ 'nodeID' –æ–∂–∏–¥–∞–ª–æ—Å—å –±—ã—Ç—å string, –∞ –ø—Ä–∏—à–ª–æ ${typeof task.nodeID}`);\r",
                      "    }\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"–î–∞–Ω–Ω—ã–µ, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:\\n\" + JSON.stringify(task, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "5b4c654b-8bf6-4ec9-b529-d12001c06113",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflows/29/tasks",
                  "host": [
                    "{{url}}workflows"
                  ],
                  "path": [
                    "29",
                    "tasks"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-5b4c654b-8bf6-4ec9-b529-d12001c06113"
            }
          ],
          "id": "5440ef36-3167-400f-a6be-99223bfdedea",
          "uid": "32335283-5440ef36-3167-400f-a6be-99223bfdedea"
        }
      ],
      "id": "0784e6a7-dd0a-4b70-8f75-9b07f8da7011",
      "uid": "32335283-0784e6a7-dd0a-4b70-8f75-9b07f8da7011"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "581a95fd-871e-4514-8023-7e149f9c07da",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "b598ca16-9966-4cfd-b69b-a8232327b74d",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}