{
  "info": {
    "_postman_id": "5c45d164-0404-4e0a-8a68-cac99c5d98db",
    "name": "05. Organizations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T14:22:28.000Z",
    "createdAt": "2025-06-30T08:24:04.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-5c45d164-0404-4e0a-8a68-cac99c5d98db"
  },
  "item": [
    {
      "name": "Organizations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 get list organizations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "\r",
                      "    pm.test(\"Ответ — массив\", function () {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "    });\r",
                      "\r",
                      "    const first = jsonData[0];\r",
                      "\r",
                      "    pm.test(\"Поля первого объекта — базовая валидация\", function () {\r",
                      "        pm.expect(first).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(first).to.have.property(\"sourceID\"); // может быть null или строкой\r",
                      "        pm.expect(first).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"manager\"); // null\r",
                      "        pm.expect(first).to.have.property(\"parent\"); // null или объект\r",
                      "        // pm.expect(first).to.have.property(\"account\").to.be.oneOf([undefined, null, Object]);\r",
                      "    });\r",
                      "\r",
                      "    // Дополнительная валидация, если parent есть\r",
                      "    if (first.parent) {\r",
                      "        pm.test(\"Поле parent содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(first.parent).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(first.parent).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(first.parent).to.have.property(\"sourceID\").that.is.a(\"string\");\r",
                      "            pm.expect(first.parent).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(first.parent).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(first.parent.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(first.parent.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // // Дополнительная валидация, если account есть на верхнем уровне\r",
                      "    // if (first.account) {\r",
                      "    //     pm.test(\"Поле account содержит ожидаемые поля\", function () {\r",
                      "    //         pm.expect(first.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    //         pm.expect(first.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    //     });\r",
                      "    // }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "8f3d510e-f6ae-48c8-ade6-1ab2178e021d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations?id=129",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "129"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-8f3d510e-f6ae-48c8-ade6-1ab2178e021d"
            },
            {
              "name": "1.2 get organizations/id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let item = jsonData;\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта Organization\", function () {\r",
                      "    try {\r",
                      "        pm.expect(item).to.be.an(\"object\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "        pm.expect(item).to.have.property(\"business_unit\").that.is.a(\"boolean\");\r",
                      "        pm.expect(item).to.have.property(\"end_user_privacy\").that.is.a(\"boolean\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"business_unit_organization\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"custom_fields\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"financialID\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"manager\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"order_template\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"parent\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"region\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"source\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"sourceID\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"substitute\").that.is.null;\r",
                      "        pm.expect(item).to.have.property(\"ui_extension\").that.is.null;\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"remarks\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"picture_uri\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Адреса\r",
                      "        pm.expect(item).to.have.property(\"addresses\").that.is.an(\"array\");\r",
                      "        if (item.addresses.length > 0) {\r",
                      "            let addr = item.addresses[0];\r",
                      "            pm.expect(addr).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(addr).to.have.property(\"address\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"city\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"country\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "            pm.expect(addr).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"state\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "            pm.expect(addr).to.have.property(\"zip\").that.is.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // Контакты\r",
                      "        pm.expect(item).to.have.property(\"contacts\").that.is.an(\"array\");\r",
                      "        if (item.contacts.length > 0) {\r",
                      "            let contact = item.contacts[0];\r",
                      "            pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            if (contact.hasOwnProperty(\"telephone\")) {\r",
                      "                pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "            }\r",
                      "            if (contact.hasOwnProperty(\"email\")) {\r",
                      "                pm.expect(contact.email).to.be.a(\"string\");\r",
                      "            }\r",
                      "            if (contact.hasOwnProperty(\"website\")) {\r",
                      "                pm.expect(contact.website).to.be.a(\"string\");\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        // Приложения\r",
                      "        pm.expect(item).to.have.property(\"attachments\").that.is.an(\"array\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации:\\n\" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2be4c7d6-83ab-4785-b4a5-826b5ddb52bf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/129",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "129"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2be4c7d6-83ab-4785-b4a5-826b5ddb52bf"
            },
            {
              "name": "1.3 get organizations/managed_by_me",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response[0].manager.name, 'response[0].manager.name').to.equal('Афанасенко Валерий');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4b6435eb-da57-418c-a6a8-19a7ac116424",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/managed_by_me",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "managed_by_me"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4b6435eb-da57-418c-a6a8-19a7ac116424"
            }
          ],
          "id": "5ab00d5a-f4ae-4266-9b45-7126d0e99372",
          "uid": "32335283-5ab00d5a-f4ae-4266-9b45-7126d0e99372"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "1.4 create organizations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    console.log(\"Статус код ответа: 201 - Успешно\");\r",
                      "\r",
                      "    // Проверяем что ответ является объектом\r",
                      "    pm.test(\"Response is an object\", function () {\r",
                      "        const response = pm.response.json();\r",
                      "        const isObject = typeof response === 'object' && !Array.isArray(response);\r",
                      "        if (!isObject) {\r",
                      "            console.error(\"ОШИБКА: Ответ не является объектом\");\r",
                      "        }\r",
                      "        pm.expect(isObject).to.be.true;\r",
                      "    });\r",
                      "\r",
                      "    const response = pm.response.json();\r",
                      "\r",
                      "    // Проверяем что объект не пустой\r",
                      "    pm.test(\"Response is not empty\", function () {\r",
                      "        const isEmpty = Object.keys(response).length === 0;\r",
                      "        if (isEmpty) {\r",
                      "            console.error(\"ОШИБКА: Получен пустой объект в ответе\");\r",
                      "        }\r",
                      "        pm.expect(response).to.not.be.empty;\r",
                      "    });\r",
                      "\r",
                      "    // Проверяем наличие обязательных полей\r",
                      "    pm.test(\"Response has required properties\", function () {\r",
                      "        try {\r",
                      "            pm.expect(response).to.include.keys(\r",
                      "                'id', 'name', 'created_at', 'updated_at', 'nodeID',\r",
                      "                'addresses', 'contacts', 'disabled'\r",
                      "            );\r",
                      "            console.log(\"Все обязательные поля присутствуют\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"ОШИБКА: Отсутствуют обязательные поля:\", e.message);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Проверка простых полей\r",
                      "    const simpleFields = {\r",
                      "        'id': 'number',\r",
                      "        'name': 'string',\r",
                      "        'business_unit': 'boolean',\r",
                      "        'disabled': 'boolean',\r",
                      "        'end_user_privacy': 'boolean',\r",
                      "        'manager': ['string', 'null'],\r",
                      "        'source': ['string', 'null'],\r",
                      "        'sourceID': ['string', 'null'],\r",
                      "        'financialID': ['string', 'null'],\r",
                      "        'region': ['string', 'null'],\r",
                      "        'substitute': ['string', 'null'],\r",
                      "        'ui_extension': ['string', 'null'],\r",
                      "        'order_template': ['string', 'null'],\r",
                      "        'picture_uri': ['string', 'null'],\r",
                      "        'remarks': ['string', 'null']\r",
                      "    };\r",
                      "\r",
                      "    Object.entries(simpleFields).forEach(([field, type]) => {\r",
                      "        if (response.hasOwnProperty(field)) {\r",
                      "            pm.test(`Field ${field} has correct type`, function () {\r",
                      "                try {\r",
                      "                    if (Array.isArray(type)) {\r",
                      "                        pm.expect(response[field]).to.satisfy((val) =>\r",
                      "                            type.includes(typeof val) || (val === null && type.includes('null'))\r",
                      "                        );\r",
                      "                    } else {\r",
                      "                        pm.expect(response[field]).to.be.a(type);\r",
                      "                    }\r",
                      "                    console.log(`Поле ${field} имеет корректный тип (${type})`);\r",
                      "                } catch (e) {\r",
                      "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный тип:`, e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        } else if (!['manager', 'source', 'sourceID', 'financialID', 'region',\r",
                      "            'substitute', 'ui_extension', 'order_template', 'remarks'].includes(field)) {\r",
                      "            console.error(`ОШИБКА: Отсутствует поле ${field}`);\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Проверка поля parent (может быть null)\r",
                      "    if (response.hasOwnProperty('parent')) {\r",
                      "        pm.test(\"Field parent is nullable\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.parent).to.satisfy((val) => val === null || typeof val === 'object');\r",
                      "                console.log(\"Поле parent имеет допустимое значение (null или объект)\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле parent имеет некорректное значение:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.log(\"ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле parent (но оно может быть опциональным)\");\r",
                      "    }\r",
                      "\r",
                      "    // Проверка поля business_unit_organization (может быть null)\r",
                      "    if (response.hasOwnProperty('business_unit_organization')) {\r",
                      "        pm.test(\"Field business_unit_organization is nullable\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.business_unit_organization).to.satisfy((val) => val === null || typeof val === 'object');\r",
                      "                console.log(\"Поле business_unit_organization имеет допустимое значение (null или объект)\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле business_unit_organization имеет некорректное значение:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.log(\"ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле business_unit_organization (но оно может быть опциональным)\");\r",
                      "    }\r",
                      "\r",
                      "    // Проверка массива addresses\r",
                      "    if (response.hasOwnProperty('addresses')) {\r",
                      "        pm.test(\"Addresses is an array\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.addresses).to.be.an('array');\r",
                      "                console.log(\"Поле addresses является массивом\");\r",
                      "\r",
                      "                // Проверяем каждый адрес\r",
                      "                response.addresses.forEach((address, index) => {\r",
                      "                    const addressPrefix = `Адрес ${index + 1}`;\r",
                      "\r",
                      "                    pm.test(`${addressPrefix} has required properties`, function () {\r",
                      "                        try {\r",
                      "                            pm.expect(address).to.include.keys('id', 'address', 'city', 'country', 'label', 'zip', 'nodeID');\r",
                      "                            console.log(`${addressPrefix}: Все обязательные поля присутствуют`);\r",
                      "                        } catch (e) {\r",
                      "                            console.error(`ОШИБКА: ${addressPrefix} отсутствуют обязательные поля:`, e.message);\r",
                      "                            throw e;\r",
                      "                        }\r",
                      "                    });\r",
                      "\r",
                      "                    // Проверка полей адреса\r",
                      "                    const addressFields = {\r",
                      "                        'id': 'number',\r",
                      "                        'address': 'string',\r",
                      "                        'city': 'string',\r",
                      "                        'country': 'string',\r",
                      "                        'integration': 'boolean',\r",
                      "                        'label': 'string',\r",
                      "                        'state': ['string', 'null'],\r",
                      "                        'zip': 'string'\r",
                      "                    };\r",
                      "\r",
                      "                    Object.entries(addressFields).forEach(([field, type]) => {\r",
                      "                        if (address.hasOwnProperty(field)) {\r",
                      "                            pm.test(`${addressPrefix} field ${field} has correct type`, function () {\r",
                      "                                try {\r",
                      "                                    if (Array.isArray(type)) {\r",
                      "                                        pm.expect(address[field]).to.satisfy((val) =>\r",
                      "                                            type.includes(typeof val) || (val === null && type.includes('null'))\r",
                      "                                        );\r",
                      "                                    } else {\r",
                      "                                        pm.expect(address[field]).to.be.a(type);\r",
                      "                                    }\r",
                      "                                    console.log(`${addressPrefix}: Поле ${field} имеет корректный тип (${type})`);\r",
                      "                                } catch (e) {\r",
                      "                                    console.error(`ОШИБКА: ${addressPrefix} поле ${field} имеет некорректный тип:`, e.message);\r",
                      "                                    throw e;\r",
                      "                                }\r",
                      "                            });\r",
                      "                        } else if (field !== 'state') {\r",
                      "                            console.error(`ОШИБКА: ${addressPrefix} отсутствует поле ${field}`);\r",
                      "                        }\r",
                      "                    });\r",
                      "\r",
                      "                    // Проверка nodeID адреса\r",
                      "                    if (address.hasOwnProperty('nodeID')) {\r",
                      "                        pm.test(`${addressPrefix} nodeID has correct format`, function () {\r",
                      "                            try {\r",
                      "                                pm.expect(address.nodeID).to.be.a('string');\r",
                      "                                pm.expect(address.nodeID).to.match(/^cWEuci1zZXJ2aWNlLnRlY2gvQWRkcmVzcy8/);\r",
                      "                                console.log(`${addressPrefix}: Поле nodeID имеет корректный формат`);\r",
                      "                            } catch (e) {\r",
                      "                                console.error(`ОШИБКА: ${addressPrefix} поле nodeID имеет некорректный формат:`, e.message);\r",
                      "                                throw e;\r",
                      "                            }\r",
                      "                        });\r",
                      "                    } else {\r",
                      "                        console.error(`ОШИБКА: ${addressPrefix} отсутствует поле nodeID`);\r",
                      "                    }\r",
                      "                });\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле addresses не является массивом:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.error(\"ОШИБКА: Отсутствует поле addresses\");\r",
                      "    }\r",
                      "\r",
                      "    // Проверка массива contacts\r",
                      "    if (response.hasOwnProperty('contacts')) {\r",
                      "        pm.test(\"Contacts is an array\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.contacts).to.be.an('array');\r",
                      "                console.log(\"Поле contacts является массивом\");\r",
                      "\r",
                      "                // Проверяем каждый контакт\r",
                      "                response.contacts.forEach((contact, index) => {\r",
                      "                    const contactPrefix = `Контакт ${index + 1}`;\r",
                      "\r",
                      "                    pm.test(`${contactPrefix} has required properties`, function () {\r",
                      "                        try {\r",
                      "                            pm.expect(contact).to.include.keys('id', 'label', 'nodeID');\r",
                      "                            console.log(`${contactPrefix}: Все обязательные поля присутствуют`);\r",
                      "                        } catch (e) {\r",
                      "                            console.error(`ОШИБКА: ${contactPrefix} отсутствуют обязательные поля:`, e.message);\r",
                      "                            throw e;\r",
                      "                        }\r",
                      "                    });\r",
                      "\r",
                      "                    // Проверка полей контакта\r",
                      "                    const contactFields = {\r",
                      "                        'id': 'number',\r",
                      "                        'label': 'string',\r",
                      "                        'telephone': ['string', 'undefined'],\r",
                      "                        'email': ['string', 'undefined'],\r",
                      "                        'website': ['string', 'undefined']\r",
                      "                    };\r",
                      "\r",
                      "                    Object.entries(contactFields).forEach(([field, type]) => {\r",
                      "                        if (contact.hasOwnProperty(field)) {\r",
                      "                            pm.test(`${contactPrefix} field ${field} has correct type`, function () {\r",
                      "                                try {\r",
                      "                                    if (Array.isArray(type)) {\r",
                      "                                        pm.expect(contact[field]).to.satisfy((val) =>\r",
                      "                                            type.includes(typeof val) || (val === null && type.includes('null'))\r",
                      "                                        );\r",
                      "                                    } else {\r",
                      "                                        pm.expect(contact[field]).to.be.a(type);\r",
                      "                                    }\r",
                      "                                    console.log(`${contactPrefix}: Поле ${field} имеет корректный тип (${type})`);\r",
                      "                                } catch (e) {\r",
                      "                                    console.error(`ОШИБКА: ${contactPrefix} поле ${field} имеет некорректный тип:`, e.message);\r",
                      "                                    throw e;\r",
                      "                                }\r",
                      "                            });\r",
                      "                        } else if (field !== 'telephone' && field !== 'email' && field !== 'website') {\r",
                      "                            console.error(`ОШИБКА: ${contactPrefix} отсутствует поле ${field}`);\r",
                      "                        }\r",
                      "                    });\r",
                      "\r",
                      "                    // Проверка nodeID контакта\r",
                      "                    if (contact.hasOwnProperty('nodeID')) {\r",
                      "                        pm.test(`${contactPrefix} nodeID has correct format`, function () {\r",
                      "                            try {\r",
                      "                                pm.expect(contact.nodeID).to.be.a('string');\r",
                      "                                pm.expect(contact.nodeID).to.match(/^cWEuci1zZXJ2aWNlLnRlY2gvQ29udGFjdC8/);\r",
                      "                                console.log(`${contactPrefix}: Поле nodeID имеет корректный формат`);\r",
                      "                            } catch (e) {\r",
                      "                                console.error(`ОШИБКА: ${contactPrefix} поле nodeID имеет некорректный формат:`, e.message);\r",
                      "                                throw e;\r",
                      "                            }\r",
                      "                        });\r",
                      "                    } else {\r",
                      "                        console.error(`ОШИБКА: ${contactPrefix} отсутствует поле nodeID`);\r",
                      "                    }\r",
                      "\r",
                      "                    // Проверка что есть хотя бы одно контактное поле\r",
                      "                    pm.test(`${contactPrefix} has at least one contact field`, function () {\r",
                      "                        try {\r",
                      "                            const hasContactField = ['telephone', 'email', 'website'].some(field =>\r",
                      "                                contact.hasOwnProperty(field) && contact[field]\r",
                      "                            );\r",
                      "                            pm.expect(hasContactField).to.be.true;\r",
                      "                            console.log(`${contactPrefix}: Имеет хотя бы одно контактное поле (телефон, email или website)`);\r",
                      "                        } catch (e) {\r",
                      "                            console.error(`ОШИБКА: ${contactPrefix} не имеет ни одного контактного поля:`, e.message);\r",
                      "                            throw e;\r",
                      "                        }\r",
                      "                    });\r",
                      "                });\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле contacts не является массивом:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.error(\"ОШИБКА: Отсутствует поле contacts\");\r",
                      "    }\r",
                      "\r",
                      "    // Проверка поля custom_fields (может быть null)\r",
                      "    if (response.hasOwnProperty('custom_fields')) {\r",
                      "        pm.test(\"Field custom_fields is nullable\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.custom_fields).to.satisfy((val) => val === null || typeof val === 'object');\r",
                      "                console.log(\"Поле custom_fields имеет допустимое значение (null или объект)\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле custom_fields имеет некорректное значение:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.log(\"ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле custom_fields (но оно может быть опциональным)\");\r",
                      "    }\r",
                      "\r",
                      "    // Проверка поля attachments (должен быть массивом)\r",
                      "    if (response.hasOwnProperty('attachments')) {\r",
                      "        pm.test(\"Attachments is an array\", function () {\r",
                      "            try {\r",
                      "                pm.expect(response.attachments).to.be.an('array');\r",
                      "                console.log(\"Поле attachments является массивом\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"ОШИБКА: Поле attachments не является массивом:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.error(\"ОШИБКА: Отсутствует поле attachments\");\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "accab0f1-3fe0-4d66-a05a-85744a83628e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dp",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{$randomCompanyName}}{{$randomCompanySuffix}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations",
                  "host": [
                    "{{url}}organizations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-accab0f1-3fe0-4d66-a05a-85744a83628e"
            }
          ],
          "id": "214a5850-0139-4068-8fe7-cac9e5d6e1a1",
          "uid": "32335283-214a5850-0139-4068-8fe7-cac9e5d6e1a1"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "1.5 update organizations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка ответа сервера\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    const data = pm.response.json();\r",
                      "    pm.expect(data).to.be.an(\"object\");\r",
                      "    pm.expect(data.name, 'name').to.eq('AliveColors - test');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2609f742-d009-4946-af27-8faefc5aa7e4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dp",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"AliveColors - test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations/129",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "129"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2609f742-d009-4946-af27-8faefc5aa7e4"
            }
          ],
          "id": "c455931c-410b-4d73-814e-3a169676d9f8",
          "uid": "32335283-c455931c-410b-4d73-814e-3a169676d9f8"
        }
      ],
      "id": "71ef179b-396a-4aeb-8e38-a89983192c88",
      "uid": "32335283-71ef179b-396a-4aeb-8e38-a89983192c88"
    },
    {
      "name": "Addresses",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "1.3 Add an address to an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "\r",
                      "let json = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.environment.set(\"address_id\", json.id); // Сохраняем ID в окружение\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта Address\", function () {\r",
                      "    let item = json;\r",
                      "    pm.environment.set(\"address_id\", json.id); // Сохраняем ID в окружение\r",
                      "    let errors = [];\r",
                      "\r",
                      "    function checkField(obj, key, expectedTypes) {\r",
                      "        const actual = obj[key];\r",
                      "        const actualType = actual === null ? \"null\" : typeof actual;\r",
                      "        if (!expectedTypes.includes(actualType)) {\r",
                      "            errors.push(`Свойство '${key}' ожидалось быть ${expectedTypes.join(\" или \")}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", [\"number\"]);\r",
                      "    checkField(item, \"address\", [\"string\"]);\r",
                      "    checkField(item, \"city\", [\"string\"]);\r",
                      "    checkField(item, \"country\", [\"string\"]);\r",
                      "    checkField(item, \"integration\", [\"boolean\"]);\r",
                      "    checkField(item, \"label\", [\"string\"]);\r",
                      "    checkField(item, \"zip\", [\"string\"]);\r",
                      "    checkField(item, \"state\", [\"string\", \"null\"]);\r",
                      "    // nodeID больше не проверяем\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"❌ Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6bc88d50-d4a5-4c90-9428-f4ece0e88a68",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"address\": \"Большой Спасоглинищевский пер., {{$randomInt}}, Москва, 101000\",\r\n    \"city\": \"Москва\",\r\n    \"country\": \"RU\",\r\n    \"integration\": false,\r\n    \"label\": \"street\",\r\n    \"state\": null,\r\n    \"zip\": \"101000\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations/4/addresses",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6bc88d50-d4a5-4c90-9428-f4ece0e88a68"
            }
          ],
          "id": "f75e58e9-c100-425c-a737-c47840fc74c3",
          "uid": "32335283-f75e58e9-c100-425c-a737-c47840fc74c3"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 get List all addresses of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры всех адресов\", function () {\r",
                      "    pm.expect(jsonData).to.be.an(\"array\");\r",
                      "\r",
                      "    jsonData.forEach((addr, index) => {\r",
                      "        try {\r",
                      "            pm.expect(addr).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(addr).to.have.property(\"address\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"city\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"country\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "            pm.expect(addr).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"zip\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"state\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "\r",
                      "        } catch (e) {\r",
                      "            console.error(`❌ Ошибка в объекте адреса [${index}]: ${e.message}`);\r",
                      "            console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(addr, null, 2));\r",
                      "            throw e; // чтобы тест действительно упал\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0d0a6e50-576a-4f84-adc7-b3b05db7a2eb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/addresses",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0d0a6e50-576a-4f84-adc7-b3b05db7a2eb"
            },
            {
              "name": "1.2 get a single address of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта Address\", function () {\r",
                      "    let item = jsonData;\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"address\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"city\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"country\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(item).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"zip\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"state\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ffa1920c-1287-4077-abd0-435024e5aaf1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/addresses/{{address_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses",
                    "{{address_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ffa1920c-1287-4077-abd0-435024e5aaf1"
            }
          ],
          "id": "e568b42c-85ac-4ad4-a18e-622b430d9d2b",
          "uid": "32335283-e568b42c-85ac-4ad4-a18e-622b430d9d2b"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "1.4 Update an address of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта Address\", function () {\r",
                      "    let item = jsonData;\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"address\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"city\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"country\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(item).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"zip\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"state\").that.satisfy(v => v === null || typeof v === \"string\");\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3707f0ee-1f10-4f5f-888b-a7647e564b35",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"address\": \"Большой Спасоглинищевский пер., {{$randomInt}}, Москва, 101000\",\r\n    \"city\": \"Казань\",\r\n    \"country\": \"RU\",\r\n    \"integration\": false,\r\n    \"label\": \"street\",\r\n    \"state\": null,\r\n    \"zip\": \"101001\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations/4/addresses/{{address_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses",
                    "{{address_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3707f0ee-1f10-4f5f-888b-a7647e564b35"
            }
          ],
          "id": "5241d080-7e68-46b3-8c9a-a6648d8f7de5",
          "uid": "32335283-5241d080-7e68-46b3-8c9a-a6648d8f7de5"
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "1.5 Remove an address from an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "    console.log(\"Статус код ответа: 204 - No Content\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "01bb9f64-0f17-4059-8d99-7027b316926f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/addresses/{{address_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses",
                    "{{address_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-01bb9f64-0f17-4059-8d99-7027b316926f"
            },
            {
              "name": "1.6 get a single address of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "    console.log(\"Статус код ответа: 404 - Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "cd0c4868-f74c-4c19-9cea-dd5fbd0dc610",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/addresses/{{address_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "addresses",
                    "{{address_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-cd0c4868-f74c-4c19-9cea-dd5fbd0dc610"
            }
          ],
          "id": "43bace19-0884-4309-932e-9e7ff6d13157",
          "uid": "32335283-43bace19-0884-4309-932e-9e7ff6d13157"
        }
      ],
      "id": "9df4764d-3f78-4912-bbd5-f30079c11ecb",
      "uid": "32335283-9df4764d-3f78-4912-bbd5-f30079c11ecb"
    },
    {
      "name": "Contacts",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List all contacts of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "let jsonData = pm.response.json();\r",
                      "let contact = jsonData[0];\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(contact, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта Contact\", function () {\r",
                      "    try {\r",
                      "        pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Поля, которые могут быть, но не обязательны (одно из них точно будет)\r",
                      "        const optionalFields = [\"telephone\", \"email\", \"website\"];\r",
                      "        const hasAtLeastOne = optionalFields.some(field => field in contact);\r",
                      "        pm.expect(hasAtLeastOne, \"Ожидался хотя бы один из полей: telephone, email, website\").to.be.true;\r",
                      "\r",
                      "        if (\"telephone\" in contact) {\r",
                      "            pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"email\" in contact) {\r",
                      "            pm.expect(contact.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"website\" in contact) {\r",
                      "            pm.expect(contact.website).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(contact, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "45162683-7a9e-4119-950d-d38a65453ddd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/contacts",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-45162683-7a9e-4119-950d-d38a65453ddd"
            },
            {
              "name": "1.2 Get a single contact of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "\r",
                      "let contact = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(contact, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры одиночного объекта Contact\", function () {\r",
                      "    try {\r",
                      "        pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        const optionalFields = [\"telephone\", \"email\", \"website\"];\r",
                      "        const hasAtLeastOne = optionalFields.some(field => field in contact);\r",
                      "        pm.expect(hasAtLeastOne, \"Ожидался хотя бы один из полей: telephone, email, website\").to.be.true;\r",
                      "\r",
                      "        if (\"telephone\" in contact) {\r",
                      "            pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"email\" in contact) {\r",
                      "            pm.expect(contact.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"website\" in contact) {\r",
                      "            pm.expect(contact.website).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(contact, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ad53cd34-3ab8-425f-95e0-91065eddfe49",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/contacts/86",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts",
                    "86"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ad53cd34-3ab8-425f-95e0-91065eddfe49"
            }
          ],
          "id": "d629f6af-86cf-49a3-99cf-4d29b49a01e3",
          "uid": "32335283-d629f6af-86cf-49a3-99cf-4d29b49a01e3"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "1.3 Add a contact to an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "let contact = pm.response.json();\r",
                      "pm.environment.set(\"contact_id\", contact.id);\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(contact, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры одиночного объекта Contact\", function () {\r",
                      "    try {\r",
                      "        pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        const optionalFields = [\"telephone\", \"email\", \"website\"];\r",
                      "        const hasAtLeastOne = optionalFields.some(field => field in contact);\r",
                      "        pm.expect(hasAtLeastOne, \"Ожидался хотя бы один из полей: telephone, email, website\").to.be.true;\r",
                      "\r",
                      "        if (\"telephone\" in contact) {\r",
                      "            pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"email\" in contact) {\r",
                      "            pm.expect(contact.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"website\" in contact) {\r",
                      "            pm.expect(contact.website).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(contact, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c7f3af3e-d3ba-408a-9960-845a9c3448a7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"general\",\r\n    \"telephone\": \"+7 (495) 624-25-25\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations/4/contacts",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c7f3af3e-d3ba-408a-9960-845a9c3448a7"
            }
          ],
          "id": "392dffdc-ab13-4612-b41f-c566185756ce",
          "uid": "32335283-392dffdc-ab13-4612-b41f-c566185756ce"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "1.4 Update a contact of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});\r",
                      "let contact = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(contact, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры одиночного объекта Contact\", function () {\r",
                      "    try {\r",
                      "        pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        const optionalFields = [\"telephone\", \"email\", \"website\"];\r",
                      "        const hasAtLeastOne = optionalFields.some(field => field in contact);\r",
                      "        pm.expect(hasAtLeastOne, \"Ожидался хотя бы один из полей: telephone, email, website\").to.be.true;\r",
                      "\r",
                      "        if (\"telephone\" in contact) {\r",
                      "            pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"email\" in contact) {\r",
                      "            pm.expect(contact.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        if (\"website\" in contact) {\r",
                      "            pm.expect(contact.website).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // nodeID больше не проверяем\r",
                      "    } catch (e) {\r",
                      "        console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(contact, null, 2));\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f6efdc91-98ab-4ceb-9eaf-57d21c33c396",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"service_desk\",\r\n    \"telephone\": \"+7 (903) 624-25-26\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}organizations/4/contacts/86",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts",
                    "86"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f6efdc91-98ab-4ceb-9eaf-57d21c33c396"
            }
          ],
          "id": "748db864-f784-4cd4-a159-7426d3e1903d",
          "uid": "32335283-748db864-f784-4cd4-a159-7426d3e1903d"
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "1.5 Remove a contact from an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "    console.log(\"Статус код ответа: 204 - No Content\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "05764f20-aa30-4639-a0a6-f4c727411c48",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/contacts/{{contact_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts",
                    "{{contact_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-05764f20-aa30-4639-a0a6-f4c727411c48"
            },
            {
              "name": "1.6 get a contact from an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "    console.log(\"Статус код ответа: 404 - Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "484a6386-c845-4dca-8fad-d4d002535e76",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/contacts/{{contact_id}}",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "contacts",
                    "{{contact_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-484a6386-c845-4dca-8fad-d4d002535e76"
            }
          ],
          "id": "29b1b019-1326-461e-89d6-b235cc402b53",
          "uid": "32335283-29b1b019-1326-461e-89d6-b235cc402b53"
        }
      ],
      "id": "06650581-fd01-44b7-b177-74f07a428d4a",
      "uid": "32335283-06650581-fd01-44b7-b177-74f07a428d4a"
    },
    {
      "name": "Contracts",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List all contracts of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let contracts = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(contracts, null, 2));\r",
                      "\r",
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Массив SupportContract содержит хотя бы один элемент\", () => {\r",
                      "    pm.expect(contracts).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "if (contracts.length > 0) {\r",
                      "    let contract = contracts[0];\r",
                      "\r",
                      "    pm.test(\"Проверка полей первого SupportContract\", () => {\r",
                      "        try {\r",
                      "            pm.expect(contract).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            // sourceID пропускаем\r",
                      "            pm.expect(contract).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(contract).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "            pm.expect(contract).to.have.property(\"category\").that.is.a(\"string\");\r",
                      "            pm.expect(contract).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(contract).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "            pm.expect(contract).to.have.property(\"supplier\").that.is.an(\"object\");\r",
                      "            let supplier = contract.supplier;\r",
                      "            pm.expect(supplier).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(supplier).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            // nodeID пропускаем\r",
                      "\r",
                      "        } catch (e) {\r",
                      "            console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "            console.log(\"Данные, вызвавшие ошибку:\", JSON.stringify(contract, null, 2));\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "13584419-4910-4f5b-ad22-892ab334fc65",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/119/contracts",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "119",
                    "contracts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-13584419-4910-4f5b-ad22-892ab334fc65"
            }
          ],
          "id": "4367f911-40e3-47d4-9939-b632e279dfbd",
          "uid": "32335283-4367f911-40e3-47d4-9939-b632e279dfbd"
        }
      ],
      "id": "48a8f817-a19a-477a-bdc8-30af1eeebc25",
      "uid": "32335283-48a8f817-a19a-477a-bdc8-30af1eeebc25"
    },
    {
      "name": "Organizations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List organizations of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "\r",
                      "    const response = pm.response.json(); // Correctly assign the response here\r",
                      "\r",
                      "    // Test to check that the response contains an array of objects\r",
                      "    pm.test(\"Response contains an array of objects\", function () {\r",
                      "        pm.expect(Array.isArray(response)).to.be.true;\r",
                      "        pm.expect(response.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // Test to check required fields of the first object\r",
                      "    pm.test(\"Check required fields of the first object\", function () {\r",
                      "        const item = response[0];\r",
                      "\r",
                      "        pm.expect(item).to.have.property('id');\r",
                      "        pm.expect(typeof item.id).to.equal('number');\r",
                      "\r",
                      "        pm.expect(item).to.have.property('name');\r",
                      "        pm.expect(typeof item.name).to.equal('string');\r",
                      "\r",
                      "        pm.expect(item).to.have.property('parent');\r",
                      "        pm.expect(item.parent).to.have.property('id');\r",
                      "        pm.expect(item.parent).to.have.property('name');\r",
                      "        pm.expect(item.parent).to.have.property('account');\r",
                      "        pm.expect(item.parent.account).to.have.property('id');\r",
                      "        pm.expect(item.parent.account).to.have.property('name');\r",
                      "\r",
                      "        pm.expect(item).to.have.property('account');\r",
                      "        pm.expect(item.account).to.have.property('id');\r",
                      "        pm.expect(item.account).to.have.property('name');\r",
                      "\r",
                      "        pm.expect(item).to.have.property('nodeID');\r",
                      "        pm.expect(typeof item.nodeID).to.equal('string');\r",
                      "\r",
                      "        // Check optional fields\r",
                      "        if (item.hasOwnProperty('disabled')) {\r",
                      "            pm.expect(typeof item.disabled).to.equal('boolean');\r",
                      "        }\r",
                      "\r",
                      "        if (item.manager !== null) {\r",
                      "            pm.expect(item.manager).to.have.property('id');\r",
                      "            pm.expect(item.manager).to.have.property('name');\r",
                      "            pm.expect(item.manager).to.have.property('account');\r",
                      "            pm.expect(item.manager.account).to.have.property('id');\r",
                      "            pm.expect(item.manager.account).to.have.property('name');\r",
                      "        }\r",
                      "\r",
                      "        pm.expect(item).to.have.property('created_at');\r",
                      "        pm.expect(typeof item.created_at).to.equal('string');\r",
                      "\r",
                      "        pm.expect(item).to.have.property('updated_at');\r",
                      "        pm.expect(typeof item.updated_at).to.equal('string');\r",
                      "    });\r",
                      "\r",
                      "    // Test to check that all objects have the same structure\r",
                      "    pm.test(\"Check that all objects have the same structure\", function () {\r",
                      "        response.forEach(item => {\r",
                      "            pm.expect(item).to.have.property('id');\r",
                      "            pm.expect(item).to.have.property('name');\r",
                      "            pm.expect(item).to.have.property('parent');\r",
                      "            pm.expect(item.parent).to.have.property('id');\r",
                      "            pm.expect(item.parent).to.have.property('name');\r",
                      "            pm.expect(item.parent).to.have.property('account');\r",
                      "            pm.expect(item.parent.account).to.have.property('id');\r",
                      "            pm.expect(item.parent.account).to.have.property('name');\r",
                      "            pm.expect(item).to.have.property('account');\r",
                      "            pm.expect(item.account).to.have.property('id');\r",
                      "            pm.expect(item.account).to.have.property('name');\r",
                      "            pm.expect(item).to.have.property('nodeID');\r",
                      "            pm.expect(item).to.have.property('created_at');\r",
                      "            pm.expect(item).to.have.property('updated_at');\r",
                      "        });\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "44685900-7ff9-4493-a895-a18fb82116a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/children",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "children"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-44685900-7ff9-4493-a895-a18fb82116a9"
            }
          ],
          "id": "5f387fe0-afa3-4c92-b3e6-a512dd638d7c",
          "uid": "32335283-5f387fe0-afa3-4c92-b3e6-a512dd638d7c"
        }
      ],
      "id": "ad132267-ace0-42db-ad4c-c17300034771",
      "uid": "32335283-ad132267-ace0-42db-ad4c-c17300034771"
    },
    {
      "name": "People",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List people of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let persons = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(persons, null, 2));\r",
                      "\r",
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Массив Person содержит хотя бы один элемент\", () => {\r",
                      "    pm.expect(persons).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "if (persons.length > 0) {\r",
                      "    let person = persons[0];\r",
                      "    \r",
                      "    pm.test(\"Проверка полей первого Person\", () => {\r",
                      "        try {\r",
                      "            pm.expect(person).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            // sourceID пропускаем\r",
                      "            pm.expect(person).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(person).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            \r",
                      "            pm.expect(person).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "            let org = person.organization;\r",
                      "            pm.expect(org).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(org).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            \r",
                      "            pm.expect(org).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            let account = org.account;\r",
                      "            pm.expect(account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            \r",
                      "            pm.expect(person).to.have.property(\"site\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                      "            pm.expect(person).to.have.property(\"manager\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                      "            \r",
                      "            pm.expect(person).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(person).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(person).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "            // nodeID пропускаем\r",
                      "            \r",
                      "        } catch (e) {\r",
                      "            console.error(\"❌ Ошибка валидации: \" + e.message);\r",
                      "            console.log(\"Данные, вызвавшие ошибку:\", JSON.stringify(person, null, 2));\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e596c055-6bad-4715-9b8a-35c8c1bc8de8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/people",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e596c055-6bad-4715-9b8a-35c8c1bc8de8"
            }
          ],
          "id": "7ce7a8a5-0bb0-4ffa-a1f8-17c852737cac",
          "uid": "32335283-7ce7a8a5-0bb0-4ffa-a1f8-17c852737cac"
        }
      ],
      "id": "1f5783b3-e8c1-436c-80d7-a6a709fe9405",
      "uid": "32335283-1f5783b3-e8c1-436c-80d7-a6a709fe9405"
    },
    {
      "name": "Risks",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List risks of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.test(\"Response is an array\", function () {\r",
                      "        const response = pm.response.json();\r",
                      "        const isArray = Array.isArray(response);\r",
                      "        if (!isArray) {\r",
                      "            console.error(\"ОШИБКА: Ответ не является массивом\");\r",
                      "        }\r",
                      "        pm.expect(isArray).to.be.true;\r",
                      "    });\r",
                      "\r",
                      "    const response = pm.response.json();\r",
                      "\r",
                      "    // Проверяем, что массив не пустой\r",
                      "    pm.test(\"Response is not empty\", function () {\r",
                      "        const isEmpty = response.length === 0;\r",
                      "        if (isEmpty) {\r",
                      "            console.error(\"ОШИБКА: Получен пустой массив в ответе\");\r",
                      "        }\r",
                      "        pm.expect(response).to.not.be.empty;\r",
                      "    });\r",
                      "\r",
                      "    if (response.length > 0) {\r",
                      "        const item = response[0];\r",
                      "        const itemPrefix = \"Первый элемент\";\r",
                      "\r",
                      "        // Проверка обязательных полей\r",
                      "        pm.test(`${itemPrefix} has required properties`, function () {\r",
                      "            try {\r",
                      "                pm.expect(item).to.include.keys(\r",
                      "                    'id', 'sourceID', 'subject', 'severity', 'status',\r",
                      "                    'mitigation_target_at', 'closed_at', 'closure_reason',\r",
                      "                    'created_at', 'updated_at', 'account', 'nodeID'\r",
                      "                );\r",
                      "                console.log(`${itemPrefix}: Все обязательные поля присутствуют`);\r",
                      "            } catch (e) {\r",
                      "                console.error(`ОШИБКА: ${itemPrefix} отсутствуют обязательные поля:`, e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "\r",
                      "        // Проверка типов полей\r",
                      "        pm.test(`${itemPrefix} id has correct type`, function () {\r",
                      "            pm.expect(item.id).to.be.a('number');\r",
                      "            console.log(`${itemPrefix}: Поле id имеет корректный тип (number)`);\r",
                      "        });\r",
                      "\r",
                      "        pm.test(`${itemPrefix} subject has correct type`, function () {\r",
                      "            pm.expect(item.subject).to.be.a('string');\r",
                      "            console.log(`${itemPrefix}: Поле subject имеет корректный тип (string)`);\r",
                      "        });\r",
                      "\r",
                      "        pm.test(`${itemPrefix} severity has correct type`, function () {\r",
                      "            pm.expect(item.severity).to.be.a('string');\r",
                      "            console.log(`${itemPrefix}: Поле severity имеет корректный тип (string)`);\r",
                      "        });\r",
                      "\r",
                      "        pm.test(`${itemPrefix} status has correct type`, function () {\r",
                      "            pm.expect(item.status).to.be.a('string');\r",
                      "            console.log(`${itemPrefix}: Поле status имеет корректный тип (string)`);\r",
                      "        });\r",
                      "\r",
                      "        ['created_at', 'updated_at'].forEach(field => {\r",
                      "            pm.test(`${itemPrefix} ${field} has correct format`, function () {\r",
                      "                try {\r",
                      "                    pm.expect(item[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}([+-]\\d{2}:\\d{2})$/);\r",
                      "                    console.log(`${itemPrefix}: Поле ${field} имеет корректный формат даты`);\r",
                      "                } catch (e) {\r",
                      "                    console.error(`ОШИБКА: ${itemPrefix} поле ${field} имеет некорректный формат даты:`, e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        });\r",
                      "\r",
                      "        // Проверка account\r",
                      "        pm.test(`${itemPrefix} account has correct structure`, function () {\r",
                      "            try {\r",
                      "                pm.expect(item.account).to.be.an('object');\r",
                      "                pm.expect(item.account).to.include.keys('id', 'name');\r",
                      "                pm.expect(item.account.id).to.be.a('string');\r",
                      "                pm.expect(item.account.name).to.be.a('string');\r",
                      "                console.log(`${itemPrefix}: Поле account имеет корректную структуру`);\r",
                      "            } catch (e) {\r",
                      "                console.error(`ОШИБКА: ${itemPrefix} структура поля account некорректна:`, e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "\r",
                      "        pm.test(`${itemPrefix} nodeID has correct type`, function () {\r",
                      "            pm.expect(item.nodeID).to.be.a('string');\r",
                      "            console.log(`${itemPrefix}: Поле nodeID имеет корректный тип (string)`);\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.error(\"ПРЕДУПРЕЖДЕНИЕ: Массив пуст, проверка элементов невозможна\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "9430c33f-6f3e-47eb-b8f2-b14c5789ed59",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/risks",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "risks"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-9430c33f-6f3e-47eb-b8f2-b14c5789ed59"
            }
          ],
          "id": "1dd34fd9-c30d-476d-95f0-6ae83f875e63",
          "uid": "32335283-1dd34fd9-c30d-476d-95f0-6ae83f875e63"
        }
      ],
      "id": "48c8c34d-ac21-41c4-8e7b-89a0eaec8aaf",
      "uid": "32335283-48c8c34d-ac21-41c4-8e7b-89a0eaec8aaf"
    },
    {
      "name": "Service Level Agreements",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "1.1 List service level agreements of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Структура: массив соглашений, только первый объект\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ сервера:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "\r",
                      "    const item = jsonData[0];\r",
                      "    console.log(\"Первый объект:\", item);\r",
                      "\r",
                      "    pm.expect(item).to.have.all.keys(\r",
                      "        \"id\",\r",
                      "        \"sourceID\",\r",
                      "        \"name\",\r",
                      "        \"status\",\r",
                      "        \"created_at\",\r",
                      "        \"updated_at\",\r",
                      "        \"service_offering\",\r",
                      "        \"nodeID\"\r",
                      "    );\r",
                      "\r",
                      "    pm.expect(item.id).to.be.a(\"number\");\r",
                      "    pm.expect(item.sourceID).to.satisfy(v => v === null || typeof v === \"string\");\r",
                      "    pm.expect(item.name).to.be.a(\"string\");\r",
                      "    pm.expect(item.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
                      "    pm.expect(item.created_at).to.be.a(\"string\");\r",
                      "    pm.expect(item.updated_at).to.be.a(\"string\");\r",
                      "    pm.expect(item.nodeID).to.be.a(\"string\");\r",
                      "\r",
                      "    // Проверка service_offering\r",
                      "    const offering = item.service_offering;\r",
                      "    pm.expect(offering).to.be.an(\"object\").that.has.all.keys(\"id\", \"name\", \"service\", \"nodeID\");\r",
                      "\r",
                      "    pm.expect(offering.id).to.be.a(\"number\");\r",
                      "    pm.expect(offering.name).to.be.a(\"string\");\r",
                      "    pm.expect(offering.nodeID).to.be.a(\"string\");\r",
                      "\r",
                      "    // Проверка вложенного service\r",
                      "    const service = offering.service;\r",
                      "    pm.expect(service).to.be.an(\"object\").that.has.all.keys(\"id\", \"name\", \"localized_name\", \"nodeID\", \"provider\");\r",
                      "\r",
                      "    pm.expect(service.id).to.be.a(\"number\");\r",
                      "    pm.expect(service.name).to.be.a(\"string\");\r",
                      "    pm.expect(service.localized_name).to.be.a(\"string\");\r",
                      "    pm.expect(service.nodeID).to.be.a(\"string\");\r",
                      "\r",
                      "    // Проверка вложенного provider\r",
                      "    const provider = service.provider;\r",
                      "    pm.expect(provider).to.be.an(\"object\").that.has.all.keys(\"id\", \"name\", \"account\", \"nodeID\");\r",
                      "\r",
                      "    pm.expect(provider.id).to.be.a(\"number\");\r",
                      "    pm.expect(provider.name).to.be.a(\"string\");\r",
                      "    pm.expect(provider.nodeID).to.be.a(\"string\");\r",
                      "\r",
                      "    // Проверка вложенного account\r",
                      "    const account = provider.account;\r",
                      "    pm.expect(account).to.be.an(\"object\").that.has.all.keys(\"id\", \"name\");\r",
                      "\r",
                      "    pm.expect(account.id).to.be.a(\"string\");\r",
                      "    pm.expect(account.name).to.be.a(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "953b4045-9b20-45a7-ac48-3697ea2d65db",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/slas",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "slas"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-953b4045-9b20-45a7-ac48-3697ea2d65db"
            }
          ],
          "id": "bce3b6b7-3a68-452e-9d49-9858dc07a12e",
          "uid": "32335283-bce3b6b7-3a68-452e-9d49-9858dc07a12e"
        }
      ],
      "id": "b1dda6cf-f0df-452f-85bc-6006db650e47",
      "uid": "32335283-b1dda6cf-f0df-452f-85bc-6006db650e47"
    },
    {
      "name": "Time Allocations",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "1.1 Add a time allocation to an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "dd9585d9-f4b2-46a2-a030-9dd17256cb6a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/time_allocations/17",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "time_allocations",
                    "17"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-dd9585d9-f4b2-46a2-a030-9dd17256cb6a"
            }
          ],
          "id": "716f7f49-a1df-4c5e-a175-a96bc05e9656",
          "uid": "32335283-716f7f49-a1df-4c5e-a175-a96bc05e9656"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "1.2 List all time allocations of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "\r",
                      "    pm.test(\"Ответ — массив\", function () {\r",
                      "        pm.expect(pm.response.json()).to.be.an(\"array\").that.is.not.empty;\r",
                      "    });\r",
                      "\r",
                      "    const first = pm.response.json()[0];\r",
                      "\r",
                      "    pm.test(\"Поля первого объекта корректны\", function () {\r",
                      "        pm.expect(first).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(first).to.have.property(\"sourceID\");\r",
                      "        pm.expect(first.sourceID === null || typeof first.sourceID === \"string\").to.be.true;\r",
                      "\r",
                      "        pm.expect(first).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"group\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(first).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(first).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "43f74134-8dd3-4827-a44e-ba0b60773d69",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/time_allocations",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "time_allocations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-43f74134-8dd3-4827-a44e-ba0b60773d69"
            }
          ],
          "id": "50c6fb6b-5d3f-4ab7-96ad-9324eae3715e",
          "uid": "32335283-50c6fb6b-5d3f-4ab7-96ad-9324eae3715e"
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "1.3 Remove a time allocation from an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "    console.log(\"Статус код ответа: 204 - No Content\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "9862256a-6b9d-4c2e-88df-0cc9b59c6e10",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/time_allocations/17",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "time_allocations",
                    "17"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-9862256a-6b9d-4c2e-88df-0cc9b59c6e10"
            },
            {
              "name": "1.4 get a single time allocations of an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "    console.log(\"Статус код ответа: 404 - Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7cc5c480-05f0-49f8-a53c-8137efd3f523",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}organizations/4/time_allocations/17",
                  "host": [
                    "{{url}}organizations"
                  ],
                  "path": [
                    "4",
                    "time_allocations",
                    "17"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7cc5c480-05f0-49f8-a53c-8137efd3f523"
            }
          ],
          "id": "d98e7b31-db79-449b-82c0-b6035a72b57e",
          "uid": "32335283-d98e7b31-db79-449b-82c0-b6035a72b57e"
        }
      ],
      "id": "02877321-009a-4146-80cd-aee39ec6a5e6",
      "uid": "32335283-02877321-009a-4146-80cd-aee39ec6a5e6"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "bfa73d7d-40a1-4485-9573-f980d8ee067f",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "f0b818a7-f860-4713-9103-8dcfeb6b88c4",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}