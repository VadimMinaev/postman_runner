{
  "info": {
    "_postman_id": "3d7eb3b6-10e6-4ede-b4db-3f1332639059",
    "name": "13. Service Level Agreements",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T11:32:45.000Z",
    "createdAt": "2025-07-21T07:43:30.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-3d7eb3b6-10e6-4ede-b4db-3f1332639059"
  },
  "item": [
    {
      "name": "SLAs",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service level agreements",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "  if (nullable && field === null) return;\r",
                      "  if (!nullable && field === null) {\r",
                      "    errors.push(`Поле не может быть null`);\r",
                      "    return;\r",
                      "  }\r",
                      "\r",
                      "  const actualType = typeof field;\r",
                      "  if (expectedType === 'array') {\r",
                      "    if (!Array.isArray(field)) {\r",
                      "      errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "    }\r",
                      "  } else if (actualType !== expectedType) {\r",
                      "    errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "  }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "checkField(item.name, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// service_offering\r",
                      "if (item.service_offering) {\r",
                      "  checkField(item.service_offering.id, \"number\");\r",
                      "  checkField(item.service_offering.name, \"string\");\r",
                      "  checkField(item.service_offering.nodeID, \"string\");\r",
                      "\r",
                      "  const service = item.service_offering.service;\r",
                      "  if (service) {\r",
                      "    checkField(service.id, \"number\");\r",
                      "    checkField(service.name, \"string\");\r",
                      "    checkField(service.localized_name, \"string\");\r",
                      "    checkField(service.nodeID, \"string\");\r",
                      "\r",
                      "    const provider = service.provider;\r",
                      "    if (provider) {\r",
                      "      checkField(provider.id, \"number\");\r",
                      "      checkField(provider.name, \"string\");\r",
                      "      checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "      const account = provider.account;\r",
                      "      if (account) {\r",
                      "        checkField(account.id, \"string\");\r",
                      "        checkField(account.name, \"string\");\r",
                      "      }\r",
                      "    }\r",
                      "  }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "  console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "  console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "356fb2d5-5505-4967-bb9a-e552686f8a89",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas",
                  "host": [
                    "{{url}}slas"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-356fb2d5-5505-4967-bb9a-e552686f8a89"
            },
            {
              "name": "Predefined Filters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Все объекты имеют status=expired\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    let allExpired = true;\r",
                      "\r",
                      "    jsonData.forEach(function(item) {\r",
                      "        // Проверка: свойство status отсутствует или не равно expired\r",
                      "        if (!item.hasOwnProperty('status') || item.status !== 'expired') {\r",
                      "            console.log(\r",
                      "                'В ответе есть slas, у которой отсутствует свойство status или оно не равно expired, id slas: ' \r",
                      "                + (item.id !== undefined ? item.id : 'id отсутствует')\r",
                      "            );\r",
                      "            allExpired = false; // Set flag to false if any status is not 'expired'\r",
                      "        }\r",
                      "    });\r",
                      "    \r",
                      "    pm.expect(allExpired, \"Не все объекты имеют статус 'expired'\").to.be.true; // Final assertion\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7fb12e07-d9cd-4397-88a5-abbcc8dd71d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/inactive",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "inactive"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7fb12e07-d9cd-4397-88a5-abbcc8dd71d7"
            },
            {
              "name": "Get a single service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры SLA-объекта\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    function expectStringOrNull(value, fieldName) {\r",
                      "        pm.expect(value === null || typeof value === \"string\", `${fieldName} должно быть string или null`).to.be.true;\r",
                      "    }\r",
                      "\r",
                      "    try {\r",
                      "        const item = jsonData;\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"start_date\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        expectStringOrNull(item.coverage, \"coverage\");\r",
                      "        pm.expect(item).to.have.property(\"use_knowledge_from_service_provider\").that.is.a(\"boolean\");\r",
                      "\r",
                      "        expectStringOrNull(item.activityID_case, \"activityID_case\");\r",
                      "        expectStringOrNull(item.activityID_high, \"activityID_high\");\r",
                      "        expectStringOrNull(item.activityID_low, \"activityID_low\");\r",
                      "        expectStringOrNull(item.activityID_medium, \"activityID_medium\");\r",
                      "        expectStringOrNull(item.activityID_rfc, \"activityID_rfc\");\r",
                      "        expectStringOrNull(item.activityID_rfi, \"activityID_rfi\");\r",
                      "        expectStringOrNull(item.activityID_top, \"activityID_top\");\r",
                      "        expectStringOrNull(item.agreementID, \"agreementID\");\r",
                      "        expectStringOrNull(item.notice_date, \"notice_date\");\r",
                      "        expectStringOrNull(item.remarks, \"remarks\");\r",
                      "        expectStringOrNull(item.sourceID, \"sourceID\");\r",
                      "        expectStringOrNull(item.expiry_date, \"expiry_date\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_rep\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_level_manager\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_offering\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "\r",
                      "        const service = item.service_offering.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e1f8a01d-a3fa-45b6-85f9-3cd9b6369fb4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e1f8a01d-a3fa-45b6-85f9-3cd9b6369fb4"
            }
          ],
          "id": "e09897f5-0d01-499c-a82b-fc8d9655c520",
          "uid": "32335283-e09897f5-0d01-499c-a82b-fc8d9655c520"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"sla_id\", pm.response.json().id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры SLA-объекта\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    function expectStringOrNull(value, fieldName) {\r",
                      "        pm.expect(value === null || typeof value === \"string\", `${fieldName} должно быть string или null`).to.be.true;\r",
                      "    }\r",
                      "\r",
                      "    try {\r",
                      "        const item = jsonData;\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"start_date\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        expectStringOrNull(item.coverage, \"coverage\");\r",
                      "        pm.expect(item).to.have.property(\"use_knowledge_from_service_provider\").that.is.a(\"boolean\");\r",
                      "\r",
                      "        expectStringOrNull(item.activityID_case, \"activityID_case\");\r",
                      "        expectStringOrNull(item.activityID_high, \"activityID_high\");\r",
                      "        expectStringOrNull(item.activityID_low, \"activityID_low\");\r",
                      "        expectStringOrNull(item.activityID_medium, \"activityID_medium\");\r",
                      "        expectStringOrNull(item.activityID_rfc, \"activityID_rfc\");\r",
                      "        expectStringOrNull(item.activityID_rfi, \"activityID_rfi\");\r",
                      "        expectStringOrNull(item.activityID_top, \"activityID_top\");\r",
                      "        expectStringOrNull(item.agreementID, \"agreementID\");\r",
                      "        expectStringOrNull(item.notice_date, \"notice_date\");\r",
                      "        expectStringOrNull(item.remarks, \"remarks\");\r",
                      "        expectStringOrNull(item.sourceID, \"sourceID\");\r",
                      "        expectStringOrNull(item.expiry_date, \"expiry_date\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_rep\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_level_manager\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_offering\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "\r",
                      "        const service = item.service_offering.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "968a0afb-4ea0-4745-8315-39e1c0cb4aef",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"customer_id\": 18,\r\n    \"customer_rep_id\": 1003,\r\n    \"name\": \"База данных Microsoft SQL Server премиум-класса для производственного экземпляра ЦОД для отслеживания продаж {{$randomInt}}\",\r\n    \"service_instance_id\": 140,\r\n    \"service_level_manager_id\": 581,\r\n    \"service_offering_id\": 113,\r\n    \"start_date\": \"2024-05-15\",\r\n    \"status\": \"active\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas",
                  "host": [
                    "{{url}}slas"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-968a0afb-4ea0-4745-8315-39e1c0cb4aef"
            }
          ],
          "id": "bb67eba1-48a4-4c47-98cb-0e2f73beab1e",
          "uid": "32335283-bb67eba1-48a4-4c47-98cb-0e2f73beab1e"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры SLA-объекта\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    function expectStringOrNull(value, fieldName) {\r",
                      "        pm.expect(value === null || typeof value === \"string\", `${fieldName} должно быть string или null`).to.be.true;\r",
                      "    }\r",
                      "\r",
                      "    try {\r",
                      "        const item = jsonData;\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(item.status, 'status').to.eq(\"expired\");\r",
                      "        pm.expect(item).to.have.property(\"start_date\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        expectStringOrNull(item.coverage, \"coverage\");\r",
                      "        pm.expect(item).to.have.property(\"use_knowledge_from_service_provider\").that.is.a(\"boolean\");\r",
                      "\r",
                      "        expectStringOrNull(item.activityID_case, \"activityID_case\");\r",
                      "        expectStringOrNull(item.activityID_high, \"activityID_high\");\r",
                      "        expectStringOrNull(item.activityID_low, \"activityID_low\");\r",
                      "        expectStringOrNull(item.activityID_medium, \"activityID_medium\");\r",
                      "        expectStringOrNull(item.activityID_rfc, \"activityID_rfc\");\r",
                      "        expectStringOrNull(item.activityID_rfi, \"activityID_rfi\");\r",
                      "        expectStringOrNull(item.activityID_top, \"activityID_top\");\r",
                      "        expectStringOrNull(item.agreementID, \"agreementID\");\r",
                      "        expectStringOrNull(item.notice_date, \"notice_date\");\r",
                      "        expectStringOrNull(item.remarks, \"remarks\");\r",
                      "        expectStringOrNull(item.sourceID, \"sourceID\");\r",
                      "        expectStringOrNull(item.expiry_date, \"expiry_date\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_rep\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_level_manager\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_offering\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "\r",
                      "        const service = item.service_offering.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "973fe5be-5695-478f-a3cc-575c0234636d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": \"expired\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/{{sla_id}}",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "{{sla_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-973fe5be-5695-478f-a3cc-575c0234636d"
            }
          ],
          "id": "f50cecf3-3ce4-43ed-a6a2-be102d7a7ecc",
          "uid": "32335283-f50cecf3-3ce4-43ed-a6a2-be102d7a7ecc"
        }
      ],
      "id": "ab9ca352-eb6e-43df-96cf-bf77542a0b6e",
      "uid": "32335283-ab9ca352-eb6e-43df-96cf-bf77542a0b6e"
    },
    {
      "name": "Customer Representatives",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all customer representatives of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Проверка структуры объекта пользователя\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const item = jsonData[0];\r",
                      "\r",
                      "    function expectStringOrNull(value, fieldName) {\r",
                      "        pm.expect(value === null || typeof value === \"string\", `${fieldName} должно быть string или null`).to.be.true;\r",
                      "    }\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        expectStringOrNull(item.sourceID, \"sourceID\");\r",
                      "        pm.expect(item).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        pm.expect(item.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.organization).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"site\").that.is.an(\"object\");\r",
                      "        pm.expect(item.site).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.site).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.site).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.site.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.site.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.site).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        expectStringOrNull(item.manager, \"manager\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1cddb57b-cb80-4e9e-8a57-b6c07070a9a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1cddb57b-cb80-4e9e-8a57-b6c07070a9a9"
            }
          ],
          "id": "3c2dbb6a-5c62-42f7-af38-dbef297f453d",
          "uid": "32335283-3c2dbb6a-5c62-42f7-af38-dbef297f453d"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a customer representative to a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "247eacf0-d049-4aca-8b6b-065ad5c2d90a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives/711",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives",
                    "711"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-247eacf0-d049-4aca-8b6b-065ad5c2d90a"
            },
            {
              "name": "Check \"Add a customer representative to a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// Проверяем, что в ответе есть объект с id 711\r",
                      "pm.test(`Проверить наличие объекта с id: 711 в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 711; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "37c245a6-b349-4879-aef8-2566ae3ea6c4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-37c245a6-b349-4879-aef8-2566ae3ea6c4"
            }
          ],
          "id": "cf5b8974-c552-495b-9c67-ca13295f7e72",
          "uid": "32335283-cf5b8974-c552-495b-9c67-ca13295f7e72"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a customer representative from a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6c9abb6d-38f6-472b-9d0c-70c594294f48",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives/711",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives",
                    "711"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6c9abb6d-38f6-472b-9d0c-70c594294f48"
            },
            {
              "name": "Check \"Remove a customer representative from a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// Проверяем, что в ответе нет объекта с id 711 после его удаления\r",
                      "pm.test(`Проверить наличие объекта с id: 711 в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 711; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.not.exist;\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a82bba15-c502-4c89-adb1-1e168435a896",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a82bba15-c502-4c89-adb1-1e168435a896"
            }
          ],
          "id": "0c1a267e-5c81-49a7-8184-d84482d564d8",
          "uid": "32335283-0c1a267e-5c81-49a7-8184-d84482d564d8"
        }
      ],
      "id": "6a589a05-293b-46b1-b314-e45cf0903a78",
      "uid": "32335283-6a589a05-293b-46b1-b314-e45cf0903a78"
    },
    {
      "name": "Effort Class Rate IDs",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"effort_class_id\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b25082d1-a9a5-49c0-8730-dd4557b1d294",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Effort class {{$randomLoremWords}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}effort_classes",
                  "host": [
                    "{{url}}effort_classes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b25082d1-a9a5-49c0-8730-dd4557b1d294"
            },
            {
              "name": "Add a service offering to an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "761b8156-9602-49c0-9f86-a2dc33c1fa8f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/service_offerings/113",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "service_offerings",
                    "113"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-761b8156-9602-49c0-9f86-a2dc33c1fa8f"
            },
            {
              "name": "Add an effort class rate ID to a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    const item = pm.response.json(); // Define item here\r",
                      "    pm.environment.set(\"effort_class_rateIDs_id\", item.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры EffortClassRate объекта\", () => {\r",
                      "    const item = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"effort_class\").that.is.an(\"object\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"rateID\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "60990d1a-6f55-4c2c-b7cd-d64ada2414f4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"rateID\": \"qwerty\",\r\n    \"effort_class_id\": {{effort_class_id}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/202/effort_class_rateIDs",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "effort_class_rateIDs"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-60990d1a-6f55-4c2c-b7cd-d64ada2414f4"
            }
          ],
          "id": "2c580240-7474-4ab6-9b96-db5370dc05ea",
          "uid": "32335283-2c580240-7474-4ab6-9b96-db5370dc05ea"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all effort class rate IDs of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Проверка структуры EffortClassRate (первый элемент массива)\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "\r",
                      "        const item = jsonData[0];\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"effort_class\").that.is.an(\"object\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"rateID\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "781447e1-fa4d-4d1e-8033-c07be335543a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/effort_class_rateIDs",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "effort_class_rateIDs"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-781447e1-fa4d-4d1e-8033-c07be335543a"
            }
          ],
          "id": "da975bf1-8333-45c7-914d-f1dc601f095b",
          "uid": "32335283-da975bf1-8333-45c7-914d-f1dc601f095b"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update an effort class rate ID of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры EffortClassRate объекта\", () => {\r",
                      "    const item = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"effort_class\").that.is.an(\"object\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.effort_class).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"rateID\").that.is.a(\"string\");\r",
                      "        pm.expect(item.rateID, 'rateID').to.eq(\"qwerty123\");\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "da4e0100-e9f7-4301-be2e-7d49c476301b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"rateID\": \"qwerty123\",\r\n    \"effort_class_id\": {{effort_class_id}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/202/effort_class_rateIDs/{{effort_class_rateIDs_id}}",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "effort_class_rateIDs",
                    "{{effort_class_rateIDs_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-da4e0100-e9f7-4301-be2e-7d49c476301b"
            }
          ],
          "id": "15e22368-ee9a-4581-9b0c-30de7bdd398e",
          "uid": "32335283-15e22368-ee9a-4581-9b0c-30de7bdd398e"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove an effort class rate ID from a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "85e063cf-2e69-402e-b6db-af87f26fb666",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/effort_class_rateIDs/{{effort_class_rateIDs_id}}",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "effort_class_rateIDs",
                    "{{effort_class_rateIDs_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-85e063cf-2e69-402e-b6db-af87f26fb666"
            },
            {
              "name": "Check \"Remove an effort class rate ID from a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// Проверяем, что в ответе нет объекта с id effort_class_rateIDs_id после его удаления\r",
                      "pm.test(`Проверить наличие объекта с id: effort_class_rateIDs_id в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = pm.environment.get(\"effort_class_rateIDs_id\"); \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); \r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "8e36d46f-5a53-4467-ae1b-b542a44a15d0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/customer_representatives",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "customer_representatives"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-8e36d46f-5a53-4467-ae1b-b542a44a15d0"
            }
          ],
          "id": "348e0586-dcb0-429f-a344-97df4eb52a11",
          "uid": "32335283-348e0586-dcb0-429f-a344-97df4eb52a11"
        }
      ],
      "id": "06d3cfe8-f6db-42cb-9428-d8955e5fc3ec",
      "uid": "32335283-06d3cfe8-f6db-42cb-9428-d8955e5fc3ec"
    },
    {
      "name": "Organizations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all organizations of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры Organization (первый элемент массива)\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "\r",
                      "        const org = jsonData[0];\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org).to.have.property(\"sourceID\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                      "        pm.expect(org).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"parent\").that.is.an(\"object\");\r",
                      "        pm.expect(org.parent).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org.parent).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(org.parent).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(org.parent.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(org.parent.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(org.parent).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"manager\").that.is.an(\"object\");\r",
                      "        pm.expect(org.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(org.manager).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(org.manager.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(org.manager.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(org.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.response.to.have.status(200);\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(org).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(org.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(org.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(org).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ad536e72-647f-4387-b4d5-01c8ec8bf6b1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/319/organizations",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "319",
                    "organizations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ad536e72-647f-4387-b4d5-01c8ec8bf6b1"
            }
          ],
          "id": "70f7751b-e6a5-4445-9155-b53a535d8abe",
          "uid": "32335283-70f7751b-e6a5-4445-9155-b53a535d8abe"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add an organization to a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a364d285-27dc-4d9b-b7e4-49729d39bf7c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/319/organizations/129",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "319",
                    "organizations",
                    "129"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a364d285-27dc-4d9b-b7e4-49729d39bf7c"
            },
            {
              "name": "Check \"Add an organization to a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id 129\r",
                      "pm.test(`Проверить наличие объекта с id: 129 в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 129; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6a241ad6-038f-4343-9da2-ef3a8aedbf0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/319/organizations",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "319",
                    "organizations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6a241ad6-038f-4343-9da2-ef3a8aedbf0d"
            }
          ],
          "id": "c4b3bda4-b151-45b3-b674-98263e409cb0",
          "uid": "32335283-c4b3bda4-b151-45b3-b674-98263e409cb0"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove an organization from a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b852192c-e7b3-4a29-8f54-16659963ba09",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/319/organizations/129",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "319",
                    "organizations",
                    "129"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b852192c-e7b3-4a29-8f54-16659963ba09"
            },
            {
              "name": "Check \"Remove an organization from a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id 129\r",
                      "pm.test(`Проверить отсутствие объекта с id: 129 в массиве после удаления`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 129; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "89269a4e-2daa-4cd2-a40f-27c703f47663",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/319/organizations",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "319",
                    "organizations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-89269a4e-2daa-4cd2-a40f-27c703f47663"
            }
          ],
          "id": "0ec7eba4-0366-437d-b9eb-933a3cd39288",
          "uid": "32335283-0ec7eba4-0366-437d-b9eb-933a3cd39288"
        }
      ],
      "id": "1e8ab6cb-f360-4d2d-82f8-938a78ccc681",
      "uid": "32335283-1e8ab6cb-f360-4d2d-82f8-938a78ccc681"
    },
    {
      "name": "People",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all people of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры Person (первый элемент массива)\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "\r",
                      "        const person = jsonData[0];\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(person).to.have.property(\"sourceID\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                      "        pm.expect(person).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(person).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        pm.expect(person.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(person.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(person.organization).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(person.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(person.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(person.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"site\").that.is.an(\"object\");\r",
                      "        pm.expect(person.site).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(person.site).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(person.site).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(person.site.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(person.site.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(person.site).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"manager\").that.satisfy(val => val === null || typeof val === \"object\");\r",
                      "        if (person.manager) {\r",
                      "            pm.expect(person.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(person.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(person.manager).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(person.manager.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(person.manager.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(person.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(person).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(person.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(person.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(person).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f1dc5535-f8a5-4320-82ac-1540e3de4269",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/264/people",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "264",
                    "people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f1dc5535-f8a5-4320-82ac-1540e3de4269"
            }
          ],
          "id": "483e87ae-c871-4558-9d28-fef232a7ae85",
          "uid": "32335283-483e87ae-c871-4558-9d28-fef232a7ae85"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Update sla \"coverage\"=\"people\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры SLA-объекта\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    function expectStringOrNull(value, fieldName) {\r",
                      "        pm.expect(value === null || typeof value === \"string\", `${fieldName} должно быть string или null`).to.be.true;\r",
                      "    }\r",
                      "\r",
                      "    try {\r",
                      "        const item = jsonData;\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"start_date\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        expectStringOrNull(item.coverage, \"coverage\");\r",
                      "        pm.expect(item.coverage, \"coverage\").to.eq(\"people\");\r",
                      "        pm.expect(item).to.have.property(\"use_knowledge_from_service_provider\").that.is.a(\"boolean\");\r",
                      "\r",
                      "        expectStringOrNull(item.activityID_case, \"activityID_case\");\r",
                      "        expectStringOrNull(item.activityID_high, \"activityID_high\");\r",
                      "        expectStringOrNull(item.activityID_low, \"activityID_low\");\r",
                      "        expectStringOrNull(item.activityID_medium, \"activityID_medium\");\r",
                      "        expectStringOrNull(item.activityID_rfc, \"activityID_rfc\");\r",
                      "        expectStringOrNull(item.activityID_rfi, \"activityID_rfi\");\r",
                      "        expectStringOrNull(item.activityID_top, \"activityID_top\");\r",
                      "        expectStringOrNull(item.agreementID, \"agreementID\");\r",
                      "        expectStringOrNull(item.notice_date, \"notice_date\");\r",
                      "        expectStringOrNull(item.remarks, \"remarks\");\r",
                      "        expectStringOrNull(item.sourceID, \"sourceID\");\r",
                      "        expectStringOrNull(item.expiry_date, \"expiry_date\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"customer_rep\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(item.customer_rep.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_level_manager\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_level_manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_offering\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_offering).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "\r",
                      "        const service = item.service_offering.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "532edc6f-cc72-4b30-a6ea-d6ff2e55ccf3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"coverage\": \"people\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/202",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-532edc6f-cc72-4b30-a6ea-d6ff2e55ccf3"
            },
            {
              "name": "Add a person to a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7d55f1f8-d6e1-45fe-8bc2-5bb8e73b5e47",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/people/1042",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "people",
                    "1042"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7d55f1f8-d6e1-45fe-8bc2-5bb8e73b5e47"
            },
            {
              "name": "Check \"Add a person to a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id 1042\r",
                      "\r",
                      "pm.test(`Проверить наличие объекта с id: 1042\r",
                      " в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 1042\r",
                      "; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ae5f099e-0faa-4e23-96e4-7201b539cefb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/people",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ae5f099e-0faa-4e23-96e4-7201b539cefb"
            }
          ],
          "id": "59c0913a-70d1-44fb-9e6e-d5f9060e44c2",
          "uid": "32335283-59c0913a-70d1-44fb-9e6e-d5f9060e44c2"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a person from a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ec27baa6-4528-4622-b820-59e0adf665cb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/people/1042",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "people",
                    "1042"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ec27baa6-4528-4622-b820-59e0adf665cb"
            },
            {
              "name": "Check \"Remove a person from a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id 1042\r",
                      "pm.test(`Проверить отсутствие объекта с id: 1042 в массиве после удаления`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 1042; \r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "db6aa588-19f7-440b-b91e-eab90b440938",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/202/people",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "202",
                    "people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-db6aa588-19f7-440b-b91e-eab90b440938"
            }
          ],
          "id": "c0a3c649-c5a2-4750-a48d-5273dc3753ec",
          "uid": "32335283-c0a3c649-c5a2-4750-a48d-5273dc3753ec"
        }
      ],
      "id": "60028093-a2bc-4b37-b04a-08d1231dcfe3",
      "uid": "32335283-60028093-a2bc-4b37-b04a-08d1231dcfe3"
    },
    {
      "name": "Service Instances",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a parent service instance to a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    const jsonData = pm.response.json(); // Moved jsonData declaration here\r",
                      "    pm.environment.set(\"parent_service_instance_id\", jsonData.id); // Set the service_instance_id environment variable\r",
                      "});\r",
                      "pm.test(\"Проверка структуры объекта ParentServiceInstance\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        const si = jsonData.service_instance;\r",
                      "\r",
                      "        pm.expect(si).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(si).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(si).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(si).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // pm.expect(si).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        // pm.expect(si.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        // pm.expect(si.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"impact_relation\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.impact_relation).to.eq(\"degraded\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "631973d7-3086-470f-ae39-d9f724bc15f4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"service_instance_id\": 248,\r\n    \"impact_relation\": \"degraded\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/326/service_instances",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "326",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-631973d7-3086-470f-ae39-d9f724bc15f4"
            }
          ],
          "id": "b25756de-9301-4ec0-b5da-d44a75cf0178",
          "uid": "32335283-b25756de-9301-4ec0-b5da-d44a75cf0178"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all parent service instances of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры элемента массива\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "\r",
                      "        const item = jsonData[0];\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(item.service_instance).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"impact_relation\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4dbad1e8-09b8-4e13-9171-a114b4eb9744",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/326/service_instances",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "326",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4dbad1e8-09b8-4e13-9171-a114b4eb9744"
            }
          ],
          "id": "e794f3c1-a2be-4dc4-b812-2aa87096b2b7",
          "uid": "32335283-e794f3c1-a2be-4dc4-b812-2aa87096b2b7"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a parent service instance of a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    const jsonData = pm.response.json(); // Moved jsonData declaration here\r",
                      "});\r",
                      "pm.test(\"Проверка структуры объекта ParentServiceInstance\", () => {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"service_instance\").that.is.an(\"object\");\r",
                      "        const si = jsonData.service_instance;\r",
                      "\r",
                      "        pm.expect(si).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(si).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(si).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(si).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // pm.expect(si).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        // pm.expect(si.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        // pm.expect(si.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"impact_relation\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.impact_relation).to.eq(\"down\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "78d36f36-059e-46ad-ab15-2f9884daeabb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"impact_relation\": \"down\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}slas/326/service_instances/{{parent_service_instance_id}}",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "326",
                    "service_instances",
                    "{{parent_service_instance_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-78d36f36-059e-46ad-ab15-2f9884daeabb"
            }
          ],
          "id": "c292bb66-363a-4412-a940-5b2de34e7fd2",
          "uid": "32335283-c292bb66-363a-4412-a940-5b2de34e7fd2"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a parent service instance from a service level agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ccac0a8e-8d45-47e3-b8c7-9471264573d5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/326/service_instances/{{parent_service_instance_id}}",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "326",
                    "service_instances",
                    "{{parent_service_instance_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ccac0a8e-8d45-47e3-b8c7-9471264573d5"
            },
            {
              "name": "Check \"Remove a parent service instance from a service level agreement\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(`Проверить отсутствие объекта с id parent_service_instance_id в массиве после удаления`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = pm.environment.get(\"parent_service_instance_id\");\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "21b1fa6a-2954-4b3f-ad61-b70fb039673a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}slas/326/service_instances",
                  "host": [
                    "{{url}}slas"
                  ],
                  "path": [
                    "326",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-21b1fa6a-2954-4b3f-ad61-b70fb039673a"
            }
          ],
          "id": "f409f7e5-68cb-4a19-871d-c4fdc50e5f95",
          "uid": "32335283-f409f7e5-68cb-4a19-871d-c4fdc50e5f95"
        }
      ],
      "id": "f4e20ada-5c4d-4374-aedc-03ceb6840451",
      "uid": "32335283-f4e20ada-5c4d-4374-aedc-03ceb6840451"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "96319033-cc25-4e85-9c94-6c0b60fbab49",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "cd5728e8-9e04-4d4f-b0bf-38093b69be7a",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}