{
  "info": {
    "_postman_id": "e10ce0ac-3a4a-4fa6-bc7a-124b814d78eb",
    "name": "24. Invoices",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-31T08:17:09.000Z",
    "createdAt": "2025-07-28T13:59:52.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-e10ce0ac-3a4a-4fa6-bc7a-124b814d78eb"
  },
  "item": [
    {
      "name": "Invoices",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List Invoices",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "function checkField(field, expectedType, nullable = false, path = '') {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Валидация структуры объекта Invoice\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let jsonData;\r",
                      "    try {\r",
                      "        jsonData = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    let item;\r",
                      "    if (Array.isArray(jsonData)) {\r",
                      "        if (jsonData.length === 0) {\r",
                      "            errors.push(\"Массив ответа пуст\");\r",
                      "            pm.expect(errors.length).to.eql(0);\r",
                      "            return;\r",
                      "        }\r",
                      "        item = jsonData[0];\r",
                      "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                      "        item = jsonData;\r",
                      "    } else {\r",
                      "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // === Валидация полей Invoice ===\r",
                      "    checkField(item.id, \"number\", false, \"id\");\r",
                      "    checkField(item.sourceID, \"string\", true, \"sourceID\"); // string, nullable false (по факту null не встречается)\r",
                      "    checkField(item.description, \"string\", false, \"description\");\r",
                      "    checkField(item.invoice_type, \"string\", false, \"invoice_type\");\r",
                      "    checkField(item.invoice_nr, \"string\", false, \"invoice_nr\");\r",
                      "    checkField(item.invoice_date, \"string\", false, \"invoice_date\"); // формат даты как строка\r",
                      "    checkField(item.amount, \"string\", false, \"amount\"); // число как строка\r",
                      "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                      "    checkField(item.updated_at, \"string\", false, \"updated_at\");\r",
                      "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                      "\r",
                      "    // === Валидация вложенного объекта sla ===\r",
                      "    if (item.sla && typeof item.sla === 'object') {\r",
                      "        checkField(item.sla.id, \"number\", false, \"sla.id\");\r",
                      "        checkField(item.sla.name, \"string\", false, \"sla.name\");\r",
                      "        checkField(item.sla.nodeID, \"string\", false, \"sla.nodeID\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует или неверный объект sla\");\r",
                      "    }\r",
                      "\r",
                      "    // === Вывод ошибок ===\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f738450c-982c-4c5e-8a6c-37fe9e02a1d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices",
                  "host": [
                    "{{url}}invoices"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f738450c-982c-4c5e-8a6c-37fe9e02a1d2"
            },
            {
              "name": "Get a Single Invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "function checkField(field, expectedType, nullable = false, path = '') {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Валидация структуры Invoice\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let item;\r",
                      "    try {\r",
                      "        item = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    if (typeof item !== 'object' || item === null || Array.isArray(item)) {\r",
                      "        errors.push(\"Ожидался одиночный объект Invoice\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // === Примитивные поля Invoice ===\r",
                      "    checkField(item.id, \"number\", false, \"id\");\r",
                      "    checkField(item.sourceID, \"string\", true, \"sourceID\");\r",
                      "    checkField(item.source, \"string\", true, \"source\");\r",
                      "    checkField(item.invoice_nr, \"string\", false, \"invoice_nr\");\r",
                      "    checkField(item.invoice_type, \"string\", false, \"invoice_type\");\r",
                      "    checkField(item.invoice_date, \"string\", false, \"invoice_date\");\r",
                      "    checkField(item.po_nr, \"string\", false, \"po_nr\");\r",
                      "    checkField(item.amount, \"string\", false, \"amount\");\r",
                      "    checkField(item.quantity, \"string\", false, \"quantity\");\r",
                      "    checkField(item.unit_price, \"string\", false, \"unit_price\");\r",
                      "    checkField(item.currency, \"string\", false, \"currency\");\r",
                      "    checkField(item.description, \"string\", false, \"description\");\r",
                      "    checkField(item.remarks, \"string\", true, \"remarks\");\r",
                      "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                      "    checkField(item.updated_at, \"string\", false, \"updated_at\");\r",
                      "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                      "    checkField(item.amortize, \"boolean\", false, \"amortize\");\r",
                      "\r",
                      "    // === Nullable-поля амортизации ===\r",
                      "    checkField(item.amortization_start, \"string\", true, \"amortization_start\");\r",
                      "    checkField(item.amortization_end, \"string\", true, \"amortization_end\");\r",
                      "    checkField(item.depreciation_method, \"string\", true, \"depreciation_method\");\r",
                      "    checkField(item.depreciation_start, \"string\", true, \"depreciation_start\");\r",
                      "    checkField(item.rate, \"string\", true, \"rate\");\r",
                      "    checkField(item.salvage_value, \"string\", true, \"salvage_value\");\r",
                      "    checkField(item.salvage_value_currency, \"string\", true, \"salvage_value_currency\");\r",
                      "    checkField(item.useful_life, \"string\", true, \"useful_life\");\r",
                      "    checkField(item.financialID, \"string\", true, \"financialID\");\r",
                      "\r",
                      "    // === attachments: array (может быть пустым) ===\r",
                      "    checkField(item.attachments, \"array\", false, \"attachments\");\r",
                      "\r",
                      "    // === service + provider ===\r",
                      "    if (item.service) {\r",
                      "        checkField(item.service.id, \"number\", false, \"service.id\");\r",
                      "        checkField(item.service.name, \"string\", false, \"service.name\");\r",
                      "        checkField(item.service.localized_name, \"string\", false, \"service.localized_name\");\r",
                      "        checkField(item.service.nodeID, \"string\", false, \"service.nodeID\");\r",
                      "\r",
                      "        if (item.service.provider) {\r",
                      "            checkField(item.service.provider.id, \"number\", false, \"service.provider.id\");\r",
                      "            checkField(item.service.provider.name, \"string\", false, \"service.provider.name\");\r",
                      "            checkField(item.service.provider.nodeID, \"string\", false, \"service.provider.nodeID\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует service.provider\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект service\");\r",
                      "    }\r",
                      "\r",
                      "    // === supplier + account ===\r",
                      "    if (item.supplier) {\r",
                      "        checkField(item.supplier.id, \"number\", false, \"supplier.id\");\r",
                      "        checkField(item.supplier.name, \"string\", false, \"supplier.name\");\r",
                      "        checkField(item.supplier.sourceID, \"string\", false, \"supplier.sourceID\");\r",
                      "        checkField(item.supplier.nodeID, \"string\", false, \"supplier.nodeID\");\r",
                      "\r",
                      "        if (item.supplier.account) {\r",
                      "            checkField(item.supplier.account.id, \"string\", false, \"supplier.account.id\");\r",
                      "            checkField(item.supplier.account.name, \"string\", false, \"supplier.account.name\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует supplier.account\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект supplier\");\r",
                      "    }\r",
                      "\r",
                      "    // === sla ===\r",
                      "    if (item.sla) {\r",
                      "        checkField(item.sla.id, \"number\", false, \"sla.id\");\r",
                      "        checkField(item.sla.name, \"string\", false, \"sla.name\");\r",
                      "        checkField(item.sla.nodeID, \"string\", false, \"sla.nodeID\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект sla\");\r",
                      "    }\r",
                      "\r",
                      "    // === Вывод при ошибке ===\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6c6721f8-0fb0-4011-b552-8527344f4924",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/405",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "405"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6c6721f8-0fb0-4011-b552-8527344f4924"
            }
          ],
          "id": "e5091d0b-fa38-4a0a-851b-38162f622fd3",
          "uid": "32335283-e5091d0b-fa38-4a0a-851b-38162f622fd3"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a Invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"invoice_id\", json.id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "  if (nullable && field === null) return;\r",
                      "  if (!nullable && field === null) {\r",
                      "    errors.push(`Поле не может быть null`);\r",
                      "    return;\r",
                      "  }\r",
                      "\r",
                      "  const actualType = typeof field;\r",
                      "  if (expectedType === 'array') {\r",
                      "    if (!Array.isArray(field)) {\r",
                      "      errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "    }\r",
                      "  } else if (actualType !== expectedType) {\r",
                      "    errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "  }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.amortization_end, \"string\", true);\r",
                      "checkField(item.amortization_start, \"string\", true);\r",
                      "checkField(item.amortize, \"boolean\");\r",
                      "checkField(item.amount, \"string\");\r",
                      "checkField(item.attachments, \"array\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.currency, \"string\");\r",
                      "checkField(item.depreciation_method, \"string\", true);\r",
                      "checkField(item.depreciation_start, \"string\", true);\r",
                      "checkField(item.description, \"string\");\r",
                      "checkField(item.financialID, \"string\", true);\r",
                      "checkField(item.id, \"number\");\r",
                      "checkField(item.invoice_date, \"string\");\r",
                      "checkField(item.invoice_nr, \"string\");\r",
                      "checkField(item.invoice_type, \"string\");\r",
                      "checkField(item.po_nr, \"string\");\r",
                      "checkField(item.quantity, \"string\");\r",
                      "checkField(item.rate, \"string\", true);\r",
                      "checkField(item.remarks, \"string\", true);\r",
                      "checkField(item.salvage_value, \"string\", true);\r",
                      "checkField(item.salvage_value_currency, \"string\", true);\r",
                      "// source не проверяем\r",
                      "// sourceID не проверяем\r",
                      "checkField(item.unit_price, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.useful_life, \"string\", true);\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "  checkField(item.service.id, \"number\");\r",
                      "  checkField(item.service.name, \"string\");\r",
                      "  checkField(item.service.localized_name, \"string\");\r",
                      "  checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "  const provider = item.service.provider;\r",
                      "  if (provider) {\r",
                      "    checkField(provider.id, \"number\");\r",
                      "    checkField(provider.name, \"string\");\r",
                      "    checkField(provider.nodeID, \"string\");\r",
                      "  }\r",
                      "}\r",
                      "\r",
                      "// supplier\r",
                      "if (item.supplier) {\r",
                      "  checkField(item.supplier.id, \"number\");\r",
                      "  checkField(item.supplier.name, \"string\");\r",
                      "\r",
                      "  const account = item.supplier.account;\r",
                      "  if (account) {\r",
                      "    checkField(account.id, \"string\");\r",
                      "    checkField(account.name, \"string\");\r",
                      "  }\r",
                      "\r",
                      "  // sourceID не проверяем\r",
                      "  checkField(item.supplier.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "  console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "  console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1794b977-b6cd-44eb-a10e-2e355e225e99",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"amortization_end\": null,\r\n    \"amortization_start\": null,\r\n    \"amortize\": false,\r\n    \"amount\": \"800.0\",\r\n    \"currency\": \"usd\",\r\n    \"description\": \"Invoice for Bronze Microsoft Support for Personal Computing WDC\",\r\n    \"invoice_date\": \"2024-01-19\",\r\n    \"invoice_nr\": \"20210301-103\",\r\n    \"invoice_type\": \"sla\",\r\n    \"po_nr\": \"PO0060200{{$randomInt}}\",\r\n    \"quantity\": \"1.0\",\r\n    \"service_id\": 110,\r\n    \"supplier_id\": 8,\r\n    \"unit_price\": \"800.0\",\r\n    \"sla_id\": 325\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}invoices",
                  "host": [
                    "{{url}}invoices"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1794b977-b6cd-44eb-a10e-2e355e225e99"
            }
          ],
          "id": "a9363e9a-8eea-4017-a140-15db68f1cd90",
          "uid": "32335283-a9363e9a-8eea-4017-a140-15db68f1cd90"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a Invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    if (pm.response.json().unit_price !== '700.0') {\r",
                      "        console.error('unit_price не обновилось', pm.response.json().unit_price);\r",
                      "    }\r",
                      "    pm.expect(pm.response.json().unit_price).to.eql('700.0');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "83984a8b-5cdb-4368-9c06-d4261f20955d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"unit_price\": \"700.0\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}invoices/{{invoice_id}}",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "{{invoice_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-83984a8b-5cdb-4368-9c06-d4261f20955d"
            }
          ],
          "id": "9b27caf8-4ce0-4f07-986a-77ac4d34cf93",
          "uid": "32335283-9b27caf8-4ce0-4f07-986a-77ac4d34cf93"
        }
      ],
      "id": "b512c592-eabb-4429-8953-3217a1aadb98",
      "uid": "32335283-b512c592-eabb-4429-8953-3217a1aadb98"
    },
    {
      "name": "Audit Entries",
      "item": [
        {
          "name": "List all configuration items linked to an invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "function checkField(field, expectedType, nullable = false, path = '') {\r",
                  "    if (field === null || field === undefined) {\r",
                  "        if (!nullable) {\r",
                  "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                  "        }\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    const actualType = typeof field;\r",
                  "\r",
                  "    if (expectedType === 'array') {\r",
                  "        if (!Array.isArray(field)) {\r",
                  "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                  "        }\r",
                  "    } else if (actualType !== expectedType) {\r",
                  "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Статус 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Валидация структуры AuditLine\", function () {\r",
                  "    const errors = [];\r",
                  "\r",
                  "    let jsonData;\r",
                  "    try {\r",
                  "        jsonData = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        errors.push(\"Ответ не является корректным JSON\");\r",
                  "        pm.expect(errors.length).to.eql(0);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let item;\r",
                  "    if (Array.isArray(jsonData)) {\r",
                  "        if (jsonData.length === 0) {\r",
                  "            errors.push(\"Массив ответа пуст\");\r",
                  "            pm.expect(errors.length).to.eql(0);\r",
                  "            return;\r",
                  "        }\r",
                  "        item = jsonData[0];\r",
                  "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                  "        item = jsonData;\r",
                  "    } else {\r",
                  "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                  "        pm.expect(errors.length).to.eql(0);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    // === Валидация основных полей ===\r",
                  "    checkField(item.id, \"number\", false, \"id\");\r",
                  "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                  "    checkField(item.action, \"string\", false, \"action\");\r",
                  "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                  "\r",
                  "    // === created_by ===\r",
                  "    if (item.created_by) {\r",
                  "        checkField(item.created_by.id, \"number\", false, \"created_by.id\");\r",
                  "        checkField(item.created_by.name, \"string\", false, \"created_by.name\");\r",
                  "        checkField(item.created_by.nodeID, \"string\", false, \"created_by.nodeID\");\r",
                  "        if (item.created_by.account) {\r",
                  "            checkField(item.created_by.account.id, \"string\", false, \"created_by.account.id\");\r",
                  "            checkField(item.created_by.account.name, \"string\", false, \"created_by.account.name\");\r",
                  "        } else {\r",
                  "            errors.push(\"Отсутствует created_by.account\");\r",
                  "        }\r",
                  "    } else {\r",
                  "        errors.push(\"Отсутствует объект created_by\");\r",
                  "    }\r",
                  "\r",
                  "    // === user ===\r",
                  "    if (item.user) {\r",
                  "        checkField(item.user.id, \"number\", false, \"user.id\");\r",
                  "        checkField(item.user.nodeID, \"string\", false, \"user.nodeID\");\r",
                  "        checkField(item.user.display_name, \"string\", false, \"user.display_name\");\r",
                  "        if (item.user.account) {\r",
                  "            checkField(item.user.account.id, \"string\", false, \"user.account.id\");\r",
                  "            checkField(item.user.account.name, \"string\", false, \"user.account.name\");\r",
                  "        } else {\r",
                  "            errors.push(\"Отсутствует user.account\");\r",
                  "        }\r",
                  "    } else {\r",
                  "        errors.push(\"Отсутствует объект user\");\r",
                  "    }\r",
                  "\r",
                  "    // === changes ===\r",
                  "    if (item.changes && typeof item.changes === \"object\") {\r",
                  "        Object.entries(item.changes).forEach(([key, value]) => {\r",
                  "            if (!Array.isArray(value) || value.length !== 2) {\r",
                  "                errors.push(`Поле \"changes.${key}\" должно быть массивом из двух элементов [old, new]`);\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        errors.push(\"Поле changes отсутствует или имеет неверный формат\");\r",
                  "    }\r",
                  "\r",
                  "    // === Вывод ошибок ===\r",
                  "    if (errors.length > 0) {\r",
                  "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                  "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                  "    }\r",
                  "\r",
                  "    pm.expect(errors.length).to.eql(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "f14f96f0-e093-4e6d-93a7-d99bc78b76fe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dc",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}invoices/{{invoice_id}}/audit",
              "host": [
                "{{url}}invoices"
              ],
              "path": [
                "{{invoice_id}}",
                "audit"
              ]
            }
          },
          "response": [],
          "uid": "32335283-f14f96f0-e093-4e6d-93a7-d99bc78b76fe"
        }
      ],
      "id": "d49bf448-6194-44df-a480-5b2531a79e58",
      "uid": "32335283-d49bf448-6194-44df-a480-5b2531a79e58"
    },
    {
      "name": "Configuration Items",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all configuration items linked to an invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "checkField(item.software, \"boolean\");\r",
                      "checkField(item.label, \"string\");\r",
                      "checkField(item.name, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.rule_set, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// product\r",
                      "if (item.product) {\r",
                      "    checkField(item.product.id, \"number\");\r",
                      "    checkField(item.product.name, \"string\");\r",
                      "    checkField(item.product.category, \"string\");\r",
                      "    checkField(item.product.nodeID, \"string\");\r",
                      "    checkField(item.product.brand, \"string\");\r",
                      "    checkField(item.product.model, \"string\");\r",
                      "}\r",
                      "\r",
                      "// support_team\r",
                      "if (item.support_team) {\r",
                      "    checkField(item.support_team.id, \"number\");\r",
                      "    checkField(item.support_team.name, \"string\");\r",
                      "    checkField(item.support_team.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const account = provider.account;\r",
                      "        if (account) {\r",
                      "            checkField(account.id, \"string\");\r",
                      "            checkField(account.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "274979f9-7bce-432d-9483-6f52f26acfcc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/191/cis",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "191",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-274979f9-7bce-432d-9483-6f52f26acfcc"
            }
          ],
          "id": "3e01014f-eec3-4481-a728-9d57785af5ec",
          "uid": "32335283-3e01014f-eec3-4481-a728-9d57785af5ec"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a configuration item to an invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "8d17a9d7-61f9-4f57-8e62-a4321f58f757",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/{{invoice_id}}/cis/2479",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "{{invoice_id}}",
                    "cis",
                    "2479"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-8d17a9d7-61f9-4f57-8e62-a4321f58f757"
            },
            {
              "name": "Check \"Add a configuration item to an invoice\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Проверяем, что в ответе нет объекта с id из переменной service_id после удаления\r",
                      "pm.test(`Проверить присутствие объекта с id: 2479 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 2479;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 2479`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "bb58d009-274d-4eca-8d83-327a45245d9e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/{{invoice_id}}/cis",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "{{invoice_id}}",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-bb58d009-274d-4eca-8d83-327a45245d9e"
            }
          ],
          "id": "058e47d6-807a-45ad-b365-d9b51cd4aaf7",
          "uid": "32335283-058e47d6-807a-45ad-b365-d9b51cd4aaf7"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a configuration item from an invoice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4b1d8539-0393-433f-93ef-8c263bc812dc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/{{invoice_id}}",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "{{invoice_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4b1d8539-0393-433f-93ef-8c263bc812dc"
            },
            {
              "name": "Check \"Add a configuration item to an invoice\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "810b99db-a19e-4e6d-808a-a21443b8ad31",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}invoices/{{invoice_id}}/cis",
                  "host": [
                    "{{url}}invoices"
                  ],
                  "path": [
                    "{{invoice_id}}",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-810b99db-a19e-4e6d-808a-a21443b8ad31"
            }
          ],
          "id": "fda0df7b-217c-4c6b-a827-ca5622523cb9",
          "uid": "32335283-fda0df7b-217c-4c6b-a827-ca5622523cb9"
        }
      ],
      "id": "09aad951-ba83-4773-99ba-2a02609a3039",
      "uid": "32335283-09aad951-ba83-4773-99ba-2a02609a3039"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}