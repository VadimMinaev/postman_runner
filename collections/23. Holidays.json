{
  "info": {
    "_postman_id": "8edff612-2adc-4787-9116-b760f39df221",
    "name": "23. Holidays",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-28T13:51:02.000Z",
    "createdAt": "2025-07-28T12:42:20.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-8edff612-2adc-4787-9116-b760f39df221"
  },
  "item": [
    {
      "name": "Holidays",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List holidays",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры календаря (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    let item = jsonData;\r",
                      "    \r",
                      "    // Если ответ — массив, берем первый элемент\r",
                      "    if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
                      "        item = jsonData[0];\r",
                      "    }\r",
                      "    \r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        \r",
                      "        const actualType = typeof value;\r",
                      "        \r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                } else {\r",
                      "                    // Рекурсивно проверяем вложенные свойства\r",
                      "                    for (const key in value) {\r",
                      "                        if (value.hasOwnProperty(key)) {\r",
                      "                            checkType(`${prop}.${key}`, value[key], typeof value[key], true);\r",
                      "                        }\r",
                      "                    }\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            } else {\r",
                      "                // Проверяем первый элемент массива\r",
                      "                if (value.length > 0) {\r",
                      "                    checkType(`${prop}[0]`, value[0], typeof value[0], true);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем основные свойства\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    checkType(\"calendar_hours\", item.calendar_hours, \"array\", true);\r",
                      "\r",
                      "    // Проверяем вложенные свойства calendar_hours\r",
                      "    if (item.calendar_hours && item.calendar_hours.length > 0) {\r",
                      "        const firstHour = item.calendar_hours[0];\r",
                      "        checkType(\"calendar_hours.id\", firstHour.id, \"number\");\r",
                      "        checkType(\"calendar_hours.time_from\", firstHour.time_from, \"string\");\r",
                      "        checkType(\"calendar_hours.time_until\", firstHour.time_until, \"string\");\r",
                      "        checkType(\"calendar_hours.weekday\", firstHour.weekday, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "        \r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b6c1d8cb-cc7f-4c70-a5a9-2f36e14ac233",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars",
                  "host": [
                    "{{url}}calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b6c1d8cb-cc7f-4c70-a5a9-2f36e14ac233"
            },
            {
              "name": "Get a single holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "function checkField(field, expectedType, nullable = false, path = '') {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Валидация структуры объекта Holiday\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let item;\r",
                      "    try {\r",
                      "        item = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    if (typeof item !== 'object' || item === null || Array.isArray(item)) {\r",
                      "        errors.push(\"Ожидался одиночный объект (не массив)\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // Проверка всех полей Holiday\r",
                      "    checkField(item.id, \"number\", false, \"id\");\r",
                      "    checkField(item.sourceID, \"number\", true, \"sourceID\");\r",
                      "    checkField(item.source, \"object\", true, \"source\"); // может быть null\r",
                      "    checkField(item.name, \"string\", false, \"name\");\r",
                      "    checkField(item.picture_uri, \"string\", true, \"picture_uri\");\r",
                      "    checkField(item.start_at, \"string\", false, \"start_at\");\r",
                      "    checkField(item.end_at, \"string\", false, \"end_at\");\r",
                      "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                      "    checkField(item.updated_at, \"string\", false, \"updated_at\");\r",
                      "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "78189137-d677-42d8-867f-8d2304bb6121",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/205",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "205"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-78189137-d677-42d8-867f-8d2304bb6121"
            }
          ],
          "id": "90bd9117-5854-451f-9763-6002c35eaeef",
          "uid": "32335283-90bd9117-5854-451f-9763-6002c35eaeef"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let errors = []; \r",
                      "\r",
                      "function checkField(value, type, nullable, fieldName) {\r",
                      "    if (nullable && value === null) return; // Allow null if nullable\r",
                      "    pm.expect(value).to.be.a(type, fieldName + \" должен быть типа \" + type);\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Валидация структуры объекта Holiday\", function () {\r",
                      "    try {\r",
                      "        item = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    if (typeof item !== 'object' || item === null || Array.isArray(item)) {\r",
                      "        errors.push(\"Ожидался одиночный объект (не массив)\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // Проверка всех полей Holiday\r",
                      "    checkField(item.id, \"number\", false, \"id\");   \r",
                      "    checkField(item.name, \"string\", false, \"name\");\r",
                      "    checkField(item.picture_uri, \"string\", true, \"picture_uri\");\r",
                      "    checkField(item.start_at, \"string\", false, \"start_at\");\r",
                      "    checkField(item.end_at, \"string\", false, \"end_at\");\r",
                      "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                      "    checkField(item.updated_at, \"string\", false, \"updated_at\");\r",
                      "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "    pm.environment.set(\"holiday_id\", item.id); // Сохранение ID в переменную окружения\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f403cbbf-3202-4b6e-8297-d054dd0f0d35",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"end_at\": \"2033-07-05T00:00\",\r\n    \"name\": \"Independence Day 20{{$randomInt}}\",\r\n    \"start_at\": \"2013-07-04T00:00\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}holidays",
                  "host": [
                    "{{url}}holidays"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f403cbbf-3202-4b6e-8297-d054dd0f0d35"
            }
          ],
          "id": "d3f71ccf-8359-42dd-9920-53d7e72e3905",
          "uid": "32335283-d3f71ccf-8359-42dd-9920-53d7e72e3905"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    if (pm.response.json().end_at !== '2035-07-05T00:00') {\r",
                      "        console.error('end_at не обновилось', pm.response.json().end_at);\r",
                      "    }\r",
                      "    pm.expect(pm.response.json().end_at).to.eql('2035-07-05T00:00');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ba3c1cee-9ddd-4ec6-a016-3a861ea0308e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"end_at\": \"2035-07-05T00:00\",\r\n    \"start_at\": \"2013-07-04T00:00\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ba3c1cee-9ddd-4ec6-a016-3a861ea0308e"
            }
          ],
          "id": "d24805b4-3ccc-41a2-85ad-1e151e82ec62",
          "uid": "32335283-d24805b4-3ccc-41a2-85ad-1e151e82ec62"
        }
      ],
      "id": "d00d464d-1643-42fc-8b7a-4929f5ed5f21",
      "uid": "32335283-d00d464d-1643-42fc-8b7a-4929f5ed5f21"
    },
    {
      "name": "Calendars",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a calendar to a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "dc6b744e-190e-4ba9-a13f-2faeeb53b272",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}/calendars/102",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}",
                    "calendars",
                    "102"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-dc6b744e-190e-4ba9-a13f-2faeeb53b272"
            },
            {
              "name": "Check \"Add a calendar to a holiday\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Получаем ответ от сервера\r",
                      "pm.test(\"Проверка наличия объекта с id=102 в массиве\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "    \r",
                      "    // Проверяем, что ответ содержит массив\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "    \r",
                      "    // Находим объект с нужным id\r",
                      "    const foundItem = responseJson.find(item => item.id === 102);\r",
                      "    \r",
                      "    // Проверяем, что объект найден\r",
                      "    pm.expect(foundItem).to.exist;\r",
                      "    \r",
                      "    // Дополнительно можно проверить структуру найденного объекта\r",
                      "    pm.expect(foundItem).to.have.property('id');\r",
                      "    pm.expect(foundItem.id).to.equal(102);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "9bd046b8-cd35-4eb2-b446-73963fdb03ea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}/calendars",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}",
                    "calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-9bd046b8-cd35-4eb2-b446-73963fdb03ea"
            }
          ],
          "id": "ec36bb57-acfb-4792-9861-ccc294c6988d",
          "uid": "32335283-ec36bb57-acfb-4792-9861-ccc294c6988d"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all calendars of a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "function checkField(field, expectedType, nullable = false, path = '') {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка статуса\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Валидация Calendar\r",
                      "pm.test(\"Валидация структуры Calendar\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let jsonData;\r",
                      "    try {\r",
                      "        jsonData = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    let item;\r",
                      "    if (Array.isArray(jsonData)) {\r",
                      "        if (jsonData.length === 0) {\r",
                      "            errors.push(\"Массив ответа пуст\");\r",
                      "            pm.expect(errors.length).to.eql(0);\r",
                      "            return;\r",
                      "        }\r",
                      "        item = jsonData[0];\r",
                      "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                      "        item = jsonData;\r",
                      "    } else {\r",
                      "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // === Валидация полей Calendar ===\r",
                      "    checkField(item.id, \"number\", false, \"id\");\r",
                      "    checkField(item.sourceID, \"number\", true, \"sourceID\");\r",
                      "    checkField(item.name, \"string\", false, \"name\");\r",
                      "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                      "    checkField(item.updated_at, \"string\", false, \"updated_at\");\r",
                      "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                      "\r",
                      "    // === Валидация calendar_hours[0] ===\r",
                      "    if (Array.isArray(item.calendar_hours) && item.calendar_hours.length > 0) {\r",
                      "        const hour = item.calendar_hours[0];\r",
                      "        checkField(hour.id, \"number\", false, \"calendar_hours[0].id\");\r",
                      "        checkField(hour.time_from, \"string\", false, \"calendar_hours[0].time_from\");\r",
                      "        checkField(hour.time_until, \"string\", false, \"calendar_hours[0].time_until\");\r",
                      "        checkField(hour.weekday, \"string\", false, \"calendar_hours[0].weekday\");\r",
                      "        checkField(hour.nodeID, \"string\", false, \"calendar_hours[0].nodeID\");\r",
                      "    } else {\r",
                      "        errors.push(\"calendar_hours должен быть непустым массивом\");\r",
                      "    }\r",
                      "\r",
                      "    // Вывод ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "22b21fcb-7554-43b3-8110-4ad417718ccc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}/calendars",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}",
                    "calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-22b21fcb-7554-43b3-8110-4ad417718ccc"
            }
          ],
          "id": "7613aac5-f51d-48bd-a31c-488a89d2fe65",
          "uid": "32335283-7613aac5-f51d-48bd-a31c-488a89d2fe65"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a calendar from a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "5f0e02ee-b417-402f-9d51-97c302c8c917",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}/calendars/102",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}",
                    "calendars",
                    "102"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-5f0e02ee-b417-402f-9d51-97c302c8c917"
            },
            {
              "name": "Check \"Remove a calendar from a holiday\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка отсутствия объекта с id=102 в массиве\r",
                      "pm.test(\"Проверка отсутствия объекта с id=102 в массиве\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "    \r",
                      "    // Проверяем, что ответ содержит массив\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "    \r",
                      "    // Проверяем отсутствие объекта с нужным id\r",
                      "    const foundItem = responseJson.find(item => item.id === 102);\r",
                      "    \r",
                      "    // Проверяем, что объект НЕ найден\r",
                      "    pm.expect(foundItem).to.be.undefined;\r",
                      "    \r",
                      "    // Альтернативный способ проверки через length\r",
                      "    const filteredArray = responseJson.filter(item => item.id === 102);\r",
                      "    pm.expect(filteredArray.length).to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "db625a95-72e4-444a-aab8-20dc17642192",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}holidays/{{holiday_id}}/calendars",
                  "host": [
                    "{{url}}holidays"
                  ],
                  "path": [
                    "{{holiday_id}}",
                    "calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-db625a95-72e4-444a-aab8-20dc17642192"
            }
          ],
          "id": "3ec12aed-f845-483c-84b2-9a32f1398d28",
          "uid": "32335283-3ec12aed-f845-483c-84b2-9a32f1398d28"
        }
      ],
      "id": "b0d31e40-a8e5-475b-8022-3f630e7b6964",
      "uid": "32335283-b0d31e40-a8e5-475b-8022-3f630e7b6964"
    },
    {
      "name": "Audit Entries",
      "item": [
        {
          "name": "List audit entries of a holiday",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "function checkField(field, expectedType, nullable = false, path = '') {\r",
                  "    if (field === null || field === undefined) {\r",
                  "        if (!nullable) {\r",
                  "            errors.push(`Поле \"${path}\" не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                  "        }\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    const actualType = typeof field;\r",
                  "\r",
                  "    if (expectedType === 'array') {\r",
                  "        if (!Array.isArray(field)) {\r",
                  "            errors.push(`Поле \"${path}\": ожидался массив, но получен ${actualType}`);\r",
                  "        }\r",
                  "    } else if (actualType !== expectedType) {\r",
                  "        errors.push(`Поле \"${path}\": ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Статус 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Валидация структуры AuditLine\", function () {\r",
                  "    const errors = [];\r",
                  "\r",
                  "    let jsonData;\r",
                  "    try {\r",
                  "        jsonData = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        errors.push(\"Ответ не является корректным JSON\");\r",
                  "        pm.expect(errors.length).to.eql(0);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let item;\r",
                  "    if (Array.isArray(jsonData)) {\r",
                  "        if (jsonData.length === 0) {\r",
                  "            errors.push(\"Массив ответа пуст\");\r",
                  "            pm.expect(errors.length).to.eql(0);\r",
                  "            return;\r",
                  "        }\r",
                  "        item = jsonData[0];\r",
                  "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                  "        item = jsonData;\r",
                  "    } else {\r",
                  "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                  "        pm.expect(errors.length).to.eql(0);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    // === Валидация основных полей ===\r",
                  "    checkField(item.id, \"number\", false, \"id\");\r",
                  "    checkField(item.nodeID, \"string\", false, \"nodeID\");\r",
                  "    checkField(item.action, \"string\", false, \"action\");\r",
                  "    checkField(item.created_at, \"string\", false, \"created_at\");\r",
                  "\r",
                  "    // === created_by ===\r",
                  "    if (item.created_by) {\r",
                  "        checkField(item.created_by.id, \"number\", false, \"created_by.id\");\r",
                  "        checkField(item.created_by.name, \"string\", false, \"created_by.name\");\r",
                  "        checkField(item.created_by.nodeID, \"string\", false, \"created_by.nodeID\");\r",
                  "        if (item.created_by.account) {\r",
                  "            checkField(item.created_by.account.id, \"string\", false, \"created_by.account.id\");\r",
                  "            checkField(item.created_by.account.name, \"string\", false, \"created_by.account.name\");\r",
                  "        } else {\r",
                  "            errors.push(\"Отсутствует created_by.account\");\r",
                  "        }\r",
                  "    } else {\r",
                  "        errors.push(\"Отсутствует объект created_by\");\r",
                  "    }\r",
                  "\r",
                  "    // === user ===\r",
                  "    if (item.user) {\r",
                  "        checkField(item.user.id, \"number\", false, \"user.id\");\r",
                  "        checkField(item.user.nodeID, \"string\", false, \"user.nodeID\");\r",
                  "        checkField(item.user.display_name, \"string\", false, \"user.display_name\");\r",
                  "        if (item.user.account) {\r",
                  "            checkField(item.user.account.id, \"string\", false, \"user.account.id\");\r",
                  "            checkField(item.user.account.name, \"string\", false, \"user.account.name\");\r",
                  "        } else {\r",
                  "            errors.push(\"Отсутствует user.account\");\r",
                  "        }\r",
                  "    } else {\r",
                  "        errors.push(\"Отсутствует объект user\");\r",
                  "    }\r",
                  "\r",
                  "    // === changes ===\r",
                  "    if (item.changes && typeof item.changes === \"object\") {\r",
                  "        Object.entries(item.changes).forEach(([key, value]) => {\r",
                  "            if (!Array.isArray(value) || value.length !== 2) {\r",
                  "                errors.push(`Поле \"changes.${key}\" должно быть массивом из двух элементов [old, new]`);\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        errors.push(\"Поле changes отсутствует или имеет неверный формат\");\r",
                  "    }\r",
                  "\r",
                  "    // === Вывод ошибок ===\r",
                  "    if (errors.length > 0) {\r",
                  "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                  "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                  "    }\r",
                  "\r",
                  "    pm.expect(errors.length).to.eql(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "58c839bb-0b43-40ca-9600-99a6f6343b7c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dc",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}holidays/{{holiday_id}}/audit",
              "host": [
                "{{url}}holidays"
              ],
              "path": [
                "{{holiday_id}}",
                "audit"
              ]
            }
          },
          "response": [],
          "uid": "32335283-58c839bb-0b43-40ca-9600-99a6f6343b7c"
        }
      ],
      "id": "24cce8cd-231b-4745-90de-6895dccd9242",
      "uid": "32335283-24cce8cd-231b-4745-90de-6895dccd9242"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}