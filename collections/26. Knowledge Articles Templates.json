{
  "info": {
    "_postman_id": "b755fac3-c92a-4aac-9c6b-26a2fa46a7f3",
    "name": "26. Knowledge Articles Templates",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T11:38:14.000Z",
    "createdAt": "2025-07-31T09:06:36.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-b755fac3-c92a-4aac-9c6b-26a2fa46a7f3"
  },
  "item": [
    {
      "name": "Knowledge Articles Templates",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"knowledge_article_templates_id\", json.id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "  if (nullable && value === null) return;\r",
                      "  if (!nullable && value === null) {\r",
                      "    errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "    return;\r",
                      "  }\r",
                      "\r",
                      "  const actualType = typeof value;\r",
                      "  if (expectedType === \"array\") {\r",
                      "    if (!Array.isArray(value)) {\r",
                      "      errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "    }\r",
                      "  } else if (actualType !== expectedType) {\r",
                      "    errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "  }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "checkField(\"id\", item.id, \"number\");\r",
                      "checkField(\"created_at\", item.created_at, \"string\");\r",
                      "checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "checkField(\"subject\", item.subject, \"string\");\r",
                      "checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "checkField(\"disabled\", item.disabled, \"boolean\");\r",
                      "checkField(\"source\", item.source, \"string\");\r",
                      "checkField(\"service\", item.service, \"object\", true); // nullable\r",
                      "checkField(\"ui_extension\", item.ui_extension, \"object\", true); // nullable\r",
                      "// sourceID не проверяем\r",
                      "\r",
                      "if (errors.length) {\r",
                      "  console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "  console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ae8e1910-224a-42d8-83ad-c28185249fd0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"subject\": \"Что делать, если вы считаете, что вас взломали {{$randomWords}} {{$randomLoremWords}}\",\r\n    \"service_id\": 106\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}knowledge_article_templates",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ae8e1910-224a-42d8-83ad-c28185249fd0"
            }
          ],
          "id": "1b486308-c1c2-442a-95af-51f114e8e1c1",
          "uid": "32335283-1b486308-c1c2-442a-95af-51f114e8e1c1"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List knowledge article templates",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (!Array.isArray(json)) {\r",
                      "    errors.push(\"Ожидался массив объектов в ответе\");\r",
                      "} else if (json.length === 0) {\r",
                      "    errors.push(\"Ответ содержит пустой массив\");\r",
                      "} else {\r",
                      "    const item = json[0];\r",
                      "\r",
                      "    checkField(\"id\", item.id, \"number\");\r",
                      "    checkField(\"sourceID\", item.sourceID, \"string\", true); // nullable\r",
                      "    checkField(\"subject\", item.subject, \"string\");\r",
                      "    checkField(\"service\", item.service, \"object\", true); // nullable\r",
                      "    checkField(\"created_at\", item.created_at, \"string\");\r",
                      "    checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "    checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(json[0], null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1e4c9487-c95e-4b3b-b3cf-d8cbb96e2485",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1e4c9487-c95e-4b3b-b3cf-d8cbb96e2485"
            },
            {
              "name": "Get a single knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "checkField(\"id\", item.id, \"number\");\r",
                      "checkField(\"created_at\", item.created_at, \"string\");\r",
                      "checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "checkField(\"subject\", item.subject, \"string\");\r",
                      "checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "checkField(\"disabled\", item.disabled, \"boolean\");\r",
                      "checkField(\"source\", item.source, \"string\");\r",
                      "checkField(\"service\", item.service, \"object\", true); // nullable\r",
                      "checkField(\"ui_extension\", item.ui_extension, \"object\", true); // nullable\r",
                      "// sourceID не проверяем\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "28f6c4df-575a-4473-b73a-65106465efc9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-28f6c4df-575a-4473-b73a-65106465efc9"
            }
          ],
          "id": "24bc3609-da31-4246-b9fb-f15c0221a37b",
          "uid": "32335283-24bc3609-da31-4246-b9fb-f15c0221a37b"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    if (pm.response.json().disabled !== true) {\r",
                      "        console.error('disabled не обновилось', pm.response.json().disabled);\r",
                      "    }\r",
                      "    pm.expect(pm.response.json().disabled).to.eql(true);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3cea85b8-2d56-4366-b519-e13b68d6f870",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"disabled\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3cea85b8-2d56-4366-b519-e13b68d6f870"
            }
          ],
          "id": "3fb269b0-c766-4bf9-88ea-001b321968c5",
          "uid": "32335283-3fb269b0-c766-4bf9-88ea-001b321968c5"
        }
      ],
      "id": "85f63ac3-2aca-4f30-a2c8-4ddc99498dea",
      "uid": "32335283-85f63ac3-2aca-4f30-a2c8-4ddc99498dea"
    },
    {
      "name": "Knowledge Articles",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "Create a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"knowledge_article_id\", json.id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "// source не проверяем\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.localized_subject, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.description, \"string\");\r",
                      "checkField(item.localized_description, \"string\");\r",
                      "checkField(item.instructions, \"string\");\r",
                      "checkField(item.localized_instructions, \"string\");\r",
                      "checkField(item.archive_date, \"string\", true);\r",
                      "checkField(item.attachments, \"array\");\r",
                      "checkField(item.covered_specialists, \"boolean\");\r",
                      "checkField(item.end_users, \"boolean\");\r",
                      "checkField(item.internal_specialists, \"boolean\");\r",
                      "checkField(item.key_contacts, \"boolean\");\r",
                      "checkField(item.public, \"boolean\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.custom_fields, \"object\", true);\r",
                      "checkField(item.template, \"object\", true);\r",
                      "checkField(item.keywords, \"object\", true);\r",
                      "checkField(item.localized_keywords, \"object\", true);\r",
                      "checkField(item.times_applied, \"number\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// account\r",
                      "if (item.account) {\r",
                      "    checkField(item.account.id, \"string\");\r",
                      "    checkField(item.account.name, \"string\");\r",
                      "}\r",
                      "\r",
                      "// created_by\r",
                      "if (item.created_by) {\r",
                      "    checkField(item.created_by.id, \"number\");\r",
                      "    checkField(item.created_by.name, \"string\");\r",
                      "    checkField(item.created_by.nodeID, \"string\");\r",
                      "\r",
                      "    const createdAccount = item.created_by.account;\r",
                      "    if (createdAccount) {\r",
                      "        checkField(createdAccount.id, \"string\");\r",
                      "        checkField(createdAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// updated_by\r",
                      "if (item.updated_by) {\r",
                      "    checkField(item.updated_by.id, \"number\");\r",
                      "    checkField(item.updated_by.name, \"string\");\r",
                      "    checkField(item.updated_by.nodeID, \"string\");\r",
                      "\r",
                      "    const updatedAccount = item.updated_by.account;\r",
                      "    if (updatedAccount) {\r",
                      "        checkField(updatedAccount.id, \"string\");\r",
                      "        checkField(updatedAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    const serviceAccount = item.service.account;\r",
                      "    if (serviceAccount) {\r",
                      "        checkField(serviceAccount.id, \"string\");\r",
                      "        checkField(serviceAccount.name, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const providerAccount = provider.account;\r",
                      "        if (providerAccount) {\r",
                      "            checkField(providerAccount.id, \"string\");\r",
                      "            checkField(providerAccount.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7319596f-40a1-4d4b-9a12-b2d9e1af654b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"covered_specialists\": true,\r\n    \"created_by_id\": 1077,\r\n    \"description\": \"Если вы считаете, что ваше устройство (компьютер, смартфон и т.д.) могло быть взломано, отнеситесь к этому серьезно и предпримите быстрые действия. Взломы устройства могут проводиться самыми неожиданными способами, и вам необходимо знать признаки взлома, чтобы вовремя среагировать. В этой статье описаны некоторые признаки того, что вас могли взломать, и действия, которые вам следует предпринять.\",\r\n    \"end_users\": true,\r\n    \"instructions\": \"Подумайте, не происходит ли на вашем устройстве что-то необычное. Свое устройство и то, как оно работает, вы знаете лучше остальных. Если раньше оно работало нормально, но внезапно появились какие-либо странности, это может быть так же из-за износа или поломки, но следующие проблемы могут быть признаками взлома:\\n\\n* У вас есть стандартные программы и файлы, которые не открываются и не работают.\\n* Файлы, которые вы не удаляли, сами по себе исчезли, были помещены в корзину или удалены.\\n* Вы не можете получить доступ к программе или сайту, используя свой обычный пароль, или обнаруживаете, что ваши пароли были изменены.\\n* На вашем компьютере вы обнаружили ​​новую программу, которую вы не устанавливали.\\n* Когда вы не используете компьютер, он часто отправляет или получает сетевой трафик.\\n* Содержимое файла было изменено, но вы не вносили эти изменения.\\n* Появляется впечатление, что вы не можете контролировать все, что делаете на своем устройстве.\\n\\n**Что делать:**\\n\\n1. Немедленно отключитесь от сети.\\n2. Используйте другое устройство или попросите коллегу сообщить об этом в группу информационной безопасности, используя стандартный запрос [Обнаружена проблема безопасности другого типа](/self-service/requests/new/provide_description?template_id=267).\",\r\n    \"internal_specialists\": true,\r\n    \"key_contacts\": true,\r\n    \"keywords\": null,\r\n    \"public\": false,\r\n    \"service_id\": 81,\r\n    \"status\": \"validated\",\r\n    \"template_id\": 1,\r\n    \"subject\": \"Что делать, если вы считаете, что вас взломали {{$randomWord}}\",\r\n    \"times_applied\": 1,\r\n    \"localized_description\": \"Если вы считаете, что ваше устройство (компьютер, смартфон и т.д.) могло быть взломано, отнеситесь к этому серьезно и предпримите быстрые действия. Взломы устройства могут проводиться самыми неожиданными способами, и вам необходимо знать признаки взлома, чтобы вовремя среагировать. В этой статье описаны некоторые признаки того, что вас могли взломать, и действия, которые вам следует предпринять.\",\r\n    \"localized_instructions\": \"Подумайте, не происходит ли на вашем устройстве что-то необычное. Свое устройство и то, как оно работает, вы знаете лучше остальных. Если раньше оно работало нормально, но внезапно появились какие-либо странности, это может быть так же из-за износа или поломки, но следующие проблемы могут быть признаками взлома:\\n\\n* У вас есть стандартные программы и файлы, которые не открываются и не работают.\\n* Файлы, которые вы не удаляли, сами по себе исчезли, были помещены в корзину или удалены.\\n* Вы не можете получить доступ к программе или сайту, используя свой обычный пароль, или обнаруживаете, что ваши пароли были изменены.\\n* На вашем компьютере вы обнаружили ​​новую программу, которую вы не устанавливали.\\n* Когда вы не используете компьютер, он часто отправляет или получает сетевой трафик.\\n* Содержимое файла было изменено, но вы не вносили эти изменения.\\n* Появляется впечатление, что вы не можете контролировать все, что делаете на своем устройстве.\\n\\n**Что делать:**\\n\\n1. Немедленно отключитесь от сети.\\n2. Используйте другое устройство или попросите коллегу сообщить об этом в группу информационной безопасности, используя стандартный запрос [Обнаружена проблема безопасности другого типа](/self-service/requests/new/provide_description?template_id=267).\",\r\n    \"localized_keywords\": null,\r\n    \"localized_subject\": \"Что делать, если вы считаете, что вас взломали {{$randomWord}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}knowledge_articles",
                  "host": [
                    "{{url}}knowledge_articles"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7319596f-40a1-4d4b-9a12-b2d9e1af654b"
            },
            {
              "name": "List knowledge articles of a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (!Array.isArray(json)) {\r",
                      "    errors.push(\"Ожидался массив объектов в ответе\");\r",
                      "} else if (json.length === 0) {\r",
                      "    errors.push(\"Ответ содержит пустой массив\");\r",
                      "} else {\r",
                      "    const item = json[0];\r",
                      "\r",
                      "    checkField(\"id\", item.id, \"number\");\r",
                      "    checkField(\"sourceID\", item.sourceID, \"string\", true); // nullable\r",
                      "    checkField(\"subject\", item.subject, \"string\");\r",
                      "    checkField(\"status\", item.status, \"string\");\r",
                      "    checkField(\"created_at\", item.created_at, \"string\");\r",
                      "    checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "    checkField(\"localized_subject\", item.localized_subject, \"string\");\r",
                      "    checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "\r",
                      "    // service (nullable = false по твоему примеру)\r",
                      "    if (item.service === null) {\r",
                      "        errors.push(\"Свойство 'service' не может быть null\");\r",
                      "    } else {\r",
                      "        const service = item.service;\r",
                      "        checkField(\"service.id\", service.id, \"number\");\r",
                      "        checkField(\"service.name\", service.name, \"string\");\r",
                      "        checkField(\"service.localized_name\", service.localized_name, \"string\");\r",
                      "        checkField(\"service.nodeID\", service.nodeID, \"string\");\r",
                      "\r",
                      "        if (service.provider === null) {\r",
                      "            errors.push(\"Свойство 'service.provider' не может быть null\");\r",
                      "        } else {\r",
                      "            const provider = service.provider;\r",
                      "            checkField(\"service.provider.id\", provider.id, \"number\");\r",
                      "            checkField(\"service.provider.name\", provider.name, \"string\");\r",
                      "            checkField(\"service.provider.nodeID\", provider.nodeID, \"string\");\r",
                      "\r",
                      "            if (provider.account === null) {\r",
                      "                errors.push(\"Свойство 'service.provider.account' не может быть null\");\r",
                      "            } else {\r",
                      "                const account = provider.account;\r",
                      "                checkField(\"service.provider.account.id\", account.id, \"string\");\r",
                      "                checkField(\"service.provider.account.name\", account.name, \"string\");\r",
                      "            }\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(json[0], null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "048d70ee-9716-4444-ac47-2708916a7d4b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/1/knowledge_articles",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "1",
                    "knowledge_articles"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-048d70ee-9716-4444-ac47-2708916a7d4b"
            }
          ],
          "id": "265a90b3-161f-4f98-9301-f8827adf36a6",
          "uid": "32335283-265a90b3-161f-4f98-9301-f8827adf36a6"
        }
      ],
      "id": "b0afe505-7ba9-4d0e-8fbb-092db203c60b",
      "uid": "32335283-b0afe505-7ba9-4d0e-8fbb-092db203c60b"
    },
    {
      "name": "Service Instances",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a service instance to a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ed950ed4-113c-498c-aeda-2487229fa25c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}/service_instances/248",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}",
                    "service_instances",
                    "248"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ed950ed4-113c-498c-aeda-2487229fa25c"
            }
          ],
          "id": "8256ad9d-c212-41ad-8523-04a766043287",
          "uid": "32335283-8256ad9d-c212-41ad-8523-04a766043287"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List service instances of a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (!Array.isArray(json)) {\r",
                      "    errors.push(\"Ожидался массив объектов в ответе\");\r",
                      "} else if (json.length === 0) {\r",
                      "    errors.push(\"Ответ содержит пустой массив\");\r",
                      "} else {\r",
                      "    const item = json[0];\r",
                      "\r",
                      "    checkField(\"id\", item.id, \"number\");\r",
                      "    checkField(\"sourceID\", item.sourceID, \"string\", true); // nullable\r",
                      "    checkField(\"name\", item.name, \"string\");\r",
                      "    checkField(\"status\", item.status, \"string\");\r",
                      "    checkField(\"created_at\", item.created_at, \"string\");\r",
                      "    checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "    checkField(\"localized_name\", item.localized_name, \"string\");\r",
                      "    checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "\r",
                      "    // service\r",
                      "    if (item.service === null) {\r",
                      "        errors.push(\"Свойство 'service' не может быть null\");\r",
                      "    } else {\r",
                      "        const service = item.service;\r",
                      "        checkField(\"service.id\", service.id, \"number\");\r",
                      "        checkField(\"service.name\", service.name, \"string\");\r",
                      "        checkField(\"service.localized_name\", service.localized_name, \"string\");\r",
                      "        checkField(\"service.nodeID\", service.nodeID, \"string\");\r",
                      "\r",
                      "        if (service.provider === null) {\r",
                      "            errors.push(\"Свойство 'service.provider' не может быть null\");\r",
                      "        } else {\r",
                      "            const provider = service.provider;\r",
                      "            checkField(\"service.provider.id\", provider.id, \"number\");\r",
                      "            checkField(\"service.provider.name\", provider.name, \"string\");\r",
                      "            checkField(\"service.provider.nodeID\", provider.nodeID, \"string\");\r",
                      "\r",
                      "            if (provider.account === null) {\r",
                      "                errors.push(\"Свойство 'service.provider.account' не может быть null\");\r",
                      "            } else {\r",
                      "                const account = provider.account;\r",
                      "                checkField(\"service.provider.account.id\", account.id, \"string\");\r",
                      "                checkField(\"service.provider.account.name\", account.name, \"string\");\r",
                      "            }\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // support_team\r",
                      "    if (item.support_team === null) {\r",
                      "        errors.push(\"Свойство 'support_team' не может быть null\");\r",
                      "    } else {\r",
                      "        const team = item.support_team;\r",
                      "        checkField(\"support_team.id\", team.id, \"number\");\r",
                      "        checkField(\"support_team.name\", team.name, \"string\");\r",
                      "        checkField(\"support_team.nodeID\", team.nodeID, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(json[0], null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      "pm.test(`Проверить присутствие объекта с id: 248 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 248;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 248`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "76ffae28-4dbb-41cc-a489-214db1b00379",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}/service_instances",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-76ffae28-4dbb-41cc-a489-214db1b00379"
            }
          ],
          "id": "8f0fd946-9626-4b10-b1a0-72098c6da1f5",
          "uid": "32335283-8f0fd946-9626-4b10-b1a0-72098c6da1f5"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service instance from a knowledge article template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "73077297-7ba3-4745-9410-1ce92da57eaa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}/service_instances/248",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}",
                    "service_instances",
                    "248"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-73077297-7ba3-4745-9410-1ce92da57eaa"
            },
            {
              "name": "Check \"Remove a service instance from a knowledge article template\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(`Проверить отсутствие объекта с id: 248 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 248;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id 248 после удаления связи`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен отсутствовать в ответе`).to.not.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "17d151bb-8a91-4839-8c4b-51e19afa96e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_article_templates/{{knowledge_article_templates_id}}/service_instances",
                  "host": [
                    "{{url}}knowledge_article_templates"
                  ],
                  "path": [
                    "{{knowledge_article_templates_id}}",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-17d151bb-8a91-4839-8c4b-51e19afa96e6"
            }
          ],
          "id": "96eb87fd-536f-42df-a4a2-81df258e3368",
          "uid": "32335283-96eb87fd-536f-42df-a4a2-81df258e3368"
        }
      ],
      "id": "17a35d97-b780-46ea-b746-17de0e915abb",
      "uid": "32335283-17a35d97-b780-46ea-b746-17de0e915abb"
    },
    {
      "name": "Translations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List knowledge article translations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"knowledge_article_translations_id\", json[0].id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "checkField(item.id, \"number\");\r",
                      "checkField(item.locale, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "97d45ea4-7076-4ccd-a9f3-cfe0c978a754",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/translations",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "translations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-97d45ea4-7076-4ccd-a9f3-cfe0c978a754"
            },
            {
              "name": "Get a single knowledge article translation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json;\r",
                      "\r",
                      "checkField(\"id\", item.id, \"number\");\r",
                      "checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "checkField(\"locale\", item.locale, \"string\");\r",
                      "checkField(\"created_at\", item.created_at, \"string\");\r",
                      "checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "checkField(\"subject\", item.subject, \"string\");\r",
                      "checkField(\"keywords\", item.keywords, \"string\");\r",
                      "checkField(\"description\", item.description, \"string\");\r",
                      "checkField(\"instructions\", item.instructions, \"string\");\r",
                      "checkField(\"attachments\", item.attachments, \"array\");\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1d627040-cfef-4fae-94fa-f243bb11e4fc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/translations/{{knowledge_article_translations_id}}",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "translations",
                    "{{knowledge_article_translations_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1d627040-cfef-4fae-94fa-f243bb11e4fc"
            }
          ],
          "id": "b183c8cb-8b94-45bb-81f5-d889d9782d3a",
          "uid": "32335283-b183c8cb-8b94-45bb-81f5-d889d9782d3a"
        }
      ],
      "id": "ac0da62c-bfc2-4762-96b3-59a82623ecfd",
      "uid": "32335283-ac0da62c-bfc2-4762-96b3-59a82623ecfd"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}