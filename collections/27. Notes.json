{
  "info": {
    "_postman_id": "e7fcd772-da13-4cbe-b8d6-13c397cbcd42",
    "name": "27. Notes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T08:27:06.000Z",
    "createdAt": "2025-08-01T11:57:17.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-e7fcd772-da13-4cbe-b8d6-13c397cbcd42"
  },
  "item": [
    {
      "name": "Notes",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List notes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Получаем ответ от сервера\r",
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверяем структуру массива и наличие полей\r",
                      "pm.test(\"Проверка массива объектов\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "    pm.environment.set(\"note_id\", responseJson[0].id);\r",
                      "    console.log(\"note_id\", responseJson[0].id);\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "\r",
                      "    // Перебираем каждый объект в массиве\r",
                      "    responseJson.forEach((item, index) => {\r",
                      "        // Проверяем наличие обязательных полей в каждом объекте\r",
                      "        pm.expect(item).to.have.property('text');\r",
                      "        pm.expect(item.text).to.be.a('string');\r",
                      "\r",
                      "        // Дополнительно можно добавить проверку других полей\r",
                      "        // pm.expect(item).to.have.property('otherField');\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4cef47f1-f614-40e0-80dd-98e21a2db572",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}notes",
                  "host": [
                    "{{url}}notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4cef47f1-f614-40e0-80dd-98e21a2db572"
            },
            {
              "name": "Get a single note",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры объекта Note\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const data = pm.response.json();\r",
                      "\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(data, \"id\", \"number\");\r",
                      "    checkField(data, \"created_at\", \"string\");\r",
                      "    checkField(data, \"internal\", \"boolean\");\r",
                      "    checkField(data, \"medium\", \"string\");\r",
                      "    checkField(data, \"text\", \"string\");\r",
                      "    checkField(data, \"nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(data, \"person.id\", \"number\");\r",
                      "    checkField(data, \"person.name\", \"string\");\r",
                      "    checkField(data, \"person.account.id\", \"string\");\r",
                      "    checkField(data, \"person.account.name\", \"string\");\r",
                      "    checkField(data, \"person.nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(data, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a28f8946-028b-4172-a240-3b8c350b57aa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}notes/{{note_id}}",
                  "host": [
                    "{{url}}notes"
                  ],
                  "path": [
                    "{{note_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a28f8946-028b-4172-a240-3b8c350b57aa"
            }
          ],
          "id": "3e1f386c-4c24-48c7-b0e9-213e4390c91d",
          "uid": "32335283-3e1f386c-4c24-48c7-b0e9-213e4390c91d"
        }
      ],
      "id": "aeb3e9e8-0b1c-422f-90e7-ff6adbae6be0",
      "uid": "32335283-aeb3e9e8-0b1c-422f-90e7-ff6adbae6be0"
    },
    {
      "name": "Reactions",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List note reactions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Fixed access to 'id' property\r",
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверяем структуру массива и наличие полей\r",
                      "pm.test(\"Проверка массива объектов\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "    \r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "\r",
                      "    // Проверяем, что массив не пустой, перед доступом к элементам\r",
                      "    if (responseJson.length > 0) {\r",
                      "        pm.environment.set(\"note_id\", responseJson[0].id);\r",
                      "        console.log(\"note_id\", responseJson[0].id);\r",
                      "\r",
                      "        // Перебираем каждый объект в массиве\r",
                      "        responseJson.forEach((item) => {\r",
                      "            // Проверяем наличие обязательных полей в каждом объекте\r",
                      "            // pm.expect(item).to.have.property('text');\r",
                      "            // pm.expect(item.text).to.be.a('string');\r",
                      "\r",
                      "            // Дополнительно можно добавить проверку других полей\r",
                      "            // pm.expect(item).to.have.property('otherField');\r",
                      "        });\r",
                      "    } else {\r",
                      "        console.log(\"Response array is empty\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "08291802-cbc7-4f9e-b927-11f67cf60da8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}notes/{{note_id}}/note_reactions",
                  "host": [
                    "{{url}}notes"
                  ],
                  "path": [
                    "{{note_id}}",
                    "note_reactions"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-08291802-cbc7-4f9e-b927-11f67cf60da8"
            }
          ],
          "id": "63ea7daa-229e-48f2-ac0f-b9431f30391f",
          "uid": "32335283-63ea7daa-229e-48f2-ac0f-b9431f30391f"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a note reaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// pm.test(\"Проверка структуры объекта Reaction\", function () {\r",
                      "//     pm.response.to.have.status(200);\r",
                      "\r",
                      "//     const data = pm.response.json();\r",
                      "//     pm.environment.set(\"reaction_id\", data.id);\r",
                      "\r",
                      "//     const errors = [];\r",
                      "\r",
                      "//     function checkField(obj, fieldPath, expectedType) {\r",
                      "//         const parts = fieldPath.split(\".\");\r",
                      "//         let value = obj;\r",
                      "//         for (let part of parts) {\r",
                      "//             value = value?.[part];\r",
                      "//         }\r",
                      "\r",
                      "//         const actualType = typeof value;\r",
                      "\r",
                      "//         if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "//             errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "//         } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "//             errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "//         }\r",
                      "//     }\r",
                      "\r",
                      "//     checkField(data, \"id\", \"number\");\r",
                      "//     checkField(data, \"reaction\", \"string\");\r",
                      "\r",
                      "//     checkField(data, \"person.id\", \"number\");\r",
                      "//     checkField(data, \"person.name\", \"string\");\r",
                      "//     checkField(data, \"person.account.id\", \"number\");\r",
                      "//     checkField(data, \"person.account.name\", \"string\");\r",
                      "\r",
                      "//     if (errors.length > 0) {\r",
                      "//         console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "//         console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(data, null, 2));\r",
                      "//     }\r",
                      "\r",
                      "//     pm.expect(errors.length).to.eql(0);\r",
                      "// });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "34ead08a-ee4f-43c1-ad93-86a34795111c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"note_id\": {{note_id}},\r\n    \"reaction\":  \"   😀   \"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}note_reactions",
                  "host": [
                    "{{url}}note_reactions"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-34ead08a-ee4f-43c1-ad93-86a34795111c"
            }
          ],
          "id": "3952659e-64b9-43bb-945f-eeed45ae05ec",
          "uid": "32335283-3952659e-64b9-43bb-945f-eeed45ae05ec"
        }
      ],
      "id": "3aa45b43-4933-4ae8-8dd0-42731d203ad5",
      "uid": "32335283-3aa45b43-4933-4ae8-8dd0-42731d203ad5"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}