{
  "info": {
    "_postman_id": "443c50a5-eb3e-4427-9aee-2ec37d041efb",
    "name": "11. Service Categories",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-21T06:50:30.000Z",
    "createdAt": "2025-07-18T08:42:10.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-443c50a5-eb3e-4427-9aee-2ec37d041efb"
  },
  "item": [
    {
      "name": "Service Categories",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service categories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры массива ServiceCategory\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "    pm.expect(jsonData).to.be.an(\"array\");\r",
                      "    if (jsonData.length === 0) return;\r",
                      "\r",
                      "    const item = jsonData[0];\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"sourceID\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(item.created_at)).to.not.be.NaN;\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка проверки структуры:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "eaddffac-66b8-4592-9985-c3bc6bb1054a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories",
                  "host": [
                    "{{url}}service_categories"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-eaddffac-66b8-4592-9985-c3bc6bb1054a"
            },
            {
              "name": "Get a single service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры объекта ServiceCategory (по id)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"picture_uri\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.created_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.updated_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"sourceID\");\r",
                      "        if (jsonData.sourceID !== null) pm.expect(jsonData.sourceID).to.be.a(\"number\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"services\").that.is.an(\"array\");\r",
                      "        if (jsonData.services.length > 0) {\r",
                      "            const service = jsonData.services[0];\r",
                      "            pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка проверки структуры:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e78f76cb-4f96-4e97-9e60-f78b784a0cf1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/5",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e78f76cb-4f96-4e97-9e60-f78b784a0cf1"
            }
          ],
          "id": "2d632c9e-04bc-4202-b50d-a46b328bf063",
          "uid": "32335283-2d632c9e-04bc-4202-b50d-a46b328bf063"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры объекта ServiceCategory (по id)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "    pm.environment.set(\"service_category_id\", jsonData.id);\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"picture_uri\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.created_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.updated_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"services\").that.is.an(\"array\");\r",
                      "        if (jsonData.services.length > 0) {\r",
                      "            const service = jsonData.services[0];\r",
                      "            pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2bef9c25-cb56-4505-aee0-922e7b781ef0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"Комплекс услуг\",\r\n    \"name\": \"Бизнес-приложения {{$randomInt}}\",\r\n    \"picture_uri\": \"https://demo.assets.rrtsm.ru/avatars/service_categories/original/software1.svg\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}service_categories",
                  "host": [
                    "{{url}}service_categories"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2bef9c25-cb56-4505-aee0-922e7b781ef0"
            }
          ],
          "id": "144e410c-c662-4df2-aa6e-e62ac30e6256",
          "uid": "32335283-144e410c-c662-4df2-aa6e-e62ac30e6256"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры объекта ServiceCategory (по id)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "    pm.environment.set(\"service_category_id\", jsonData.id);\r",
                      "    const item = jsonData; // Define 'item' here\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"localized_description\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"picture_uri\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.created_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(Date.parse(jsonData.updated_at)).to.not.be.NaN;\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"services\").that.is.an(\"array\");\r",
                      "        if (jsonData.services.length > 0) {\r",
                      "            const service = jsonData.services[0];\r",
                      "            pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        }\r",
                      "\r",
                      "        if (item.description !== \"1С - C\") {\r",
                      "            errors.push(`Поле 'description' ожидалось равным \"1С - C\", а пришло: '${item.description}'`);\r",
                      "        }\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0f6bfcad-18eb-4f6f-a386-a09569f2a0a2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"1С - C\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}service_categories/{{service_category_id}}",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "{{service_category_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0f6bfcad-18eb-4f6f-a386-a09569f2a0a2"
            }
          ],
          "id": "871aff42-a2d9-4048-97bf-8208da7171ee",
          "uid": "32335283-871aff42-a2d9-4048-97bf-8208da7171ee"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a32b3a7d-4e88-47d8-80b3-b5bbd25990ee",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/{{service_category_id}}",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "{{service_category_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a32b3a7d-4e88-47d8-80b3-b5bbd25990ee"
            },
            {
              "name": "Get a single service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f779b8b4-e306-44af-bda9-23ede696f5e1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/{{service_category_id}}",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "{{service_category_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f779b8b4-e306-44af-bda9-23ede696f5e1"
            }
          ],
          "id": "1e1a2c96-042a-4545-bd28-2ddbd1f4c10d",
          "uid": "32335283-1e1a2c96-042a-4545-bd28-2ddbd1f4c10d"
        }
      ],
      "id": "b3efc891-8084-4053-acbd-d55868356d2d",
      "uid": "32335283-b3efc891-8084-4053-acbd-d55868356d2d"
    },
    {
      "name": "Services",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all services of a service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры объектов Service (список)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        if (jsonData.length > 0) {\r",
                      "            const service = jsonData[0];\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(Date.parse(service.created_at)).to.not.be.NaN;\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(Date.parse(service.updated_at)).to.not.be.NaN;\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "            pm.expect(service.provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service.provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service.provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            pm.expect(service.provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(service.provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"support_team\").that.is.an(\"object\");\r",
                      "            pm.expect(service.support_team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service.support_team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "            pm.expect(service).to.have.property(\"service_category\").that.is.an(\"object\");\r",
                      "            pm.expect(service.service_category).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(service.service_category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(service.service_category).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.log(\"Ошибка валидации:\\n\" + err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "fc33f39d-9133-4954-985b-1e8fc7effe2d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/5/services",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5",
                    "services"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-fc33f39d-9133-4954-985b-1e8fc7effe2d"
            }
          ],
          "id": "084740d5-a443-44fe-a342-a222239613d1",
          "uid": "32335283-084740d5-a443-44fe-a342-a222239613d1"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры массива Service\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.environment.set(\"service_id\", jsonData.id);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f8d606ee-a5d2-4076-90a8-c88af4524ce0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"availability_manager_id\": 1031,\r\n    \"capacity_manager_id\": 1031,\r\n    \"change_manager_id\": 744,\r\n    \"continuity_manager_id\": 1031,\r\n    \"description\": \"Эта услуга обеспечивает функционирование 1С решений компании и включает:\\n\\n* __поддержку прикладного решения;__\\n* __адаптивное сопровождение прикладного решения;__\\n* __поддержка работы пользователей в системе;__\\n* __поддержка ИТ-специалистов.__\",\r\n    \"disabled\": false,\r\n    \"first_line_team\": null,\r\n    \"keywords\": \"1С\",\r\n    \"knowledge_manager_id\": 1031,\r\n    \"name\": \"1C Базовая for {{$randomCompanyName}}\",\r\n    \"picture_uri\": \"https://demo.r-service.tech/storage/instances/rrtsm_devtest2/avatars/189/services/000/000/106/d61616795233a4641934fdb1e5b6757c/original/6be3a201c4b08ea4.svg\",\r\n    \"problem_manager_id\": 1031,\r\n    \"provider_id\": 54,\r\n    \"release_manager_id\": 945,\r\n    \"service_category\": null,\r\n    \"service_owner_id\": 637,\r\n    \"support_team_id\": 42,\r\n    \"survey_id\": 1,\r\n    \"localized_description\": \"Эта услуга обеспечивает функционирование 1С решений компании и включает:\\n\\n* __поддержку прикладного решения;__\\n* __адаптивное сопровождение прикладного решения;__\\n* __поддержка работы пользователей в системе;__\\n* __поддержка ИТ-специалистов.__\",\r\n    \"localized_keywords\": \"1С\",\r\n    \"localized_name\": \"1C Базовая {{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}services",
                  "host": [
                    "{{url}}services"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f8d606ee-a5d2-4076-90a8-c88af4524ce0"
            },
            {
              "name": "Add a service to a service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "dc6a8dd2-331f-46bd-8be4-f8babb72304f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"Комплекс услуг\",\r\n    \"name\": \"Бизнес-приложения {{$randomInt}}\",\r\n    \"picture_uri\": \"https://demo.assets.rrtsm.ru/avatars/service_categories/original/software1.svg\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}service_categories/5/services/{{service_id}}",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5",
                    "services",
                    "{{service_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-dc6a8dd2-331f-46bd-8be4-f8babb72304f"
            },
            {
              "name": "Check \"Add a service to a service category\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id из переменной service_id\r",
                      "pm.test(`Проверить наличие объекта с id: {{service_id}} в массиве`, function() {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = pm.variables.get(\"service_id\"); // Получаем значение переменной\r",
                      "    \r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "    \r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId); // == вместо === на случай, если переменная строка\r",
                      "    \r",
                      "    if (!foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в массиве ответа`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "        console.log(\"Ожидаемый ID:\", targetId);\r",
                      "    }\r",
                      "    \r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "edb9b2e2-14ef-441e-ac27-7f97043e273e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/5/services",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5",
                    "services"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-edb9b2e2-14ef-441e-ac27-7f97043e273e"
            }
          ],
          "id": "44c71621-6436-43d5-905f-c312b1c2332e",
          "uid": "32335283-44c71621-6436-43d5-905f-c312b1c2332e"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service from a service category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c0311a7d-6a04-4e82-8588-5b1aa46003b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/5/services/{{service_id}}",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5",
                    "services",
                    "{{service_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c0311a7d-6a04-4e82-8588-5b1aa46003b0"
            },
            {
              "name": "Check \"Remove a service from a service category\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе нет объекта с id из переменной service_id после удаления\r",
                      "pm.test(`Проверить отсутствие объекта с id: {{service_id}} в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = pm.variables.get(\"service_id\");\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} неожиданно найден в ответе. Проверяем, что в ответе нет объекта с id из переменной service_id после удаления`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "139e89aa-f2c2-4708-b5a7-39bfaf5995fe",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}service_categories/5/services",
                  "host": [
                    "{{url}}service_categories"
                  ],
                  "path": [
                    "5",
                    "services"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-139e89aa-f2c2-4708-b5a7-39bfaf5995fe"
            }
          ],
          "id": "114c2390-e3dc-4fa1-9344-7a475ae86a47",
          "uid": "32335283-114c2390-e3dc-4fa1-9344-7a475ae86a47"
        }
      ],
      "id": "16097027-b5b8-4abd-a529-4311eb01c7b0",
      "uid": "32335283-16097027-b5b8-4abd-a529-4311eb01c7b0"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "0ed9cf2c-f717-4f41-9396-f2219e15cad5",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "54f89e8c-6aa2-4932-9641-0025ac74289a",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}