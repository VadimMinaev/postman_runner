{
  "info": {
    "_postman_id": "7d910b41-a09d-4381-adb9-62a8e02ffe1e",
    "name": "06. People",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-14T14:32:49.000Z",
    "createdAt": "2025-07-09T06:20:09.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-7d910b41-a09d-4381-adb9-62a8e02ffe1e"
  },
  "item": [
    {
      "name": "People",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List people",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "\r",
                      "    pm.test(\"Ответ — массив\", function () {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "    });\r",
                      "\r",
                      "    const first = jsonData[0];\r",
                      "\r",
                      "    pm.test(\"Поля первого объекта — базовая валидация\", function () {\r",
                      "        pm.expect(first).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(first).to.have.property(\"sourceID\"); // может быть null или строка\r",
                      "        pm.expect(first).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(first).to.have.property(\"manager\"); // null\r",
                      "        pm.expect(first).to.have.property(\"site\"); // null\r",
                      "        pm.expect(first).to.have.property(\"organization\"); // объект\r",
                      "        // pm.expect(first).to.have.property(\"account\"); // объект\r",
                      "    });\r",
                      "\r",
                      "    // Дополнительная валидация organization, если есть\r",
                      "    if (first.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(first.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(first.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(first.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(first.organization).to.have.property(\"account\"); // объект\r",
                      "            pm.expect(first.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(first.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Дополнительная валидация account на верхнем уровне\r",
                      "    if (first.account) {\r",
                      "        pm.test(\"Поле account содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(first.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(first.account).to.have.property(\"name\").that.is.a(\"null\");\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b91de9d2-1db4-44fd-85ce-c6eabe6df3f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people",
                  "host": [
                    "{{url}}people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b91de9d2-1db4-44fd-85ce-c6eabe6df3f2"
            },
            {
              "name": "Get a single person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\").that.is.not.empty;\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация верхнего уровня\", function () {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"job_title\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"locale\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"information\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"color_mode\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"time_zone\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"time_format_24h\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"auto_translation\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"exclude_team_notifications\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"guest\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"vip\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"play_private_chat_sound\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"play_support_chat_sound\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"send_email_notifications\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"show_notification_popup\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"show_private_chat_popup\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"show_support_chat_popup\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"picture_uri\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"supportID\").that.is.a(\"string\");\r",
                      "    });\r",
                      "\r",
                      "    if (jsonData.account) {\r",
                      "        pm.test(\"Поле account содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.manager) {\r",
                      "        pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.manager).to.have.property(\"account\");\r",
                      "            pm.expect(jsonData.manager.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.manager.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.organization).to.have.property(\"account\");\r",
                      "            pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.site) {\r",
                      "        pm.test(\"Поле site содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(jsonData.site).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(jsonData.site).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.site).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.site).to.have.property(\"account\");\r",
                      "            pm.expect(jsonData.site.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.site.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (Array.isArray(jsonData.contacts) && jsonData.contacts.length > 0) {\r",
                      "        const contact = jsonData.contacts[0];\r",
                      "        pm.test(\"Первый элемент массива contacts содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            pm.expect(contact).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(contact).to.satisfy(c => c.email || c.telephone);\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (Array.isArray(jsonData.addresses) && jsonData.addresses.length > 0) {\r",
                      "        const address = jsonData.addresses[0];\r",
                      "        pm.test(\"Первый элемент массива addresses содержит ожидаемые поля\", function () {\r",
                      "            pm.expect(address).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(address).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            pm.expect(address).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(address).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "            pm.expect(address).to.have.property(\"address\");\r",
                      "            pm.expect(address).to.have.property(\"city\");\r",
                      "            pm.expect(address).to.have.property(\"country\");\r",
                      "            pm.expect(address).to.have.property(\"state\");\r",
                      "            pm.expect(address).to.have.property(\"zip\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.formats) {\r",
                      "        pm.test(\"Поле formats содержит ожидаемые шаблоны\", function () {\r",
                      "            pm.expect(jsonData.formats).to.have.property(\"time\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.formats).to.have.property(\"date\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.formats).to.have.property(\"datetime\").that.is.a(\"string\");\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4f04b1e9-7b31-4acd-9149-8db1bee5579b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4f04b1e9-7b31-4acd-9149-8db1bee5579b"
            },
            {
              "name": "Using a phone number to get a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    try {\r",
                      "        pm.response.to.have.status(200);\r",
                      "\r",
                      "        const jsonData = pm.response.json();\r",
                      "        console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "        pm.test(\"Ответ — массив с минимум одним элементом\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData, \"Ответ не является массивом или пустой\").to.be.an(\"array\").that.is.not.empty;\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в проверке массива:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "\r",
                      "        const person = jsonData[0];\r",
                      "\r",
                      "        pm.test(\"Первый объект в массиве — валидная структура\", function () {\r",
                      "            try {\r",
                      "                const expectString = (field) => pm.expect(person[field], `Поле ${field}`).to.be.a(\"string\");\r",
                      "                const expectNumber = (field) => pm.expect(person[field], `Поле ${field}`).to.be.a(\"number\");\r",
                      "                const expectBoolean = (field) => pm.expect(person[field], `Поле ${field}`).to.be.a(\"boolean\");\r",
                      "\r",
                      "                expectNumber(\"id\");\r",
                      "                expectString(\"name\");\r",
                      "                expectString(\"job_title\");\r",
                      "                expectString(\"primary_email\");\r",
                      "                expectString(\"locale\");\r",
                      "                expectString(\"created_at\");\r",
                      "                expectString(\"updated_at\");\r",
                      "                expectString(\"nodeID\");\r",
                      "                expectString(\"information\");\r",
                      "                expectString(\"color_mode\");\r",
                      "                expectString(\"time_zone\");\r",
                      "                expectBoolean(\"time_format_24h\");\r",
                      "                expectBoolean(\"disabled\");\r",
                      "                expectBoolean(\"auto_translation\");\r",
                      "                expectBoolean(\"exclude_team_notifications\");\r",
                      "                expectBoolean(\"guest\");\r",
                      "                expectBoolean(\"vip\");\r",
                      "                expectString(\"play_private_chat_sound\");\r",
                      "                expectString(\"play_support_chat_sound\");\r",
                      "                expectString(\"send_email_notifications\");\r",
                      "                expectString(\"show_notification_popup\");\r",
                      "                expectString(\"show_private_chat_popup\");\r",
                      "                expectString(\"show_support_chat_popup\");\r",
                      "                expectString(\"supportID\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в структуре первого объекта:\", e.message);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "\r",
                      "        if (person.manager) {\r",
                      "            pm.test(\"Проверка manager\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(person.manager.id, \"manager.id\").to.be.a(\"number\");\r",
                      "                    pm.expect(person.manager.name, \"manager.name\").to.be.a(\"string\");\r",
                      "                    pm.expect(person.manager.nodeID, \"manager.nodeID\").to.be.a(\"string\");\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в manager:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "        if (person.organization) {\r",
                      "            pm.test(\"Проверка organization\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(person.organization.id, \"organization.id\").to.be.a(\"number\");\r",
                      "                    pm.expect(person.organization.name, \"organization.name\").to.be.a(\"string\");\r",
                      "                    pm.expect(person.organization.nodeID, \"organization.nodeID\").to.be.a(\"string\");\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в organization:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "        if (person.site) {\r",
                      "            pm.test(\"Проверка site\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(person.site.id, \"site.id\").to.be.a(\"number\");\r",
                      "                    pm.expect(person.site.name, \"site.name\").to.be.a(\"string\");\r",
                      "                    pm.expect(person.site.nodeID, \"site.nodeID\").to.be.a(\"string\");\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в site:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "        if (Array.isArray(person.contacts) && person.contacts.length > 0) {\r",
                      "            const contact = person.contacts[0];\r",
                      "            pm.test(\"Проверка contacts[0]\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(contact.id, \"contacts[0].id\").to.be.a(\"number\");\r",
                      "                    pm.expect(contact.label, \"contacts[0].label\").to.be.a(\"string\");\r",
                      "                    pm.expect(contact.nodeID, \"contacts[0].nodeID\").to.be.a(\"string\");\r",
                      "                    pm.expect(contact, \"contacts[0] должен содержать email или telephone\").to.satisfy(c => c.email || c.telephone);\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в contacts[0]:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "        if (Array.isArray(person.addresses) && person.addresses.length > 0) {\r",
                      "            const address = person.addresses[0];\r",
                      "            pm.test(\"Проверка addresses[0]\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(address.id, \"addresses[0].id\").to.be.a(\"number\");\r",
                      "                    pm.expect(address.label, \"addresses[0].label\").to.be.a(\"string\");\r",
                      "                    pm.expect(address.nodeID, \"addresses[0].nodeID\").to.be.a(\"string\");\r",
                      "                    pm.expect(address.integration, \"addresses[0].integration\").to.be.a(\"boolean\");\r",
                      "\r",
                      "                    [\"address\", \"city\", \"country\", \"state\", \"zip\"].forEach(field => {\r",
                      "                        pm.expect(address, `Поле addresses[0].${field} отсутствует`).to.have.property(field);\r",
                      "                    });\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в addresses[0]:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "        if (person.formats) {\r",
                      "            pm.test(\"Проверка formats\", function () {\r",
                      "                try {\r",
                      "                    pm.expect(person.formats.time, \"formats.time\").to.be.a(\"string\");\r",
                      "                    pm.expect(person.formats.date, \"formats.date\").to.be.a(\"string\");\r",
                      "                    pm.expect(person.formats.datetime, \"formats.datetime\").to.be.a(\"string\");\r",
                      "                } catch (e) {\r",
                      "                    console.error(\"Ошибка в formats:\", e.message);\r",
                      "                    throw e;\r",
                      "                }\r",
                      "            });\r",
                      "        }\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Глобальная ошибка в тесте:\", e.message);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "bb885d52-46b8-4d44-8b7b-53c90e2f8d96",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}sd?telephone=7 (499) 987 2950",
                  "host": [
                    "{{url}}sd"
                  ],
                  "query": [
                    {
                      "key": "telephone",
                      "value": "7 (499) 987 2950"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-bb885d52-46b8-4d44-8b7b-53c90e2f8d96"
            }
          ],
          "id": "f1d6f7bc-9278-4855-890d-f59734d149c9",
          "uid": "32335283-f1d6f7bc-9278-4855-890d-f59734d149c9"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "    pm.environment.set(\"person_pro_product_id\", jsonData.id);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является объектом:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация полей объекта\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка в базовой валидации полей объекта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Доп. проверка organization, если есть\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "                if (jsonData.organization.account) {\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                }\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации organization:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // // Проверка manager, если есть\r",
                      "    // if (jsonData.manager) {\r",
                      "    //     pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "    //         try {\r",
                      "    //             pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "    //             pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    //             pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "    //         } catch (e) {\r",
                      "    //             console.error(\"Ошибка в валидации manager:\", e);\r",
                      "    //             throw e;\r",
                      "    //         }\r",
                      "    //     });\r",
                      "    // }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0e1f7f81-147e-4ddd-9956-1b7944d09c51",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"primary_email\": \"{{$randomExampleEmail}}\",\r\n    \"organization_id\": 4\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people",
                  "host": [
                    "{{url}}people"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0e1f7f81-147e-4ddd-9956-1b7944d09c51"
            }
          ],
          "id": "321b6121-aee4-4dea-8a2f-ef51ae8cf83f",
          "uid": "32335283-321b6121-aee4-4dea-8a2f-ef51ae8cf83f"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "    pm.environment.set(\"person_pro_product_id\", jsonData.id);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является объектом:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация полей объекта\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "            pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка в базовой валидации полей объекта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Доп. проверка organization, если есть\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "                if (jsonData.organization.account) {\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                }\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации organization:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Проверка manager, если есть\r",
                      "    if (jsonData.manager) {\r",
                      "        pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации manager:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ba951a43-671a-4bf8-82b3-2f42d71fbebc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"disabled\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ba951a43-671a-4bf8-82b3-2f42d71fbebc"
            }
          ],
          "id": "32d6276d-94d9-4cf5-8fe8-013651d9a83e",
          "uid": "32335283-32d6276d-94d9-4cf5-8fe8-013651d9a83e"
        },
        {
          "name": "Archive",
          "item": [
            {
              "name": "Archive a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "    pm.environment.set(\"person_pro_product_id\", jsonData.id);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является объектом:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация полей объекта\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "            pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка в базовой валидации полей объекта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Доп. проверка organization, если есть\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "                if (jsonData.organization.account) {\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                }\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации organization:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Проверка manager, если есть\r",
                      "    if (jsonData.manager) {\r",
                      "        pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации manager:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "     // Проверка archived, если есть\r",
                      "    if (jsonData.archived) {\r",
                      "        pm.test(\"Поле archived\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.archived).to.eq(true);\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации archived:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1a1625b3-cc01-471e-b692-bfe888a50aa7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/archive",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "archive"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1a1625b3-cc01-471e-b692-bfe888a50aa7"
            },
            {
              "name": "Trash a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "    pm.environment.set(\"person_pro_product_id\", jsonData.id);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является объектом:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация полей объекта\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "            pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка в базовой валидации полей объекта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Доп. проверка organization, если есть\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "                if (jsonData.organization.account) {\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                }\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации organization:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Проверка manager, если есть\r",
                      "    if (jsonData.manager) {\r",
                      "        pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации manager:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Проверка trashed, если есть\r",
                      "    if (jsonData.trashed) {\r",
                      "        pm.test(\"Поле trashed\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.trashed).to.eq(true);\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации trashed:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "84c64915-27e1-421f-b652-3b073c6f70b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/trash",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "trash"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-84c64915-27e1-421f-b652-3b073c6f70b4"
            },
            {
              "name": "Restore a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log('Ответ:', jsonData);\r",
                      "    pm.environment.set(\"person_pro_product_id\", jsonData.id);\r",
                      "\r",
                      "    pm.test(\"Ответ — объект\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является объектом:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Базовая валидация полей объекта\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.have.property(\"disabled\").that.is.a(\"boolean\");\r",
                      "            pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "            // pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка в базовой валидации полей объекта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // Доп. проверка organization, если есть\r",
                      "    if (jsonData.organization) {\r",
                      "        pm.test(\"Поле organization содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "                if (jsonData.organization.account) {\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "                    pm.expect(jsonData.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                }\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации organization:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    // Проверка manager, если есть\r",
                      "    if (jsonData.manager) {\r",
                      "        pm.test(\"Поле manager содержит ожидаемые поля\", function () {\r",
                      "            try {\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "                pm.expect(jsonData.manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            } catch (e) {\r",
                      "                console.error(\"Ошибка в валидации manager:\", e);\r",
                      "                throw e;\r",
                      "            }\r",
                      "        });\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3c6dbf5d-e709-4315-a307-371d9993781e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/restore",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "restore"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3c6dbf5d-e709-4315-a307-371d9993781e"
            }
          ],
          "id": "a7372abf-b93f-4a59-96a1-35c8824ca3bb",
          "uid": "32335283-a7372abf-b93f-4a59-96a1-35c8824ca3bb"
        }
      ],
      "id": "abb6ff43-ac45-4d0c-ab3f-d26a3eb5384c",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{token}}",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "9348fdb3-3b24-42d6-8ebd-52424ad91cbd",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "3d45de98-7e52-427a-96b5-d5492334013a",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              ""
            ]
          }
        }
      ],
      "uid": "32335283-abb6ff43-ac45-4d0c-ab3f-d26a3eb5384c"
    },
    {
      "name": "Addresses",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add an address to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "pm.environment.set(\"address_id_1\", jsonData.id);\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nullable: address, city, country, state, zip\r",
                      "        [\"address\", \"city\", \"country\", \"state\", \"zip\"].forEach(key => {\r",
                      "            pm.expect(jsonData).to.have.property(key);\r",
                      "        });\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации объекта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f385d147-653e-4499-af39-ecc7b7278cc7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"address\": \"Большой Спасоглинищевский пер., {{$randomInt}}, Москва, 101000\",\r\n    \"city\": \"Москва\",\r\n    \"country\": \"RU\",\r\n    \"integration\": false,\r\n    \"label\": \"home\",\r\n    \"state\": null,\r\n    \"zip\": \"101000\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/addresses",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f385d147-653e-4499-af39-ecc7b7278cc7"
            }
          ],
          "id": "cc5e98ae-e68e-4228-bb45-0273a9da44c2",
          "uid": "32335283-cc5e98ae-e68e-4228-bb45-0273a9da44c2"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all addresses of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "pm.environment.set(\"address_id\", jsonData[0].id);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Валидация первого объекта массива\", function () {\r",
                      "    try {\r",
                      "        const item = jsonData[0];\r",
                      "        pm.expect(item).to.be.an(\"object\");\r",
                      "\r",
                      "        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(item).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(item).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(item).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nullable: address, city, country, state, zip\r",
                      "        [\"address\", \"city\", \"country\", \"state\", \"zip\"].forEach(key => {\r",
                      "            pm.expect(item).to.have.property(key); // допускаем null\r",
                      "        });\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка в валидации первого объекта массива:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "371e93cf-19b0-4526-98e5-2821687a8747",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/addresses",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-371e93cf-19b0-4526-98e5-2821687a8747"
            },
            {
              "name": "Get a single address of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nullable: address, city, country, state, zip\r",
                      "        [\"address\", \"city\", \"country\", \"state\", \"zip\"].forEach(key => {\r",
                      "            pm.expect(jsonData).to.have.property(key);\r",
                      "        });\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации объекта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1465d699-6546-409b-a48f-1b28fc56957d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/addresses/{{address_id}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses",
                    "{{address_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1465d699-6546-409b-a48f-1b28fc56957d"
            }
          ],
          "id": "424ca727-83c7-4fb3-a556-0de3c46d8332",
          "uid": "32335283-424ca727-83c7-4fb3-a556-0de3c46d8332"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update an address of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"label\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData.label).to.eq('mailing');\r",
                      "    } catch (e) {\r",
                      "        console.error(\"label не обновлен:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nullable: address, city, country, state, zip\r",
                      "        [\"address\", \"city\", \"country\", \"state\", \"zip\"].forEach(key => {\r",
                      "            pm.expect(jsonData).to.have.property(key);\r",
                      "        });\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации объекта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2a8ca90d-fa18-4b04-ae01-8ae09c549732",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"address\": \"Большой Спасоглинищевский пер., {{$randomInt}}, Москва, 101000\",\r\n    \"city\": \"Казань\",\r\n    \"country\": \"RU\",\r\n    \"integration\": false,\r\n    \"label\": \"mailing\",\r\n    \"state\": null,\r\n    \"zip\": \"101001\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/addresses/{{address_id_1}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses",
                    "{{address_id_1}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2a8ca90d-fa18-4b04-ae01-8ae09c549732"
            }
          ],
          "id": "55a2a309-3ebd-4cd4-81f0-c6e654f7bde6",
          "uid": "32335283-55a2a309-3ebd-4cd4-81f0-c6e654f7bde6"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove an address from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "    console.log(\"Статус код ответа: 204 - No Content\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                    "exec": [
                      "// Получаем вчерашнюю дату\r",
                      "const yesterday = new Date();\r",
                      "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                      "\r",
                      "// Форматируем дату в YYYY-MM-DD\r",
                      "const year = yesterday.getFullYear();\r",
                      "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                      "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                      "\r",
                      "const formattedDate = `${year}-${month}-${day}`;\r",
                      "\r",
                      "// Сохраняем в переменную Postman\r",
                      "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                      "\r",
                      "// Логируем для проверки (опционально)\r",
                      "console.log(\"Вчерашняя дата: \", formattedDate);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a2ec8e73-d3f1-4c29-809b-d3f79200f8f6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/addresses/{{address_id_1}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses",
                    "{{address_id_1}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a2ec8e73-d3f1-4c29-809b-d3f79200f8f6"
            },
            {
              "name": "Get a single address of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "    console.log(\"Статус код ответа: 404 - Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "bfbba784-693b-4fa7-9baa-10fb078d6239",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/addresses/{{address_id_1}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "addresses",
                    "{{address_id_1}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-bfbba784-693b-4fa7-9baa-10fb078d6239"
            }
          ],
          "id": "8213f8d9-6827-4dfa-8a31-19016286ba49",
          "uid": "32335283-8213f8d9-6827-4dfa-8a31-19016286ba49"
        }
      ],
      "id": "628ebb5f-50d3-4fa0-9301-18115a9830eb",
      "uid": "32335283-628ebb5f-50d3-4fa0-9301-18115a9830eb"
    },
    {
      "name": "Configuration Item Coverages",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List configuration item coverages of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const asset = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(asset).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(asset).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"software\").that.is.a(\"boolean\");\r",
                      "        pm.expect(asset).to.have.property(\"rule_set\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"sourceID\"); // может быть null\r",
                      "\r",
                      "        // Проверка product\r",
                      "        pm.expect(asset).to.have.property(\"product\").that.is.an(\"object\");\r",
                      "        const product = asset.product;\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"brand\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // support_team\r",
                      "        pm.expect(asset).to.have.property(\"support_team\").that.is.an(\"object\");\r",
                      "        const team = asset.support_team;\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service + provider\r",
                      "        pm.expect(asset).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "        const service = asset.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Даты\r",
                      "        pm.expect(asset).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nodeID\r",
                      "        pm.expect(asset).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры объекта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ef35e53a-6b04-446a-a0dd-b02f0ca8030e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/ci_coverages",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "ci_coverages"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ef35e53a-6b04-446a-a0dd-b02f0ca8030e"
            }
          ],
          "id": "c68a5e76-be8a-4b12-877a-ccde92c0fde7",
          "uid": "32335283-c68a5e76-be8a-4b12-877a-ccde92c0fde7"
        }
      ],
      "id": "1c3d07eb-e41b-4485-81f5-6a8b46f35cf1",
      "uid": "32335283-1c3d07eb-e41b-4485-81f5-6a8b46f35cf1"
    },
    {
      "name": "Configuration Items",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List configuration items of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const asset = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(asset).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(asset).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"software\").that.is.a(\"boolean\");\r",
                      "        pm.expect(asset).to.have.property(\"rule_set\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"sourceID\"); // может быть null\r",
                      "\r",
                      "        // Проверка product\r",
                      "        pm.expect(asset).to.have.property(\"product\").that.is.an(\"object\");\r",
                      "        const product = asset.product;\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"brand\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // support_team\r",
                      "        pm.expect(asset).to.have.property(\"support_team\").that.is.an(\"object\");\r",
                      "        const team = asset.support_team;\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service + provider\r",
                      "        pm.expect(asset).to.have.property(\"service\").that.is.an(\"object\");\r",
                      "        const service = asset.service;\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Даты\r",
                      "        pm.expect(asset).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(asset).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // nodeID\r",
                      "        pm.expect(asset).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры объекта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "580d346d-e3dd-4317-9075-107df3369ec4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/cis",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-580d346d-e3dd-4317-9075-107df3369ec4"
            }
          ],
          "id": "5b314d69-1b0c-4547-96d0-b9c8acf8edc3",
          "uid": "32335283-5b314d69-1b0c-4547-96d0-b9c8acf8edc3"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a configuration item to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200 и пустой объект\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"object\", \"Ожидался объект в ответе\");\r",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(0, \"Ожидался пустой объект\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "79eef157-f4f2-4423-9da6-561c0e639a1f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/cis/2246",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "cis",
                    "2246"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-79eef157-f4f2-4423-9da6-561c0e639a1f"
            },
            {
              "name": "List configuration items of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив содержит объект с id = 2246\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 2246);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 2246 не найден в массиве, а должен был. так как с создавал связь запросом ранее\").to.be.true;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "65c39cb6-c9a3-4d28-98d6-72bbf13ca3f6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/cis",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-65c39cb6-c9a3-4d28-98d6-72bbf13ca3f6"
            }
          ],
          "id": "3ed8c2b1-bb0b-41ca-b017-bb8e17e01a65",
          "uid": "32335283-3ed8c2b1-bb0b-41ca-b017-bb8e17e01a65"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a configuration item from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200 и пустой объект\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "08ae1e74-caf6-4c68-ad2e-7414d9007a03",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/cis/2246",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "cis",
                    "2246"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-08ae1e74-caf6-4c68-ad2e-7414d9007a03"
            },
            {
              "name": "List configuration items of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив не содержит объект с id = 2246\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 2246);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 2246 найден в массиве, а не должен был. так как с удалял связь запросом ранее\").to.be.false;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ad46cf9b-2ec6-4fe6-a2f6-ade6a36d5bc1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/cis",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ad46cf9b-2ec6-4fe6-a2f6-ade6a36d5bc1"
            }
          ],
          "id": "b19b32d0-5450-474e-ab1a-f54ec66161af",
          "uid": "32335283-b19b32d0-5450-474e-ab1a-f54ec66161af"
        }
      ],
      "id": "b74100da-6cde-474e-85ce-35fb832e88f0",
      "uid": "32335283-b74100da-6cde-474e-85ce-35fb832e88f0"
    },
    {
      "name": "Contacts",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a contact to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "pm.environment.set(\"contact_id_2\", jsonData.id); // Сохранение id контакта в переменную окружения contact_id\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта (контакт)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        // telephone может присутствовать\r",
                      "        if (\"telephone\" in jsonData) {\r",
                      "            pm.expect(jsonData.telephone).to.be.a(\"string\");\r",
                      "            pm.expect(jsonData.telephone).to.eq(\"7 (926) 181-59-85\").that.is.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // email тоже может быть, но в этом случае его нет\r",
                      "        if (\"email\" in jsonData) {\r",
                      "            pm.expect(jsonData.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры контакта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ac2d7a4c-92cb-4be2-8f11-a2631b9b1c94",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"mobile\",\r\n    \"telephone\": \"7 (926) 181-59-85\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/contacts",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ac2d7a4c-92cb-4be2-8f11-a2631b9b1c94"
            }
          ],
          "id": "ce65eac9-f764-468c-b702-34dc61abc2c5",
          "uid": "32335283-ce65eac9-f764-468c-b702-34dc61abc2c5"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all contacts of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.test(\"Ответ — массив\", function () {\r",
                      "        try {\r",
                      "            pm.expect(jsonData).to.be.an(\"array\");\r",
                      "            pm.expect(jsonData.length).to.be.above(0);\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    const contact = jsonData[0];\r",
                      "\r",
                      "    pm.test(\"Проверка структуры первого объекта (контакт)\", function () {\r",
                      "        try {\r",
                      "            pm.expect(contact).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(contact).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "            pm.expect(contact).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "            // Поля telephone и email могут быть, но не обязаны\r",
                      "            if (\"telephone\" in contact) {\r",
                      "                pm.expect(contact.telephone).to.be.a(\"string\");\r",
                      "            }\r",
                      "\r",
                      "            if (\"email\" in contact) {\r",
                      "                pm.expect(contact.email).to.be.a(\"string\");\r",
                      "            }\r",
                      "\r",
                      "        } catch (e) {\r",
                      "            console.error(\"Ошибка валидации структуры контакта:\", e);\r",
                      "            throw e;\r",
                      "        }\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7e8b3b3c-2347-4178-b19f-bfeb79b175d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/contacts",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7e8b3b3c-2347-4178-b19f-bfeb79b175d7"
            },
            {
              "name": "Get a single contact of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта (контакт)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        // telephone может присутствовать\r",
                      "        if (\"telephone\" in jsonData) {\r",
                      "            pm.expect(jsonData.telephone).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // email тоже может быть, но в этом случае его нет\r",
                      "        if (\"email\" in jsonData) {\r",
                      "            pm.expect(jsonData.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры контакта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "03972cf7-5be7-42d0-96a1-b89014b3c959",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/contacts/{{contact_id_2}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts",
                    "{{contact_id_2}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-03972cf7-5be7-42d0-96a1-b89014b3c959"
            }
          ],
          "id": "982ed17a-2b0a-498a-8da4-9b2382aa606a",
          "uid": "32335283-982ed17a-2b0a-498a-8da4-9b2382aa606a"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a contact of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "pm.environment.set(\"contact_id_2\", jsonData.id); // Сохранение id контакта в переменную окружения contact_id\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка структуры объекта (контакт)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "\r",
                      "        // telephone может присутствовать\r",
                      "        if (\"telephone\" in jsonData) {\r",
                      "            pm.expect(jsonData.telephone).to.be.a(\"string\");\r",
                      "            pm.expect(jsonData.telephone).to.eq(\"7 (926) 181-59-90\").that.is.a(\"string\");\r",
                      "            pm.expect(jsonData.label).to.eq(\"home\").that.is.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // email тоже может быть, но в этом случае его нет\r",
                      "        if (\"email\" in jsonData) {\r",
                      "            pm.expect(jsonData.email).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры контакта:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "9979b8b3-fe9f-4352-b48a-1a8e76450e5f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"home\",\r\n    \"telephone\": \"7 (926) 181-59-90\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/contacts/{{contact_id_2}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts",
                    "{{contact_id_2}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-9979b8b3-fe9f-4352-b48a-1a8e76450e5f"
            }
          ],
          "id": "1cba7911-f073-4271-8946-a0b968338281",
          "uid": "32335283-1cba7911-f073-4271-8946-a0b968338281"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a contact from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "64e5634f-f1e3-4d58-9b0c-b67b91b101e2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"home\",\r\n    \"telephone\": \"7 (926) 181-59-90\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/contacts/{{contact_id_2}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts",
                    "{{contact_id_2}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-64e5634f-f1e3-4d58-9b0c-b67b91b101e2"
            },
            {
              "name": "Get a single contact of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "14b019f1-cc66-4b44-b7e1-5b18530f7f06",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"label\": \"home\",\r\n    \"telephone\": \"7 (926) 181-59-90\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}people/581/contacts/{{contact_id_2}}",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "contacts",
                    "{{contact_id_2}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-14b019f1-cc66-4b44-b7e1-5b18530f7f06"
            }
          ],
          "id": "6059458a-b585-40c8-9bfb-74038f3fe23b",
          "uid": "32335283-6059458a-b585-40c8-9bfb-74038f3fe23b"
        }
      ],
      "id": "6517582e-ac53-4033-be03-866d72b2a34f",
      "uid": "32335283-6517582e-ac53-4033-be03-866d72b2a34f"
    },
    {
      "name": "Me",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all details of the authenticated person.",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — объект\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является объектом:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка основных полей профиля\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"job_title\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"locale\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"color_mode\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"supportID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"vip\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"guest\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации основных полей профиля:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка addresses — массив адресов\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.have.property(\"addresses\").that.is.an(\"array\");\r",
                      "        if (jsonData.addresses.length > 0) {\r",
                      "            const addr = jsonData.addresses[0];\r",
                      "            pm.expect(addr).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "            pm.expect(addr).to.have.property(\"label\").that.is.a(\"string\");\r",
                      "            pm.expect(addr).to.have.property(\"integration\").that.is.a(\"boolean\");\r",
                      "            pm.expect(addr).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "            // Опциональные поля\r",
                      "            if (addr.address !== null) pm.expect(addr.address).to.be.a(\"string\");\r",
                      "            if (addr.city !== null) pm.expect(addr.city).to.be.a(\"string\");\r",
                      "            if (addr.country !== null) pm.expect(addr.country).to.be.a(\"string\");\r",
                      "            if (addr.zip !== null) pm.expect(addr.zip).to.be.a(\"string\");\r",
                      "            if (addr.state !== null) pm.expect(addr.state).to.be.a(\"string\");\r",
                      "        }\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации массива addresses:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка организации\", function () {\r",
                      "    try {\r",
                      "        const org = jsonData.organization;\r",
                      "        pm.expect(org).to.be.an(\"object\");\r",
                      "        pm.expect(org).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(org).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(org).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(org.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(org.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации блока organization:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка менеджера\", function () {\r",
                      "    try {\r",
                      "        const manager = jsonData.manager;\r",
                      "        pm.expect(manager).to.be.an(\"object\");\r",
                      "        pm.expect(manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(manager).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(manager).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(manager.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(manager.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации блока manager:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Проверка site\", function () {\r",
                      "    try {\r",
                      "        const site = jsonData.site;\r",
                      "        pm.expect(site).to.be.an(\"object\");\r",
                      "        pm.expect(site).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(site).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(site).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(site).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(site.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(site.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации блока site:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "66c98700-d25a-479f-8d94-6f3384c90375",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}me",
                  "host": [
                    "{{url}}me"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-66c98700-d25a-479f-8d94-6f3384c90375"
            },
            {
              "name": "List all items of the authenticated person that are in his/her inbox.",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const item = jsonData[0];\r",
                      "pm.test(\"Проверка структуры первого элемента массива (request)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"request\").that.is.an(\"object\");\r",
                      "\r",
                      "        const req = item.request;\r",
                      "        pm.expect(req).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(req).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"href\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"subject\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"new_assignment\").that.is.a(\"boolean\");\r",
                      "        pm.expect(req).to.have.property(\"impact\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"next_target_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // team\r",
                      "        pm.expect(req).to.have.property(\"team\").that.is.an(\"object\");\r",
                      "        const team = req.team;\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // member\r",
                      "        pm.expect(req).to.have.property(\"member\").that.is.an(\"object\");\r",
                      "        const member = req.member;\r",
                      "        pm.expect(member).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(member).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(member).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // icon (может быть null)\r",
                      "        pm.expect(req).to.have.property(\"icon\");\r",
                      "        if (req.icon !== null) {\r",
                      "            pm.expect(req.icon).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // for — requester и organization\r",
                      "        pm.expect(req).to.have.property(\"for\").that.is.an(\"object\");\r",
                      "        const forBlock = req.for;\r",
                      "\r",
                      "        pm.expect(forBlock).to.have.property(\"requester\").that.is.an(\"object\");\r",
                      "        const requester = forBlock.requester;\r",
                      "        pm.expect(requester).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(requester).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(requester).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(forBlock).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        const org = forBlock.organization;\r",
                      "        pm.expect(org).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(org).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры запроса:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "774c4850-9011-4964-9c89-a986e0b65ec7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}me/my_inbox",
                  "host": [
                    "{{url}}me"
                  ],
                  "path": [
                    "my_inbox"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-774c4850-9011-4964-9c89-a986e0b65ec7"
            },
            {
              "name": "List all items of the authenticated person that are in his/her team’s inbox.",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const item = jsonData[0];\r",
                      "pm.test(\"Проверка структуры первого элемента массива (request)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(item).to.have.property(\"request\").that.is.an(\"object\");\r",
                      "\r",
                      "        const req = item.request;\r",
                      "        pm.expect(req).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(req).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"href\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"subject\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"new_assignment\").that.is.a(\"boolean\");\r",
                      "        pm.expect(req).to.have.property(\"impact\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(req).to.have.property(\"next_target_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // team\r",
                      "        pm.expect(req).to.have.property(\"team\").that.is.an(\"object\");\r",
                      "        const team = req.team;\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // member\r",
                      "        pm.expect(req).to.have.property(\"member\").that.is.an(\"object\");\r",
                      "        const member = req.member;\r",
                      "        pm.expect(member).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(member).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(member).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // icon (может быть null)\r",
                      "        pm.expect(req).to.have.property(\"icon\");\r",
                      "        if (req.icon !== null) {\r",
                      "            pm.expect(req.icon).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "        // for — requester и organization\r",
                      "        pm.expect(req).to.have.property(\"for\").that.is.an(\"object\");\r",
                      "        const forBlock = req.for;\r",
                      "\r",
                      "        pm.expect(forBlock).to.have.property(\"requester\").that.is.an(\"object\");\r",
                      "        const requester = forBlock.requester;\r",
                      "        pm.expect(requester).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(requester).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(requester).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        pm.expect(forBlock).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        const org = forBlock.organization;\r",
                      "        pm.expect(org).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(org).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(org).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры запроса:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "95cb6a4d-c710-4a50-a956-9e2078c83964",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}me/my_teams_inbox",
                  "host": [
                    "{{url}}me"
                  ],
                  "path": [
                    "my_teams_inbox"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-95cb6a4d-c710-4a50-a956-9e2078c83964"
            },
            {
              "name": "Requests Requested By or For Me",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e.message);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const incident = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого инцидента\", function () {\r",
                      "    try {\r",
                      "        const expectType = (obj, key, type) => {\r",
                      "            const actual = typeof obj[key];\r",
                      "            if (obj[key] === null) {\r",
                      "                throw new Error(`Свойство '${key}' ожидалось типа '${type}', но пришло null`);\r",
                      "            }\r",
                      "            if (type === \"array\" && !Array.isArray(obj[key])) {\r",
                      "                throw new Error(`Свойство '${key}' ожидалось как массив, но пришло '${actual}'`);\r",
                      "            }\r",
                      "            if (type !== \"array\" && actual !== type) {\r",
                      "                throw new Error(`Свойство '${key}' ожидалось типа '${type}', а пришло '${actual}'`);\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        expectType(incident, \"id\", \"number\");\r",
                      "        expectType(incident, \"subject\", \"string\");\r",
                      "        expectType(incident, \"category\", \"string\");\r",
                      "        expectType(incident, \"status\", \"string\");\r",
                      "        expectType(incident, \"created_at\", \"string\");\r",
                      "\r",
                      "        // team\r",
                      "        if (!incident.team || typeof incident.team !== \"object\") {\r",
                      "            throw new Error(\"Свойство 'team' отсутствует или не является объектом\");\r",
                      "        }\r",
                      "\r",
                      "        const team = incident.team;\r",
                      "        expectType(team, \"id\", \"number\");\r",
                      "        expectType(team, \"name\", \"string\");\r",
                      "        expectType(team, \"nodeID\", \"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры инцидента:\", e.message);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\", incident);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b0feda7e-9917-4d7b-9d61-bc62d13f3b03",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}me/requested_by_or_for_me",
                  "host": [
                    "{{url}}me"
                  ],
                  "path": [
                    "requested_by_or_for_me"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b0feda7e-9917-4d7b-9d61-bc62d13f3b03"
            }
          ],
          "id": "d43fe55c-7a28-40af-ac38-ec8718658782",
          "uid": "32335283-d43fe55c-7a28-40af-ac38-ec8718658782"
        }
      ],
      "id": "3d6edd51-7a75-4b52-a50c-9c91dd844caa",
      "uid": "32335283-3d6edd51-7a75-4b52-a50c-9c91dd844caa"
    },
    {
      "name": "Permissions",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List permissions of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const accountRole = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта (account + roles)\", function () {\r",
                      "    try {\r",
                      "        // account\r",
                      "        pm.expect(accountRole).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        const account = accountRole.account;\r",
                      "        pm.expect(account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // roles\r",
                      "        pm.expect(accountRole).to.have.property(\"roles\").that.is.an(\"array\");\r",
                      "        pm.expect(accountRole.roles.length).to.be.above(0);\r",
                      "        accountRole.roles.forEach((role, index) => {\r",
                      "            pm.expect(role, `Роль на позиции ${index}`).to.be.a(\"string\");\r",
                      "        });\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры account/roles:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "052f9916-c7c4-4b10-b48e-399e59ce5107",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/permissions",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "permissions"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-052f9916-c7c4-4b10-b48e-399e59ce5107"
            },
            {
              "name": "List permissions of a person for a specific account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — объект с account и roles\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        // account\r",
                      "        pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // roles\r",
                      "        pm.expect(jsonData).to.have.property(\"roles\").that.is.an(\"array\");\r",
                      "        pm.expect(jsonData.roles.length).to.be.above(0);\r",
                      "        jsonData.roles.forEach((role, index) => {\r",
                      "            pm.expect(role, `Роль на позиции ${index}`).to.be.a(\"string\");\r",
                      "        });\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры account/roles:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "47b0e908-0210-432c-929b-c4b76626a06a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/permissions/dc",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "permissions",
                    "dc"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-47b0e908-0210-432c-929b-c4b76626a06a"
            },
            {
              "name": "List people of account with specific roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив пользователей\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const user = jsonData[0];\r",
                      "console.log(\"Первый пользователь:\", user);\r",
                      "\r",
                      "pm.test(\"Структура пользователя\", function () {\r",
                      "    try {\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(user).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // account\r",
                      "        pm.expect(user).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(user.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // organization\r",
                      "        pm.expect(user).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        pm.expect(user.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(user.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(user.organization).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(user.organization.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user.organization.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // site\r",
                      "        pm.expect(user).to.have.property(\"site\").that.is.an(\"object\");\r",
                      "        pm.expect(user.site).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(user.site).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(user.site).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(user.site.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user.site.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // manager\r",
                      "        pm.expect(user).to.have.property(\"manager\").that.is.an(\"object\");\r",
                      "        pm.expect(user.manager).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(user.manager).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(user.manager).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(user.manager.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user.manager.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры пользователя:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "86fda94a-decb-4e59-9b24-f457890936cc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people?roles=directory_administrator",
                  "host": [
                    "{{url}}people"
                  ],
                  "query": [
                    {
                      "key": "roles",
                      "value": "directory_administrator"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-86fda94a-decb-4e59-9b24-f457890936cc"
            }
          ],
          "id": "56039ddc-4d6a-4d48-9488-8d6175d9d2ae",
          "uid": "32335283-56039ddc-4d6a-4d48-9488-8d6175d9d2ae"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add roles to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Валидируем структуру объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        // Проверка account\r",
                      "        pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.account.id).to.eq(\"dc\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Проверка roles\r",
                      "        pm.expect(jsonData).to.have.property(\"roles\").that.is.an(\"array\");\r",
                      "        pm.expect(jsonData.roles.length).to.be.above(0);\r",
                      "        pm.expect(jsonData.roles[0]).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.roles[0]).to.eq(\"specialist\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры account + roles:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "64f63a63-3a52-4ca5-91bc-3ca1f78bfedd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/permissions/dc?roles=specialist",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "permissions",
                    "dc"
                  ],
                  "query": [
                    {
                      "key": "roles",
                      "value": "specialist"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-64f63a63-3a52-4ca5-91bc-3ca1f78bfedd"
            }
          ],
          "id": "dde31025-cac3-4992-8be0-9a74963b378b",
          "uid": "32335283-dde31025-cac3-4992-8be0-9a74963b378b"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Overwrite the roles of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\", JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Валидация структуры объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        // Проверка account\r",
                      "        pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.account.id).to.eq(\"dc\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Проверка roles с учетом их возможного расположения\r",
                      "        if (jsonData.hasOwnProperty(\"roles\")) {\r",
                      "            // Если roles находится на верхнем уровне\r",
                      "            pm.expect(jsonData.roles).to.be.an(\"array\");\r",
                      "            pm.expect(jsonData.roles.length).to.be.above(0);\r",
                      "            \r",
                      "            // Проверяем наличие необходимых ролей\r",
                      "            pm.expect(jsonData.roles).to.include(\"account_administrator\");\r",
                      "            pm.expect(jsonData.roles).to.include(\"specialist\");\r",
                      "            \r",
                      "        } else if (jsonData.account && jsonData.account.hasOwnProperty(\"roles\")) {\r",
                      "            // Если roles находится внутри account\r",
                      "            pm.expect(jsonData.account.roles).to.be.an(\"array\");\r",
                      "            pm.expect(jsonData.account.roles.length).to.be.above(0);\r",
                      "            \r",
                      "            // Проверяем наличие необходимых ролей\r",
                      "            pm.expect(jsonData.account.roles).to.include(\"account_administrator\");\r",
                      "            pm.expect(jsonData.account.roles).to.include(\"specialist\");\r",
                      "            \r",
                      "        } else {\r",
                      "            throw new Error(\"Массив roles не найден в ожидаемых местах\");\r",
                      "        }\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры account + roles:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "cefb18bd-33f3-43bb-882d-4454ba3c3f41",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/permissions/dc?roles=account_administrator,specialist",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "permissions",
                    "dc"
                  ],
                  "query": [
                    {
                      "key": "roles",
                      "value": "account_administrator,specialist"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-cefb18bd-33f3-43bb-882d-4454ba3c3f41"
            }
          ],
          "id": "36dc8135-59b5-495b-b77f-03aab5d1d242",
          "uid": "32335283-36dc8135-59b5-495b-b77f-03aab5d1d242"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Revoke roles from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ecebc143-2816-40cf-a622-63ad866cf65c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/permissions/dc?roles=specialist",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "permissions",
                    "dc"
                  ],
                  "query": [
                    {
                      "key": "roles",
                      "value": "specialist"
                    }
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ecebc143-2816-40cf-a622-63ad866cf65c"
            },
            {
              "name": "List permissions of a person for a specific account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Валидируем структуру объекта\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        // Проверка account\r",
                      "        pm.expect(jsonData).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.account.id).to.eq(\"dc\");\r",
                      "        pm.expect(jsonData.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // Проверка roles\r",
                      "        pm.expect(jsonData).to.have.property(\"roles\").that.is.an(\"array\");\r",
                      "        pm.expect(jsonData.roles.length).to.be.above(0);\r",
                      "        pm.expect(jsonData.roles[0]).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.roles[0]).to.eq(\"account_administrator\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры account + roles:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7dc6abf5-576e-49a0-9b03-2bb3ef7141b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/{{person_pro_product_id}}/permissions/dc",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "{{person_pro_product_id}}",
                    "permissions",
                    "dc"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7dc6abf5-576e-49a0-9b03-2bb3ef7141b0"
            }
          ],
          "id": "7a3f24fe-732a-43c3-bfc5-70a1087e34da",
          "uid": "32335283-7a3f24fe-732a-43c3-bfc5-70a1087e34da"
        }
      ],
      "id": "ca8bce68-10b0-4376-b6d3-bec7ee4a60a4",
      "uid": "32335283-ca8bce68-10b0-4376-b6d3-bec7ee4a60a4"
    },
    {
      "name": "Service Coverages",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service coverages of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним элементом\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или он пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const service = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта (Услуги)\", function () {\r",
                      "    try {\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // provider — объект\r",
                      "        pm.expect(service).to.have.property(\"provider\").that.is.an(\"object\");\r",
                      "        pm.expect(service.provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service.provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service.provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(service.provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(service.provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service.provider).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // support_team — объект\r",
                      "        pm.expect(service).to.have.property(\"support_team\").that.is.an(\"object\");\r",
                      "        pm.expect(service.support_team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service.support_team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service.support_team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры Услуги:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "da05b6ae-a35a-42fe-a7fd-88de5b88340b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/service_coverages",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "service_coverages"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-da05b6ae-a35a-42fe-a7fd-88de5b88340b"
            }
          ],
          "id": "dbb9e1af-730b-4b48-b791-2df16898b340",
          "uid": "32335283-dbb9e1af-730b-4b48-b791-2df16898b340"
        }
      ],
      "id": "8f85ac63-0d3a-4f67-a1a5-c6d2b4cae5a1",
      "uid": "32335283-8f85ac63-0d3a-4f67-a1a5-c6d2b4cae5a1"
    },
    {
      "name": "Service Instance Coverages",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service instance coverages of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним элементом\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или он пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const instance = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого service instance\", function () {\r",
                      "    try {\r",
                      "        pm.expect(instance).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(instance).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(instance).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(instance).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(instance).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(instance).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(instance).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service — объект\r",
                      "        const service = instance.service;\r",
                      "        pm.expect(service).to.be.an(\"object\");\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service.provider — объект\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.be.an(\"object\");\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"account\").that.is.an(\"object\");\r",
                      "        pm.expect(provider.account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(provider.account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "        // support_team — объект\r",
                      "        const team = instance.support_team;\r",
                      "        pm.expect(team).to.be.an(\"object\");\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации service instance:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b29ac2ed-8633-4ca3-b5b0-16e7142ced02",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/service_instance_coverages",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "service_instance_coverages"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b29ac2ed-8633-4ca3-b5b0-16e7142ced02"
            }
          ],
          "id": "0dc08405-b6bb-4bb3-962c-b1539c5f0ff3",
          "uid": "32335283-0dc08405-b6bb-4bb3-962c-b1539c5f0ff3"
        }
      ],
      "id": "14dba315-a628-4776-b338-77b0a0e75441",
      "uid": "32335283-14dba315-a628-4776-b338-77b0a0e75441"
    },
    {
      "name": "SLA coverages",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List SLA coverages of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним элементом\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или он пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const sla = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого SLA\", function () {\r",
                      "    try {\r",
                      "        pm.expect(sla).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(sla).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(sla).to.have.property(\"status\").that.is.a(\"string\");\r",
                      "        pm.expect(sla).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(sla).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(sla).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service_offering\r",
                      "        const offering = sla.service_offering;\r",
                      "        pm.expect(offering).to.be.an(\"object\");\r",
                      "        pm.expect(offering).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(offering).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(offering).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // service\r",
                      "        const service = offering.service;\r",
                      "        pm.expect(service).to.be.an(\"object\");\r",
                      "        pm.expect(service).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(service).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"localized_name\").that.is.a(\"string\");\r",
                      "        pm.expect(service).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // provider\r",
                      "        const provider = service.provider;\r",
                      "        pm.expect(provider).to.be.an(\"object\");\r",
                      "        pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(provider).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // account\r",
                      "        const account = provider.account;\r",
                      "        pm.expect(account).to.be.an(\"object\");\r",
                      "        pm.expect(account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации SLA:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "657c3c01-491b-48ac-9f13-5e15770c5ec1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/sla_coverages",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "sla_coverages"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-657c3c01-491b-48ac-9f13-5e15770c5ec1"
            }
          ],
          "id": "30bc2845-1b7f-45ff-8351-b84d9d429e7d",
          "uid": "32335283-30bc2845-1b7f-45ff-8351-b84d9d429e7d"
        }
      ],
      "id": "a0a7776f-e068-448d-8847-5230d87020cf",
      "uid": "32335283-a0a7776f-e068-448d-8847-5230d87020cf"
    },
    {
      "name": "Teams",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all teams of a person with a specific ID.",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним элементом\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ответ не является массивом или он пуст:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const team = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первой команды\", function () {\r",
                      "    try {\r",
                      "        pm.expect(team).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(team).to.have.property(\"sourceID\"); // может быть null\r",
                      "        pm.expect(team).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(team).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации команды:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "fdc3fc9b-00df-4596-a17e-30f8a48fd712",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/teams",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "teams"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-fdc3fc9b-00df-4596-a17e-30f8a48fd712"
            }
          ],
          "id": "3e33bd5c-f9c3-427c-bf34-3a60f52b1f4a",
          "uid": "32335283-3e33bd5c-f9c3-427c-bf34-3a60f52b1f4a"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a team to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200 и пустой объект\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"object\", \"Ожидался объект в ответе\");\r",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(0, \"Ожидался пустой объект\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1905f2c6-bd18-481b-adc3-930803beeeea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/teams/43",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "teams",
                    "43"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1905f2c6-bd18-481b-adc3-930803beeeea"
            },
            {
              "name": "List all teams of a person with a specific ID. Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив содержит объект с id = 43\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 43);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 43 не найден в массиве, а должен был. так как с создавал связь запросом ранее\").to.be.true;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f09e9448-e21b-43cc-a0c9-8420ab538ec3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/teams",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "teams"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f09e9448-e21b-43cc-a0c9-8420ab538ec3"
            }
          ],
          "id": "0bc50366-8678-4aa3-a91a-07df23b1a0dd",
          "uid": "32335283-0bc50366-8678-4aa3-a91a-07df23b1a0dd"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a team from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// pm.test(\"Статус 204 и пустой объект\", function () {\r",
                      "//     pm.response.to.have.status(204);\r",
                      "// });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8095f3db-f8fa-44ec-90e8-2a8fdd975b7d",
                    "exec": [
                      "// // Пауза на 2 секунды\r",
                      "// pm.sendRequest({\r",
                      "//     url: \"https://postman-echo.com/delay/5\", // Эхо-сервис с задержкой\r",
                      "//     method: \"GET\"\r",
                      "// }, function (err, res) {\r",
                      "//     console.log(\"Пауза завершена (2 секунды)\");\r",
                      "// });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b83d67b8-0942-416e-9ca9-b2bf99f26d88",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/teams/43",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "teams",
                    "43"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b83d67b8-0942-416e-9ca9-b2bf99f26d88"
            },
            {
              "name": "List all teams of a person with a specific ID. Copy 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив не содержит объект с id = 43\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 43);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 43 найден в массиве, а не должен был. так как удалял связь запросом ранее\").to.be.false;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e9d671a4-2dc0-4084-a959-7e8f4e235f13",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/teams",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "teams"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e9d671a4-2dc0-4084-a959-7e8f4e235f13"
            }
          ],
          "id": "caff85b5-b5a6-4173-a43e-848450d5ca35",
          "uid": "32335283-caff85b5-b5a6-4173-a43e-848450d5ca35"
        }
      ],
      "id": "adb4f85f-afda-481d-9849-65ae7598849d",
      "uid": "32335283-adb4f85f-afda-481d-9849-65ae7598849d"
    },
    {
      "name": "Skill Pools",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all skill pools of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним элементом\", function () {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка: ответ не массив или пустой\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "const skillPool = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого skill pool\", function () {\r",
                      "    try {\r",
                      "        pm.expect(skillPool).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(skillPool).to.have.property(\"sourceID\"); // может быть null\r",
                      "        pm.expect(skillPool).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(skillPool).to.have.property(\"created_at\").that.is.a(\"string\");\r",
                      "        pm.expect(skillPool).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
                      "        pm.expect(skillPool).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "    } catch (e) {\r",
                      "        console.error(\"Ошибка валидации структуры skill pool:\", e);\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c1b10362-9ba9-42f0-a427-fe560a574637",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/745/skill_pools",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "745",
                    "skill_pools"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c1b10362-9ba9-42f0-a427-fe560a574637"
            }
          ],
          "id": "e540a901-6e18-4300-b98e-e49018cf49b9",
          "uid": "32335283-e540a901-6e18-4300-b98e-e49018cf49b9"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a skill pool to a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200 и пустой объект\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"object\", \"Ожидался объект в ответе\");\r",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(0, \"Ожидался пустой объект\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "acfeb737-e658-44fc-a36c-6d70d3731a06",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/skill_pools/2",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "skill_pools",
                    "2"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-acfeb737-e658-44fc-a36c-6d70d3731a06"
            },
            {
              "name": "List all skill pools of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив содержит объект с id = 2\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 2);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 2 не найден в массиве, а должен был. так как создавал связь запросом ранее\").to.be.true;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7b8efde4-c20b-4a38-84f2-0f66a53b94c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/skill_pools",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "skill_pools"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7b8efde4-c20b-4a38-84f2-0f66a53b94c2"
            }
          ],
          "id": "4bbb7e8c-7e93-45db-af60-4b6b5008730b",
          "uid": "32335283-4bbb7e8c-7e93-45db-af60-4b6b5008730b"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a skill pool from a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 204 и пустой объект\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1ad27d01-13fe-4b2d-9ed3-f92a9a253cea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/skill_pools/2",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "skill_pools",
                    "2"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1ad27d01-13fe-4b2d-9ed3-f92a9a253cea"
            },
            {
              "name": "List all skill pools of a person",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Массив не содержит объект с id = 2\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const jsonData = pm.response.json();\r",
                      "    console.log(\"Ответ:\", jsonData);\r",
                      "\r",
                      "    pm.expect(jsonData).to.be.an(\"array\", \"Ожидался массив в ответе\");\r",
                      "\r",
                      "    const hasTarget = jsonData.some(item => item.id === 2);\r",
                      "    pm.expect(hasTarget, \"Объект с id = 2 найден в массиве, а не должен был. так как удалял связь запросом ранее\").to.be.false;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0947ac16-9824-41b6-ad87-7e57bc3d1cba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}people/581/skill_pools",
                  "host": [
                    "{{url}}people"
                  ],
                  "path": [
                    "581",
                    "skill_pools"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0947ac16-9824-41b6-ad87-7e57bc3d1cba"
            }
          ],
          "id": "eccd8b91-62a8-4eef-99de-906c887bc8d2",
          "uid": "32335283-eccd8b91-62a8-4eef-99de-906c887bc8d2"
        }
      ],
      "id": "999113a2-100c-4b2c-88f8-2de5334db105",
      "uid": "32335283-999113a2-100c-4b2c-88f8-2de5334db105"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "19ce986b-153c-4af8-ad0b-b0825b98087a",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "32ed2512-151b-4b12-bb82-bb7c12a22365",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}