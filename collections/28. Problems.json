{
  "info": {
    "_postman_id": "aec33feb-7b22-4098-920a-67353255d7df",
    "name": "28. Problems",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-01T12:49:29.000Z",
    "createdAt": "2025-07-31T14:12:19.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-aec33feb-7b22-4098-920a-67353255d7df"
  },
  "item": [
    {
      "name": "Problems",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List problems",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры Known Errors (только первый элемент массива)\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const data = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    if (!Array.isArray(data) || data.length === 0) {\r",
                      "        pm.expect.fail(\"Ответ не является непустым массивом\");\r",
                      "    }\r",
                      "\r",
                      "    const item = data[0];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType, nullable = false) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        if (value === null || value === undefined) {\r",
                      "            if (!nullable) {\r",
                      "                errors.push(`Свойство '${fieldPath}' не должно быть null/undefined`);\r",
                      "            }\r",
                      "            return;\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"sourceID\", \"string\", true);\r",
                      "    checkField(item, \"subject\", \"string\");\r",
                      "    checkField(item, \"impact\", \"string\");\r",
                      "    checkField(item, \"status\", \"string\");\r",
                      "    checkField(item, \"known_error\", \"boolean\");\r",
                      "    checkField(item, \"analysis_target_at\", \"string\", true);\r",
                      "    checkField(item, \"solved_at\", \"string\", true);\r",
                      "\r",
                      "    checkField(item, \"team.id\", \"number\");\r",
                      "    checkField(item, \"team.name\", \"string\");\r",
                      "    checkField(item, \"team.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"member.id\", \"number\");\r",
                      "    checkField(item, \"member.name\", \"string\");\r",
                      "    checkField(item, \"member.account.id\", \"string\");\r",
                      "    checkField(item, \"member.account.name\", \"string\");\r",
                      "    checkField(item, \"member.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"service.id\", \"number\");\r",
                      "    checkField(item, \"service.name\", \"string\");\r",
                      "    checkField(item, \"service.localized_name\", \"string\");\r",
                      "    checkField(item, \"service.nodeID\", \"string\");\r",
                      "    checkField(item, \"service.provider.id\", \"number\");\r",
                      "    checkField(item, \"service.provider.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.id\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6907e1d3-1ebd-4d3f-a157-d4e0b5ecf264",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems",
                  "host": [
                    "{{url}}problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6907e1d3-1ebd-4d3f-a157-d4e0b5ecf264"
            },
            {
              "name": "Get a single problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры Known Error (объект)\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType, nullable = false) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        if (value === null || value === undefined) {\r",
                      "            if (!nullable) {\r",
                      "                errors.push(`Свойство '${fieldPath}' не должно быть null/undefined`);\r",
                      "            }\r",
                      "            return;\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"sourceID\", \"string\");\r",
                      "    checkField(item, \"subject\", \"string\");\r",
                      "    checkField(item, \"impact\", \"string\");\r",
                      "    checkField(item, \"status\", \"string\");\r",
                      "    checkField(item, \"known_error\", \"boolean\");\r",
                      "    checkField(item, \"analysis_target_at\", \"string\", true);\r",
                      "    checkField(item, \"solved_at\", \"string\", true);\r",
                      "    checkField(item, \"category\", \"string\", true);\r",
                      "    checkField(item, \"new_assignment\", \"boolean\");\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"urgent\", \"boolean\");\r",
                      "    checkField(item, \"workaround\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"team.id\", \"number\");\r",
                      "    checkField(item, \"team.name\", \"string\");\r",
                      "    checkField(item, \"team.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"member.id\", \"number\");\r",
                      "    checkField(item, \"member.name\", \"string\");\r",
                      "    checkField(item, \"member.account.id\", \"string\");\r",
                      "    checkField(item, \"member.account.name\", \"string\");\r",
                      "    checkField(item, \"member.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"manager.id\", \"number\");\r",
                      "    checkField(item, \"manager.name\", \"string\");\r",
                      "    checkField(item, \"manager.account.id\", \"string\");\r",
                      "    checkField(item, \"manager.account.name\", \"string\");\r",
                      "    checkField(item, \"manager.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"service.id\", \"number\");\r",
                      "    checkField(item, \"service.name\", \"string\");\r",
                      "    checkField(item, \"service.localized_name\", \"string\");\r",
                      "    checkField(item, \"service.nodeID\", \"string\");\r",
                      "    checkField(item, \"service.provider.id\", \"number\");\r",
                      "    checkField(item, \"service.provider.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.id\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля, не проверяемые выше\r",
                      "    checkField(item, \"agile_board\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column_position\", \"number\", true);\r",
                      "    checkField(item, \"custom_fields\", \"object\", true);\r",
                      "    checkField(item, \"planned_effort\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog\", \"object\", true);\r",
                      "    checkField(item, \"product_backlog_estimate\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog_position\", \"number\", true);\r",
                      "    checkField(item, \"project\", \"object\", true);\r",
                      "    checkField(item, \"resolution_duration\", \"number\", true);\r",
                      "    checkField(item, \"supplier\", \"object\", true);\r",
                      "    checkField(item, \"supplier_requestID\", \"string\", true);\r",
                      "    checkField(item, \"ui_extension\", \"object\", true);\r",
                      "    checkField(item, \"waiting_until\", \"string\", true);\r",
                      "    checkField(item, \"workflow\", \"object\", true);\r",
                      "    checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "dae1be13-b929-4e1c-9c45-5c97c67c9c6b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-dae1be13-b929-4e1c-9c45-5c97c67c9c6b"
            }
          ],
          "id": "2ca3ad86-422f-49a3-81f6-d2e0d91b1884",
          "uid": "32335283-2ca3ad86-422f-49a3-81f6-d2e0d91b1884"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    pm.environment.set(\"problems_id\", item.id);\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType, nullable = false) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        if (value === null || value === undefined) {\r",
                      "            if (!nullable) {\r",
                      "                errors.push(`Свойство '${fieldPath}' не должно быть null/undefined`);\r",
                      "            }\r",
                      "            return;\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"subject\", \"string\");\r",
                      "    checkField(item, \"impact\", \"string\");\r",
                      "    checkField(item, \"status\", \"string\");\r",
                      "    checkField(item, \"known_error\", \"boolean\");\r",
                      "    checkField(item, \"analysis_target_at\", \"string\", true);\r",
                      "    checkField(item, \"solved_at\", \"string\", true);\r",
                      "    checkField(item, \"category\", \"string\", true);\r",
                      "    checkField(item, \"new_assignment\", \"boolean\");\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"urgent\", \"boolean\");\r",
                      "    checkField(item, \"workaround\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"team.id\", \"number\");\r",
                      "    checkField(item, \"team.name\", \"string\");\r",
                      "    checkField(item, \"team.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"member.id\", \"number\");\r",
                      "    checkField(item, \"member.name\", \"string\");\r",
                      "    checkField(item, \"member.account.id\", \"string\");\r",
                      "    checkField(item, \"member.account.name\", \"string\");\r",
                      "    checkField(item, \"member.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"manager.id\", \"number\");\r",
                      "    checkField(item, \"manager.name\", \"string\");\r",
                      "    checkField(item, \"manager.account.id\", \"string\");\r",
                      "    checkField(item, \"manager.account.name\", \"string\");\r",
                      "    checkField(item, \"manager.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"service.id\", \"number\");\r",
                      "    checkField(item, \"service.name\", \"string\");\r",
                      "    checkField(item, \"service.localized_name\", \"string\");\r",
                      "    checkField(item, \"service.nodeID\", \"string\");\r",
                      "    checkField(item, \"service.provider.id\", \"number\");\r",
                      "    checkField(item, \"service.provider.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.id\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля, не проверяемые выше\r",
                      "    checkField(item, \"agile_board\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column_position\", \"number\", true);\r",
                      "    checkField(item, \"custom_fields\", \"object\", true);\r",
                      "    checkField(item, \"planned_effort\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog\", \"object\", true);\r",
                      "    checkField(item, \"product_backlog_estimate\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog_position\", \"number\", true);\r",
                      "    checkField(item, \"project\", \"object\", true);\r",
                      "    checkField(item, \"resolution_duration\", \"number\", true);\r",
                      "    checkField(item, \"supplier\", \"object\", true);\r",
                      "    checkField(item, \"supplier_requestID\", \"string\", true);\r",
                      "    checkField(item, \"ui_extension\", \"object\", true);\r",
                      "    checkField(item, \"waiting_until\", \"string\", true);\r",
                      "    checkField(item, \"workflow\", \"object\", true);\r",
                      "    checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b7a1e258-2cca-4a27-b8dc-6c4b7791a18c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"analysis_target_at\": \"2024-08-01T10:15:00Z\",\r\n    \"category\": \"reactive\",\r\n    \"impact\": \"high\",\r\n    \"known_error\": true,\r\n    \"manager_id\": 1081,\r\n    \"member_id\": 581,\r\n    \"new_assignment\": true,\r\n    \"service_id\": 108,\r\n    \"solved_at\": null,\r\n    \"status\": \"assigned\",\r\n    \"subject\": \"Серверы HP 9000 не синхронизируют время с сервером NTP {{$randomWords}}\",\r\n    \"team_id\": 10,\r\n    \"urgent\": false,\r\n    \"workaround\": \"Если предположить, что сервер опережает или отстает менее чем на 10 минут, нет необходимости в простое. Приложения и базы данных могут продолжать работать, пока реализован этот обходной путь. В таких случаях просто отрегулируйте время без потери или увеличения в секундах в день, используя команду date -a. Если текущее время отстает на 240 секунд, используйте команду: date -a +240\\n\\nЗатем проверьте время на NTP-сервере. Вы должны увидеть, как время движется вперед, примерно на 2 минуты в час.\\nКогда время окажется в пределах нескольких секунд, запустите xntpd.\\nПроверьте syslog.log, чтобы увидеть сообщения от xntpd.\\n\\nЕсли сервер опережает или отстает более чем на 10 минут, его (вместе с приложениями и базами данных) необходимо отключить. Затем вручную отрегулируйте время, чтобы оно соответствовало времени NTP-сервера с точностью до нескольких секунд. Затем запустите xntpd и проверьте syslog.log, чтобы увидеть сообщения от xntpd. На этом этапе приложения и базы данных можно перезапустить.\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}problems",
                  "host": [
                    "{{url}}problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b7a1e258-2cca-4a27-b8dc-6c4b7791a18c"
            }
          ],
          "id": "5011e599-14a9-4ad7-b170-9eadce0327cd",
          "uid": "32335283-5011e599-14a9-4ad7-b170-9eadce0327cd"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    pm.environment.set(\"problems_id\", item.id);\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType, nullable = false) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        if (value === null || value === undefined) {\r",
                      "            if (!nullable) {\r",
                      "                errors.push(`Свойство '${fieldPath}' не должно быть null/undefined`);\r",
                      "            }\r",
                      "            return;\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"subject\", \"string\");\r",
                      "    checkField(item, \"impact\", \"string\");\r",
                      "    checkField(item, \"status\", \"string\");\r",
                      "    checkField(item, \"known_error\", \"boolean\");\r",
                      "    checkField(item, \"analysis_target_at\", \"string\", true);\r",
                      "    checkField(item, \"solved_at\", \"string\", true);\r",
                      "    checkField(item, \"category\", \"string\", true);\r",
                      "    checkField(item, \"new_assignment\", \"boolean\");\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"urgent\", \"boolean\");\r",
                      "    checkField(item, \"workaround\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"team.id\", \"number\");\r",
                      "    checkField(item, \"team.name\", \"string\");\r",
                      "    checkField(item, \"team.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"member.id\", \"number\");\r",
                      "    checkField(item, \"member.name\", \"string\");\r",
                      "    checkField(item, \"member.account.id\", \"string\");\r",
                      "    checkField(item, \"member.account.name\", \"string\");\r",
                      "    checkField(item, \"member.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"manager.id\", \"number\");\r",
                      "    checkField(item, \"manager.name\", \"string\");\r",
                      "    checkField(item, \"manager.account.id\", \"string\");\r",
                      "    checkField(item, \"manager.account.name\", \"string\");\r",
                      "    checkField(item, \"manager.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"service.id\", \"number\");\r",
                      "    checkField(item, \"service.name\", \"string\");\r",
                      "    checkField(item, \"service.localized_name\", \"string\");\r",
                      "    checkField(item, \"service.nodeID\", \"string\");\r",
                      "    checkField(item, \"service.provider.id\", \"number\");\r",
                      "    checkField(item, \"service.provider.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.id\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля, не проверяемые выше\r",
                      "    checkField(item, \"agile_board\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column_position\", \"number\", true);\r",
                      "    checkField(item, \"custom_fields\", \"object\", true);\r",
                      "    checkField(item, \"planned_effort\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog\", \"object\", true);\r",
                      "    checkField(item, \"product_backlog_estimate\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog_position\", \"number\", true);\r",
                      "    checkField(item, \"project\", \"object\", true);\r",
                      "    checkField(item, \"resolution_duration\", \"number\", true);\r",
                      "    checkField(item, \"supplier\", \"object\", true);\r",
                      "    checkField(item, \"supplier_requestID\", \"string\", true);\r",
                      "    checkField(item, \"ui_extension\", \"object\", true);\r",
                      "    checkField(item, \"waiting_until\", \"string\", true);\r",
                      "    checkField(item, \"workflow\", \"object\", true);\r",
                      "    checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "    pm.expect(item.status, 'status').to.eq(\"solved\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e9b9ddd0-29d0-4960-840c-46ffa87c6baa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": \"solved\",\r\n    \"known_error\": true,\r\n    \"note\": \"{{$randomWords}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}problems/{{problems_id}}",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "{{problems_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e9b9ddd0-29d0-4960-840c-46ffa87c6baa"
            }
          ],
          "id": "4e304385-0905-4ace-9727-b821996211d3",
          "uid": "32335283-4e304385-0905-4ace-9727-b821996211d3"
        },
        {
          "name": "Archive a problem",
          "item": [
            {
              "name": "Archive a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    pm.expect(item.archived, 'archived').to.eq(true);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "73ba39e1-7d9f-449b-a071-d86f9df416b3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/{{problems_id}}/archive",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "{{problems_id}}",
                    "archive"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-73ba39e1-7d9f-449b-a071-d86f9df416b3"
            }
          ],
          "id": "466ae4c4-43fe-47c9-b28f-a6472c1b7c62",
          "uid": "32335283-466ae4c4-43fe-47c9-b28f-a6472c1b7c62"
        },
        {
          "name": "Trash a problem",
          "item": [
            {
              "name": "Trash a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    pm.expect(item.trashed, 'trashed').to.eq(true);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6815888c-fc8e-4434-b93c-71630f074733",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/{{problems_id}}/trash",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "{{problems_id}}",
                    "trash"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6815888c-fc8e-4434-b93c-71630f074733"
            }
          ],
          "id": "ba5edd4f-5ff9-4041-bf16-00ff0be7ea02",
          "uid": "32335283-ba5edd4f-5ff9-4041-bf16-00ff0be7ea02"
        },
        {
          "name": "Restore a problem",
          "item": [
            {
              "name": "Restore a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка структуры Known Error (объект)\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    const item = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, fieldPath, expectedType, nullable = false) {\r",
                      "        const parts = fieldPath.split(\".\");\r",
                      "        let value = obj;\r",
                      "        for (let part of parts) {\r",
                      "            value = value?.[part];\r",
                      "        }\r",
                      "\r",
                      "        if (value === null || value === undefined) {\r",
                      "            if (!nullable) {\r",
                      "                errors.push(`Свойство '${fieldPath}' не должно быть null/undefined`);\r",
                      "            }\r",
                      "            return;\r",
                      "        }\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "        if (expectedType === \"number\" && isNaN(Number(value))) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть числом, а пришло: ${value}`);\r",
                      "        } else if (expectedType !== \"number\" && actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${fieldPath}' ожидалось быть '${expectedType}', а пришло '${actualType}'`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"subject\", \"string\");\r",
                      "    checkField(item, \"impact\", \"string\");\r",
                      "    checkField(item, \"status\", \"string\");\r",
                      "    checkField(item, \"known_error\", \"boolean\");\r",
                      "    checkField(item, \"analysis_target_at\", \"string\", true);\r",
                      "    checkField(item, \"solved_at\", \"string\", true);\r",
                      "    checkField(item, \"category\", \"string\", true);\r",
                      "    checkField(item, \"new_assignment\", \"boolean\");\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"urgent\", \"boolean\");\r",
                      "    checkField(item, \"workaround\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"team.id\", \"number\");\r",
                      "    checkField(item, \"team.name\", \"string\");\r",
                      "    checkField(item, \"team.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"member.id\", \"number\");\r",
                      "    checkField(item, \"member.name\", \"string\");\r",
                      "    checkField(item, \"member.account.id\", \"string\");\r",
                      "    checkField(item, \"member.account.name\", \"string\");\r",
                      "    checkField(item, \"member.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"manager.id\", \"number\");\r",
                      "    checkField(item, \"manager.name\", \"string\");\r",
                      "    checkField(item, \"manager.account.id\", \"string\");\r",
                      "    checkField(item, \"manager.account.name\", \"string\");\r",
                      "    checkField(item, \"manager.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"service.id\", \"number\");\r",
                      "    checkField(item, \"service.name\", \"string\");\r",
                      "    checkField(item, \"service.localized_name\", \"string\");\r",
                      "    checkField(item, \"service.nodeID\", \"string\");\r",
                      "    checkField(item, \"service.provider.id\", \"number\");\r",
                      "    checkField(item, \"service.provider.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.id\", \"string\");\r",
                      "    checkField(item, \"service.provider.account.name\", \"string\");\r",
                      "    checkField(item, \"service.provider.nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля, не проверяемые выше\r",
                      "    checkField(item, \"agile_board\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column\", \"object\", true);\r",
                      "    checkField(item, \"agile_board_column_position\", \"number\", true);\r",
                      "    checkField(item, \"custom_fields\", \"object\", true);\r",
                      "    checkField(item, \"planned_effort\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog\", \"object\", true);\r",
                      "    checkField(item, \"product_backlog_estimate\", \"number\", true);\r",
                      "    checkField(item, \"product_backlog_position\", \"number\", true);\r",
                      "    checkField(item, \"project\", \"object\", true);\r",
                      "    checkField(item, \"resolution_duration\", \"number\", true);\r",
                      "    checkField(item, \"supplier\", \"object\", true);\r",
                      "    checkField(item, \"supplier_requestID\", \"string\", true);\r",
                      "    checkField(item, \"ui_extension\", \"object\", true);\r",
                      "    checkField(item, \"waiting_until\", \"string\", true);\r",
                      "    checkField(item, \"workflow\", \"object\", true);\r",
                      "    checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a38e2046-da4b-4245-960e-ff9654c1eca5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/{{problems_id}}/restore",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "{{problems_id}}",
                    "restore"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a38e2046-da4b-4245-960e-ff9654c1eca5"
            }
          ],
          "id": "c342a942-5ac2-4fb5-96fd-871d0603e8db",
          "uid": "32335283-c342a942-5ac2-4fb5-96fd-871d0603e8db"
        }
      ],
      "id": "f45d9762-fd37-4f4a-969a-deaff7480530",
      "uid": "32335283-f45d9762-fd37-4f4a-969a-deaff7480530"
    },
    {
      "name": "Configuration Items",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all configuration items of a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const item = jsonData[0];\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null && !nullable) {\r",
                      "        errors.push(`Поле '${field}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] !== null && typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "// Примитивы верхнего уровня\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"software\", \"boolean\");\r",
                      "checkField(item, \"label\", \"string\");\r",
                      "checkField(item, \"name\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"rule_set\", \"string\");\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Объект product\r",
                      "if (typeof item.product !== \"object\" || item.product === null) {\r",
                      "    errors.push(\"Свойство 'product' должно быть объектом\");\r",
                      "} else {\r",
                      "    const p = item.product;\r",
                      "    checkField(p, \"id\", \"number\");\r",
                      "    checkField(p, \"name\", \"string\");\r",
                      "    checkField(p, \"category\", \"string\");\r",
                      "    checkField(p, \"nodeID\", \"string\");\r",
                      "    checkField(p, \"brand\", \"string\");\r",
                      "    checkField(p, \"model\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Объект support_team\r",
                      "if (typeof item.support_team !== \"object\" || item.support_team === null) {\r",
                      "    errors.push(\"Свойство 'support_team' должно быть объектом\");\r",
                      "} else {\r",
                      "    const t = item.support_team;\r",
                      "    checkField(t, \"id\", \"number\");\r",
                      "    checkField(t, \"name\", \"string\");\r",
                      "    checkField(t, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Объект service и его provider\r",
                      "if (typeof item.service !== \"object\" || item.service === null) {\r",
                      "    errors.push(\"Свойство 'service' должно быть объектом\");\r",
                      "} else {\r",
                      "    const s = item.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (typeof s.provider !== \"object\" || s.provider === null) {\r",
                      "        errors.push(\"Свойство 'service.provider' должно быть объектом\");\r",
                      "    } else {\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (typeof p.account !== \"object\" || p.account === null) {\r",
                      "            errors.push(\"Свойство 'service.provider.account' должно быть объектом\");\r",
                      "        } else {\r",
                      "            const a = p.account;\r",
                      "            checkField(a, \"id\", \"string\");\r",
                      "            checkField(a, \"name\", \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e6d9d81f-9d84-45bf-959a-62d1d0154a4c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/cis",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e6d9d81f-9d84-45bf-959a-62d1d0154a4c"
            }
          ],
          "id": "46ceb83e-c62b-4bc8-81c7-b1e1c4f4eb9d",
          "uid": "32335283-46ceb83e-c62b-4bc8-81c7-b1e1c4f4eb9d"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a configuration item to a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2221ce91-c68b-4665-8ec2-187805a9800e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/cis/2410",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "cis",
                    "2410"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2221ce91-c68b-4665-8ec2-187805a9800e"
            },
            {
              "name": "Check \"Add a configuration item to a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test to check if the array contains an object with id 2410\r",
                      "pm.test(\"The response contains an object with id 2410\", function () {\r",
                      "    var containsId2410 = responseJSON.some(function(item) {\r",
                      "        return item.id === 2410;\r",
                      "    });\r",
                      "    pm.expect(containsId2410).to.be.true;\r",
                      "    if (!containsId2410) {\r",
                      "        console.error(\"Error: The response does not contain an object with id 2410.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "11d6bcd7-ac26-4252-b3ea-5303decab1cb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/cis",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-11d6bcd7-ac26-4252-b3ea-5303decab1cb"
            }
          ],
          "id": "adbc5388-431a-4631-9d27-fcaebeef45f7",
          "uid": "32335283-adbc5388-431a-4631-9d27-fcaebeef45f7"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a configuration item from a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "00d0e58b-29cb-445e-99e3-529fc813ca69",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/cis/2410",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "cis",
                    "2410"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-00d0e58b-29cb-445e-99e3-529fc813ca69"
            },
            {
              "name": "Check \"Remove a configuration item from a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No object with id 2410 exists in the array\", function () {\r",
                      "    var exists = responseJSON.some(function(item) {\r",
                      "        return item.id === 2410;\r",
                      "    });\r",
                      "    pm.expect(exists).to.be.false;\r",
                      "    if (exists) {\r",
                      "        console.error(\"Error: An object with id 2410 was found in the response.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d527b0f2-2c80-4004-8364-bdc128917c46",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/cis",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "cis"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d527b0f2-2c80-4004-8364-bdc128917c46"
            }
          ],
          "id": "beaffdfd-90cf-4a0c-ace3-e956522f6300",
          "uid": "32335283-beaffdfd-90cf-4a0c-ace3-e956522f6300"
        }
      ],
      "id": "c518961b-3394-4f9f-b517-e3f633cef12a",
      "uid": "32335283-c518961b-3394-4f9f-b517-e3f633cef12a"
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List notes of a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const item = jsonData[0];\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null && !nullable) {\r",
                      "        errors.push(`Поле '${field}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] !== null && typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "// Примитивы верхнего уровня\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"text\", \"string\");\r",
                      "checkField(item, \"attachments\", \"object\"); // это массив\r",
                      "checkField(item, \"medium\", \"string\");\r",
                      "checkField(item, \"internal\", \"boolean\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Объект person\r",
                      "if (typeof item.person !== \"object\" || item.person === null) {\r",
                      "    errors.push(\"Свойство 'person' должно быть объектом\");\r",
                      "} else {\r",
                      "    const p = item.person;\r",
                      "    checkField(p, \"id\", \"number\");\r",
                      "    checkField(p, \"name\", \"string\");\r",
                      "    checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (typeof p.account !== \"object\" || p.account === null) {\r",
                      "        errors.push(\"Свойство 'person.account' должно быть объектом\");\r",
                      "    } else {\r",
                      "        const acc = p.account;\r",
                      "        checkField(acc, \"id\", \"string\");\r",
                      "        checkField(acc, \"name\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Объект account\r",
                      "if (typeof item.account !== \"object\" || item.account === null) {\r",
                      "    errors.push(\"Свойство 'account' должно быть объектом\");\r",
                      "} else {\r",
                      "    const acc = item.account;\r",
                      "    checkField(acc, \"id\", \"string\");\r",
                      "    checkField(acc, \"name\", \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3ea3e0b7-ddc1-4c01-ba29-120a2a33c4b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/notes",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3ea3e0b7-ddc1-4c01-ba29-120a2a33c4b0"
            }
          ],
          "id": "eeeecb21-ecd1-4c3c-8158-2d78c18f61c5",
          "uid": "32335283-eeeecb21-ecd1-4c3c-8158-2d78c18f61c5"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a note",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.expect(pm.response.json().id).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b69d8760-3370-4195-b3e9-b89f1bd06392",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"{{$randomWords}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}problems/4/notes",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b69d8760-3370-4195-b3e9-b89f1bd06392"
            }
          ],
          "id": "25a56c70-577f-4701-9184-18b7f27723aa",
          "uid": "32335283-25a56c70-577f-4701-9184-18b7f27723aa"
        }
      ],
      "id": "4ff9aca3-ad78-42a7-8f29-bb11015421c5",
      "uid": "32335283-4ff9aca3-ad78-42a7-8f29-bb11015421c5"
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all requests of a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const item = jsonData[0];\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null && !nullable) {\r",
                      "        errors.push(`Поле '${field}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] !== null && typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "// Примитивные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\");\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\");\r",
                      "checkField(item, \"impact\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"next_target_at\", \"string\");\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Поле grouped_into может быть null\r",
                      "checkField(item, \"grouped_into\", \"object\", true);\r",
                      "\r",
                      "// team\r",
                      "if (typeof item.team !== \"object\" || item.team === null) {\r",
                      "    errors.push(\"Свойство 'team' должно быть объектом\");\r",
                      "} else {\r",
                      "    checkField(item.team, \"id\", \"number\");\r",
                      "    checkField(item.team, \"name\", \"string\");\r",
                      "    checkField(item.team, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// member\r",
                      "if (typeof item.member !== \"object\" || item.member === null) {\r",
                      "    errors.push(\"Свойство 'member' должно быть объектом\");\r",
                      "} else {\r",
                      "    checkField(item.member, \"id\", \"number\");\r",
                      "    checkField(item.member, \"name\", \"string\");\r",
                      "    checkField(item.member, \"nodeID\", \"string\");\r",
                      "\r",
                      "    const account = item.member.account;\r",
                      "    if (typeof account !== \"object\" || account === null) {\r",
                      "        errors.push(\"Свойство 'member.account' должно быть объектом\");\r",
                      "    } else {\r",
                      "        checkField(account, \"id\", \"string\");\r",
                      "        checkField(account, \"name\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// service_instance\r",
                      "if (typeof item.service_instance !== \"object\" || item.service_instance === null) {\r",
                      "    errors.push(\"Свойство 'service_instance' должно быть объектом\");\r",
                      "} else {\r",
                      "    checkField(item.service_instance, \"id\", \"number\");\r",
                      "    checkField(item.service_instance, \"name\", \"string\");\r",
                      "    checkField(item.service_instance, \"localized_name\", \"string\");\r",
                      "    checkField(item.service_instance, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ae22db50-cb82-4ee0-be1d-b19d26894086",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/requests",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ae22db50-cb82-4ee0-be1d-b19d26894086"
            }
          ],
          "id": "0984a349-8196-4a01-bd1c-cd954f6b2317",
          "uid": "32335283-0984a349-8196-4a01-bd1c-cd954f6b2317"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a request to a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d69ed3f2-11db-42ca-8e3e-8a977b7f85f7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/requests/201",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "requests",
                    "201"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d69ed3f2-11db-42ca-8e3e-8a977b7f85f7"
            },
            {
              "name": "Check \"Add a request to a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test to check if the array contains an object with id 201\r",
                      "pm.test(\"The response contains an object with id 201\", function () {\r",
                      "    var containsId201 = responseJSON.some(function(item) {\r",
                      "        return item.id === 201;\r",
                      "    });\r",
                      "    pm.expect(containsId201).to.be.true;\r",
                      "    if (!containsId201) {\r",
                      "        console.error(\"Error: The response does not contain an object with id 201.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "12cea57f-1492-421a-9cef-eaa0237c7af4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/requests",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-12cea57f-1492-421a-9cef-eaa0237c7af4"
            }
          ],
          "id": "3b08ed23-9eb9-4a30-9e53-e7a28bb8ad6c",
          "uid": "32335283-3b08ed23-9eb9-4a30-9e53-e7a28bb8ad6c"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a request from a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e46652a4-eb65-4da4-a3fd-0488c82522de",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/requests/201",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "requests",
                    "201"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e46652a4-eb65-4da4-a3fd-0488c82522de"
            },
            {
              "name": "Check \"Remove a request from a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No object with id 201 exists in the array\", function () {\r",
                      "    var exists = responseJSON.some(function(item) {\r",
                      "        return item.id === 201;\r",
                      "    });\r",
                      "    pm.expect(exists).to.be.false;\r",
                      "    if (exists) {\r",
                      "        console.error(\"Error: An object with id 201 was found in the response.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "72f7be47-899e-4876-9e08-5256af61b3cf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/requests",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-72f7be47-899e-4876-9e08-5256af61b3cf"
            }
          ],
          "id": "3530176c-bb45-4048-ac49-d95a5843d623",
          "uid": "32335283-3530176c-bb45-4048-ac49-d95a5843d623"
        }
      ],
      "id": "1644160a-e352-4f71-95e4-294960bc929f",
      "uid": "32335283-1644160a-e352-4f71-95e4-294960bc929f"
    },
    {
      "name": "Service Instances",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all service instances of a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const item = jsonData[0];\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null && !nullable) {\r",
                      "        errors.push(`Поле '${field}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] !== null && typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "// Примитивные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true); // null допустим\r",
                      "checkField(item, \"name\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"localized_name\", \"string\");\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// support_team\r",
                      "if (typeof item.support_team !== \"object\" || item.support_team === null) {\r",
                      "    errors.push(\"Свойство 'support_team' должно быть объектом\");\r",
                      "} else {\r",
                      "    checkField(item.support_team, \"id\", \"number\");\r",
                      "    checkField(item.support_team, \"name\", \"string\");\r",
                      "    checkField(item.support_team, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (typeof item.service !== \"object\" || item.service === null) {\r",
                      "    errors.push(\"Свойство 'service' должно быть объектом\");\r",
                      "} else {\r",
                      "    checkField(item.service, \"id\", \"number\");\r",
                      "    checkField(item.service, \"name\", \"string\");\r",
                      "    checkField(item.service, \"localized_name\", \"string\");\r",
                      "    checkField(item.service, \"nodeID\", \"string\");\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (typeof provider !== \"object\" || provider === null) {\r",
                      "        errors.push(\"Свойство 'service.provider' должно быть объектом\");\r",
                      "    } else {\r",
                      "        checkField(provider, \"id\", \"number\");\r",
                      "        checkField(provider, \"name\", \"string\");\r",
                      "\r",
                      "        const account = provider.account;\r",
                      "        if (typeof account !== \"object\" || account === null) {\r",
                      "            errors.push(\"Свойство 'service.provider.account' должно быть объектом\");\r",
                      "        } else {\r",
                      "            checkField(account, \"id\", \"string\");\r",
                      "            checkField(account, \"name\", \"string\");\r",
                      "        }\r",
                      "\r",
                      "        checkField(provider, \"nodeID\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ba387acc-1814-406d-840d-0662307e084f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/service_instances",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ba387acc-1814-406d-840d-0662307e084f"
            }
          ],
          "id": "3f23c055-9254-4e4d-b662-d3fa6b6f7066",
          "uid": "32335283-3f23c055-9254-4e4d-b662-d3fa6b6f7066"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a service instance to a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c379aa7f-727a-4703-8943-69865dd95043",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/service_instances/267",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "service_instances",
                    "267"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c379aa7f-727a-4703-8943-69865dd95043"
            },
            {
              "name": "Check \"Add a service instance to a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test to check if the array contains an object with id 267\r",
                      "pm.test(\"The response contains an object with id 267\", function () {\r",
                      "    var containsId267 = responseJSON.some(function(item) {\r",
                      "        return item.id === 267;\r",
                      "    });\r",
                      "    pm.expect(containsId267).to.be.true;\r",
                      "    if (!containsId267) {\r",
                      "        console.error(\"Error: The response does not contain an object with id 267.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "decf16aa-110c-4006-9ab7-03e3b806972e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/service_instances",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-decf16aa-110c-4006-9ab7-03e3b806972e"
            }
          ],
          "id": "95e2eceb-9cf0-4a6f-970b-242397475f72",
          "uid": "32335283-95e2eceb-9cf0-4a6f-970b-242397475f72"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service instance from a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "094e436a-6c3b-477d-9ac9-73bd28398290",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/service_instances/267",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "service_instances",
                    "267"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-094e436a-6c3b-477d-9ac9-73bd28398290"
            },
            {
              "name": "Check \"Remove a service instance from a problem\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var responseJSON = pm.response.json();\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No object with id 267 exists in the array\", function () {\r",
                      "    var exists = responseJSON.some(function(item) {\r",
                      "        return item.id === 267;\r",
                      "    });\r",
                      "    pm.expect(exists).to.be.false;\r",
                      "    if (exists) {\r",
                      "        console.error(\"Error: An object with id 267 was found in the response.\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "906ebcfa-7d9a-473e-a905-c1233d60470e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/service_instances",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-906ebcfa-7d9a-473e-a905-c1233d60470e"
            }
          ],
          "id": "ced387a8-a5b0-4249-b7e7-a1e42c6e1d56",
          "uid": "32335283-ced387a8-a5b0-4249-b7e7-a1e42c6e1d56"
        }
      ],
      "id": "0bbbaf2f-3c49-4fd9-abcd-ed8515df6e18",
      "uid": "32335283-0bbbaf2f-3c49-4fd9-abcd-ed8515df6e18"
    },
    {
      "name": "Sprint Backlog Items",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List sprint backlog items of a problem",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7435a73c-2a39-43be-be37-0833514d2406",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}problems/4/sprint_backlog_items",
                  "host": [
                    "{{url}}problems"
                  ],
                  "path": [
                    "4",
                    "sprint_backlog_items"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7435a73c-2a39-43be-be37-0833514d2406"
            }
          ],
          "id": "4cdee7eb-de9e-4618-9f77-08b36bcb2a08",
          "uid": "32335283-4cdee7eb-de9e-4618-9f77-08b36bcb2a08"
        }
      ],
      "id": "05be91f4-7789-4f3c-ac1a-05d1516e826c",
      "uid": "32335283-05be91f4-7789-4f3c-ac1a-05d1516e826c"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}