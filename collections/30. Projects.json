{
  "info": {
    "_postman_id": "81e0faf0-590d-480a-b436-648d75a84b55",
    "name": "30. Projects",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T09:52:01.000Z",
    "createdAt": "2025-08-01T13:28:50.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-81e0faf0-590d-480a-b436-648d75a84b55"
  },
  "item": [
    {
      "name": "Projects",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List projects",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const item = jsonData[0];  // Проверяем только первый объект\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Основные поля проекта\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\", true);\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Вложенный объект service\r",
                      "if (\"service\" in item && item.service !== null) {\r",
                      "    const service = item.service;\r",
                      "    checkField(service, \"id\", \"number\");\r",
                      "    checkField(service, \"name\", \"string\");\r",
                      "    checkField(service, \"localized_name\", \"string\");\r",
                      "    checkField(service, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"provider\" in service && service.provider !== null) {\r",
                      "        const provider = service.provider;\r",
                      "        checkField(provider, \"id\", \"number\");\r",
                      "        checkField(provider, \"name\", \"string\");\r",
                      "\r",
                      "        if (\"account\" in provider && provider.account !== null) {\r",
                      "            const account = provider.account;\r",
                      "            checkField(account, \"id\", \"string\");\r",
                      "            checkField(account, \"name\", \"string\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует вложенный объект 'account' в 'provider'\");\r",
                      "        }\r",
                      "        checkField(provider, \"nodeID\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует вложенный объект 'provider' в 'service'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует вложенный объект 'service'\");\r",
                      "}\r",
                      "\r",
                      "// Вывод ошибок\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ea1d1a57-09b9-489c-bdb2-5a474672fcdb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects",
                  "host": [
                    "{{url}}projects"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ea1d1a57-09b9-489c-bdb2-5a474672fcdb"
            },
            {
              "name": "Get a single project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Простые поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\", true);\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"resolution_duration\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "checkField(item, \"justification\", \"string\", true);\r",
                      "checkField(item, \"program\", \"string\", true);\r",
                      "checkField(item, \"risk_level\", \"string\", true);\r",
                      "checkField(item, \"roi\", \"number\", true);\r",
                      "checkField(item, \"effort\", \"number\", true);\r",
                      "checkField(item, \"cost_of_effort\", \"string\", true);\r",
                      "checkField(item, \"cost_of_purchases\", \"string\", true);\r",
                      "checkField(item, \"total_cost\", \"string\", true);\r",
                      "checkField(item, \"value\", \"string\", true);\r",
                      "checkField(item, \"value_currency\", \"string\", true);\r",
                      "checkField(item, \"source\", \"string\", true);\r",
                      "checkField(item, \"time_zone\", \"string\", true);\r",
                      "checkField(item, \"custom_fields\", \"object\", true);\r",
                      "checkField(item, \"completion_reason\", \"string\", true);\r",
                      "checkField(item, \"ui_extension\", \"object\", true);\r",
                      "checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "// 🔹 customer\r",
                      "if (\"customer\" in item && item.customer !== null) {\r",
                      "    const c = item.customer;\r",
                      "    checkField(c, \"id\", \"number\");\r",
                      "    checkField(c, \"name\", \"string\");\r",
                      "    checkField(c, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in c && c.account !== null) {\r",
                      "        checkField(c.account, \"id\", \"string\");\r",
                      "        checkField(c.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'customer'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'customer'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 manager\r",
                      "if (\"manager\" in item && item.manager !== null) {\r",
                      "    const m = item.manager;\r",
                      "    checkField(m, \"id\", \"number\");\r",
                      "    checkField(m, \"name\", \"string\");\r",
                      "    checkField(m, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in m && m.account !== null) {\r",
                      "        checkField(m.account, \"id\", \"string\");\r",
                      "        checkField(m.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'manager'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'manager'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 service → provider → account\r",
                      "if (\"service\" in item && item.service !== null) {\r",
                      "    const s = item.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"provider\" in s && s.provider !== null) {\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (\"account\" in p && p.account !== null) {\r",
                      "            checkField(p.account, \"id\", \"string\");\r",
                      "            checkField(p.account, \"name\", \"string\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует объект 'account' в 'provider'\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'provider' в 'service'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'service'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 work_hours\r",
                      "if (\"work_hours\" in item && item.work_hours !== null) {\r",
                      "    const wh = item.work_hours;\r",
                      "    checkField(wh, \"id\", \"number\");\r",
                      "    checkField(wh, \"name\", \"string\");\r",
                      "    checkField(wh, \"nodeID\", \"string\");\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'work_hours'\");\r",
                      "}\r",
                      "\r",
                      "// 🔻 Ошибки\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2b42fd2f-5686-4d12-bf78-2d357c52cc44",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/11",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "11"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2b42fd2f-5686-4d12-bf78-2d357c52cc44"
            }
          ],
          "id": "ff34e485-3984-4f43-b561-81ac1945968f",
          "uid": "32335283-ff34e485-3984-4f43-b561-81ac1945968f"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "pm.environment.set('project_id', item.id);\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Простые поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\", true);\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"resolution_duration\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "checkField(item, \"justification\", \"string\", true);\r",
                      "checkField(item, \"program\", \"string\", true);\r",
                      "checkField(item, \"risk_level\", \"string\", true);\r",
                      "checkField(item, \"roi\", \"number\", true);\r",
                      "checkField(item, \"effort\", \"number\", true);\r",
                      "checkField(item, \"cost_of_effort\", \"string\", true);\r",
                      "checkField(item, \"cost_of_purchases\", \"string\", true);\r",
                      "checkField(item, \"total_cost\", \"string\", true);\r",
                      "checkField(item, \"value\", \"string\", true);\r",
                      "checkField(item, \"value_currency\", \"string\", true);\r",
                      "checkField(item, \"source\", \"string\", true);\r",
                      "checkField(item, \"time_zone\", \"string\", true);\r",
                      "checkField(item, \"custom_fields\", \"object\", true);\r",
                      "checkField(item, \"completion_reason\", \"string\", true);\r",
                      "checkField(item, \"ui_extension\", \"object\", true);\r",
                      "checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "// 🔹 customer\r",
                      "if (\"customer\" in item && item.customer !== null) {\r",
                      "    const c = item.customer;\r",
                      "    checkField(c, \"id\", \"number\");\r",
                      "    checkField(c, \"name\", \"string\");\r",
                      "    checkField(c, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in c && c.account !== null) {\r",
                      "        checkField(c.account, \"id\", \"string\");\r",
                      "        checkField(c.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'customer'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'customer'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 manager\r",
                      "if (\"manager\" in item && item.manager !== null) {\r",
                      "    const m = item.manager;\r",
                      "    checkField(m, \"id\", \"number\");\r",
                      "    checkField(m, \"name\", \"string\");\r",
                      "    checkField(m, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in m && m.account !== null) {\r",
                      "        checkField(m.account, \"id\", \"string\");\r",
                      "        checkField(m.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'manager'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'manager'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 service → provider → account\r",
                      "if (\"service\" in item && item.service !== null) {\r",
                      "    const s = item.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"provider\" in s && s.provider !== null) {\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (\"account\" in p && p.account !== null) {\r",
                      "            checkField(p.account, \"id\", \"string\");\r",
                      "            checkField(p.account, \"name\", \"string\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует объект 'account' в 'provider'\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'provider' в 'service'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'service'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 work_hours\r",
                      "if (\"work_hours\" in item && item.work_hours !== null) {\r",
                      "    const wh = item.work_hours;\r",
                      "    checkField(wh, \"id\", \"number\");\r",
                      "    checkField(wh, \"name\", \"string\");\r",
                      "    checkField(wh, \"nodeID\", \"string\");\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'work_hours'\");\r",
                      "}\r",
                      "\r",
                      "// 🔻 Ошибки\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d7b1c5c5-d6db-47d5-96e9-b4e035bf09e1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category\": \"small\",\r\n    \"completion_target_at\": \"2025-05-08T09:00:00+03:00\",\r\n    \"cost_of_effort\": \"1600.0\",\r\n    \"cost_of_purchases\": \"4000.0\",\r\n    \"customer_id\": 18,\r\n    \"effort\": 16,\r\n    \"justification\": \"improvement\",\r\n    \"manager_id\": 721,\r\n    \"program\": \"Улучшение центра обработки данных\",\r\n    \"risk_level\": \"limited\",\r\n    \"roi\": 43,\r\n    \"service_id\": 101,\r\n    \"status\": \"in_progress\",\r\n    \"subject\": \"Центр цифровых операций {{$randomWords}}\",\r\n    \"time_zone\": \"Minsk\",\r\n    \"total_cost\": \"5600.0\",\r\n    \"value\": \"8000.0\",\r\n    \"value_currency\": \"usd\",\r\n    \"work_hours_id\": 105\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}projects",
                  "host": [
                    "{{url}}projects"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d7b1c5c5-d6db-47d5-96e9-b4e035bf09e1"
            }
          ],
          "id": "a7029b5e-9385-41ad-9fd9-49c6958f6fb3",
          "uid": "32335283-a7029b5e-9385-41ad-9fd9-49c6958f6fb3"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Простые поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\", true);\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"resolution_duration\", \"number\", true); // Fixed type from string to number\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "checkField(item, \"justification\", \"string\", true);\r",
                      "checkField(item, \"program\", \"string\", true);\r",
                      "checkField(item, \"risk_level\", \"string\", true);\r",
                      "checkField(item, \"roi\", \"number\", true);\r",
                      "checkField(item, \"effort\", \"number\", true);\r",
                      "checkField(item, \"cost_of_effort\", \"string\", true);\r",
                      "checkField(item, \"cost_of_purchases\", \"string\", true);\r",
                      "checkField(item, \"total_cost\", \"string\", true);\r",
                      "checkField(item, \"value\", \"string\", true);\r",
                      "checkField(item, \"value_currency\", \"string\", true);\r",
                      "checkField(item, \"source\", \"string\", true);\r",
                      "checkField(item, \"time_zone\", \"string\", true);\r",
                      "checkField(item, \"custom_fields\", \"object\", true);\r",
                      "checkField(item, \"completion_reason\", \"string\", true);\r",
                      "checkField(item, \"ui_extension\", \"object\", true);\r",
                      "checkField(item, \"attachments\", \"object\"); // массив, typeof === \"object\"\r",
                      "\r",
                      "// 🔹 customer\r",
                      "if (\"customer\" in item && item.customer !== null) {\r",
                      "    const c = item.customer;\r",
                      "    checkField(c, \"id\", \"number\");\r",
                      "    checkField(c, \"name\", \"string\");\r",
                      "    checkField(c, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in c && c.account !== null) {\r",
                      "        checkField(c.account, \"id\", \"string\");\r",
                      "        checkField(c.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'customer'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'customer'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 manager\r",
                      "if (\"manager\" in item && item.manager !== null) {\r",
                      "    const m = item.manager;\r",
                      "    checkField(m, \"id\", \"number\");\r",
                      "    checkField(m, \"name\", \"string\");\r",
                      "    checkField(m, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in m && m.account !== null) {\r",
                      "        checkField(m.account, \"id\", \"string\");\r",
                      "        checkField(m.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'manager'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'manager'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 service → provider → account\r",
                      "if (\"service\" in item && item.service !== null) {\r",
                      "    const s = item.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"provider\" in s && s.provider !== null) {\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (\"account\" in p && p.account !== null) {\r",
                      "            checkField(p.account, \"id\", \"string\");\r",
                      "            checkField(p.account, \"name\", \"string\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует объект 'account' в 'provider'\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'provider' в 'service'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'service'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 work_hours\r",
                      "if (\"work_hours\" in item && item.work_hours !== null) {\r",
                      "    const wh = item.work_hours;\r",
                      "    checkField(wh, \"id\", \"number\");\r",
                      "    checkField(wh, \"name\", \"string\");\r",
                      "    checkField(wh, \"nodeID\", \"string\");\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'work_hours'\");\r",
                      "}\r",
                      "\r",
                      "// 🔻 Ошибки\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "pm.expect(item.status, 'status').to.eq('completed'); \r",
                      "pm.expect(item.completion_reason, 'completion_reason').to.eq('complete'); \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3e343fa8-1374-416c-a35c-543e06584258",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \r\n    \"status\": \"completed\",\r\n    \"completion_reason\": \"complete\",\r\n    \"note\": \"done\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}projects/{{project_id}}",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "{{project_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3e343fa8-1374-416c-a35c-543e06584258"
            }
          ],
          "id": "f85f097e-7fdc-4e67-afa4-89d76470c17e",
          "uid": "32335283-f85f097e-7fdc-4e67-afa4-89d76470c17e"
        },
        {
          "name": "Archive a project",
          "item": [
            {
              "name": "Archive a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.expect(item.archived, 'archived').to.eq(true); \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "9cafc795-4ba1-42f4-a221-283405db456c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/{{project_id}}/archive",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "{{project_id}}",
                    "archive"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-9cafc795-4ba1-42f4-a221-283405db456c"
            }
          ],
          "id": "78fa3cc2-3041-4a3d-bb32-0f10e5c4d733",
          "uid": "32335283-78fa3cc2-3041-4a3d-bb32-0f10e5c4d733"
        },
        {
          "name": "Trash a project",
          "item": [
            {
              "name": "Trash a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.expect(item.trashed, 'trashed').to.eq(true); \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f5ff72fe-c227-4932-ae3f-b5ac87985d8b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/{{project_id}}/trash",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "{{project_id}}",
                    "trash"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f5ff72fe-c227-4932-ae3f-b5ac87985d8b"
            }
          ],
          "id": "a88a2ada-caca-4b5d-89c8-2a974be7de69",
          "uid": "32335283-a88a2ada-caca-4b5d-89c8-2a974be7de69"
        },
        {
          "name": "Restore a project",
          "item": [
            {
              "name": "Restore a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.expect(item.trashed, 'trashed').to.eq(undefined); \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "426c43d7-eaa4-4e2f-838d-8da022317fc6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/{{project_id}}/restore",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "{{project_id}}",
                    "restore"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-426c43d7-eaa4-4e2f-838d-8da022317fc6"
            }
          ],
          "id": "8c0dfb40-382f-4538-a5c7-da9ad71c8660",
          "uid": "32335283-8c0dfb40-382f-4538-a5c7-da9ad71c8660"
        }
      ],
      "id": "e8c45aca-5558-4476-9e08-800e4aa535bb",
      "uid": "32335283-e8c45aca-5558-4476-9e08-800e4aa535bb"
    },
    {
      "name": "Workflows",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a workflow to a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "158e3c28-844c-4385-8d1b-c819fd9c3f0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/workflows/11",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "workflows",
                    "11"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-158e3c28-844c-4385-8d1b-c819fd9c3f0d"
            }
          ],
          "id": "4e6efa3e-17bf-4701-b9d1-f083225e70d6",
          "uid": "32335283-4e6efa3e-17bf-4701-b9d1-f083225e70d6"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all workflows of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const data = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(data, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(Array.isArray(data)).to.eql(true);\r",
                      "    pm.expect(data.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = data[0];\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Простые поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\", true);\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\");\r",
                      "checkField(item, \"impact\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// 🔹 manager\r",
                      "if (\"manager\" in item && item.manager !== null) {\r",
                      "    const m = item.manager;\r",
                      "    checkField(m, \"id\", \"number\");\r",
                      "    checkField(m, \"name\", \"string\");\r",
                      "    checkField(m, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"account\" in m && m.account !== null) {\r",
                      "        checkField(m.account, \"id\", \"string\");\r",
                      "        checkField(m.account, \"name\", \"string\");\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'account' в 'manager'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'manager'\");\r",
                      "}\r",
                      "\r",
                      "// 🔹 service → provider → account\r",
                      "if (\"service\" in item && item.service !== null) {\r",
                      "    const s = item.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (\"provider\" in s && s.provider !== null) {\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (\"account\" in p && p.account !== null) {\r",
                      "            checkField(p.account, \"id\", \"string\");\r",
                      "            checkField(p.account, \"name\", \"string\");\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует объект 'account' в 'provider'\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект 'provider' в 'service'\");\r",
                      "    }\r",
                      "} else {\r",
                      "    errors.push(\"Отсутствует объект 'service'\");\r",
                      "}\r",
                      "\r",
                      "// 🔻 Ошибки\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      "// Проверяем, что в ответе есть объект с id 11\r",
                      "pm.test(`Проверить присутствие объекта с id: 11 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 11;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 11`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ef72c856-a86e-41ec-8474-e48e1857ff0f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/workflows",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ef72c856-a86e-41ec-8474-e48e1857ff0f"
            }
          ],
          "id": "a48b0b40-23d7-42cf-b093-1c7573441603",
          "uid": "32335283-a48b0b40-23d7-42cf-b093-1c7573441603"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a workflow from a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0fb86fd0-160d-4ecb-88aa-d9f6bce828fa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/workflows/11",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "workflows",
                    "11"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0fb86fd0-160d-4ecb-88aa-d9f6bce828fa"
            },
            {
              "name": "Check \"Remove a workflow from a project\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе нет объекта с id 11\r",
                      "pm.test(`Проверить Отсутствие объекта с id: 11 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 11;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id 11 после удаления связи`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен отсутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4c769af9-c016-4f58-a477-8aec3bc99b0f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/workflows",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4c769af9-c016-4f58-a477-8aec3bc99b0f"
            }
          ],
          "id": "1d266423-a622-48a5-a55f-ee55ff091152",
          "uid": "32335283-1d266423-a622-48a5-a55f-ee55ff091152"
        }
      ],
      "id": "1ecc82e2-1db4-4025-abc1-33c96c34434c",
      "uid": "32335283-1ecc82e2-1db4-4025-abc1-33c96c34434c"
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a note",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e63631dd-6a59-463b-84f7-18b800514ea9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Hello {{$randomLoremWords}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}projects/7/notes",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e63631dd-6a59-463b-84f7-18b800514ea9"
            }
          ],
          "id": "bf102118-3899-4c9a-905a-557f6daeea23",
          "uid": "32335283-bf102118-3899-4c9a-905a-557f6daeea23"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List notes of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Получаем ответ от сервера\r",
                      "pm.test(\"Статус ответа 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверяем структуру массива и наличие полей\r",
                      "pm.test(\"Проверка массива объектов\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "\r",
                      "    // Перебираем каждый объект в массиве\r",
                      "    responseJson.forEach((item, index) => {\r",
                      "        // Проверяем наличие обязательных полей в каждом объекте\r",
                      "        pm.expect(item).to.have.property('text');\r",
                      "        pm.expect(item.text).to.be.a('string');\r",
                      "\r",
                      "        // Дополнительно можно добавить проверку других полей\r",
                      "        // pm.expect(item).to.have.property('otherField');\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "5cad686a-7f47-418e-8dc8-3f60b6789b88",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/notes",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "notes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-5cad686a-7f47-418e-8dc8-3f60b6789b88"
            }
          ],
          "id": "19bf796b-b600-4c93-a45c-52588fb75b28",
          "uid": "32335283-19bf796b-b600-4c93-a45c-52588fb75b28"
        }
      ],
      "id": "d4edf32c-247b-41ea-8391-db189a0f2841",
      "uid": "32335283-d4edf32c-247b-41ea-8391-db189a0f2841"
    },
    {
      "name": "Phases",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a phase to a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "pm.environment.set(\"phases_id\", item.id);\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка полей Project Phase\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"name\", \"string\");\r",
                      "checkField(item, \"position\", \"number\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"started_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Лог ошибок\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0d18f5f4-8888-4759-a0c9-fb998e66e2a8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{$randomLoremWords}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}projects/7/phases",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0d18f5f4-8888-4759-a0c9-fb998e66e2a8"
            }
          ],
          "id": "ab770488-d16b-4700-9856-6585e3693c16",
          "uid": "32335283-ab770488-d16b-4700-9856-6585e3693c16"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all phases of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(json.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка полей Project Phase\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"name\", \"string\");\r",
                      "checkField(item, \"position\", \"number\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"started_at\", \"string\", true);\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Лог ошибок, если есть\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b804ebf2-76d0-4b96-afd4-06966346b404",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/phases",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b804ebf2-76d0-4b96-afd4-06966346b404"
            }
          ],
          "id": "1a006e1a-9e19-4d25-9c19-f3219995928d",
          "uid": "32335283-1a006e1a-9e19-4d25-9c19-f3219995928d"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a phase of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const item = pm.response.json();\r",
                      "if (item.position !== 1) {\r",
                      "    console.error('position должно было обновиться на значение 1, но получено значение: ' + item.position);\r",
                      "}\r",
                      "pm.expect(item.position, 'position').to.eq(1);\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ff67d260-6fe6-49b5-99f9-73f531db13c4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"position\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}projects/7/phases/{{phases_id}}",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ff67d260-6fe6-49b5-99f9-73f531db13c4"
            }
          ],
          "id": "20f5e658-6821-4431-b061-1daf48544c78",
          "uid": "32335283-20f5e658-6821-4431-b061-1daf48544c78"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a phase from a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    if (pm.response.code !== 204) {\r",
                      "        console.error('статус должен был равен 204, но он такоFF:' + pm.response.code);\r",
                      "    }\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "668222cb-9375-4e71-b3ba-df2d2a9cc81e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/phases/{{phases_id}}",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-668222cb-9375-4e71-b3ba-df2d2a9cc81e"
            }
          ],
          "id": "97fea1bb-d34e-4cea-9add-c21263b68d2a",
          "uid": "32335283-97fea1bb-d34e-4cea-9add-c21263b68d2a"
        }
      ],
      "id": "42d75903-b02f-47f3-902d-c33b135ff676",
      "uid": "32335283-42d75903-b02f-47f3-902d-c33b135ff676"
    },
    {
      "name": "Problems",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a problem to a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3860d620-24f8-43b0-b694-bd6d4037c6e2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/problems/7",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "problems",
                    "7"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3860d620-24f8-43b0-b694-bd6d4037c6e2"
            }
          ],
          "id": "7ae8ffc6-26af-46c3-b6ef-7eb04f680e09",
          "uid": "32335283-7ae8ffc6-26af-46c3-b6ef-7eb04f680e09"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all problems of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "\r",
                      "// Проверяем, что в ответе есть объект с id 7\r",
                      "pm.test(`Проверить присутствие объекта с id: 7 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 7;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 7`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(json.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\");\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"impact\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"known_error\", \"boolean\");\r",
                      "checkField(item, \"analysis_target_at\", \"string\");\r",
                      "checkField(item, \"solved_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Team\r",
                      "checkField(item, \"team\", \"object\");\r",
                      "if (item.team) {\r",
                      "    checkField(item.team, \"id\", \"number\");\r",
                      "    checkField(item.team, \"name\", \"string\");\r",
                      "    checkField(item.team, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Member\r",
                      "checkField(item, \"member\", \"object\");\r",
                      "if (item.member) {\r",
                      "    checkField(item.member, \"id\", \"number\");\r",
                      "    checkField(item.member, \"name\", \"string\");\r",
                      "    checkField(item.member, \"account\", \"object\");\r",
                      "    checkField(item.member, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (item.member.account) {\r",
                      "        checkField(item.member.account, \"id\", \"string\");\r",
                      "        checkField(item.member.account, \"name\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Service\r",
                      "checkField(item, \"service\", \"object\");\r",
                      "if (item.service) {\r",
                      "    checkField(item.service, \"id\", \"number\");\r",
                      "    checkField(item.service, \"name\", \"string\");\r",
                      "    checkField(item.service, \"localized_name\", \"string\");\r",
                      "    checkField(item.service, \"nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item.service, \"provider\", \"object\");\r",
                      "    if (item.service.provider) {\r",
                      "        checkField(item.service.provider, \"id\", \"number\");\r",
                      "        checkField(item.service.provider, \"name\", \"string\");\r",
                      "        checkField(item.service.provider, \"account\", \"object\");\r",
                      "        checkField(item.service.provider, \"nodeID\", \"string\");\r",
                      "\r",
                      "        if (item.service.provider.account) {\r",
                      "            checkField(item.service.provider.account, \"id\", \"string\");\r",
                      "            checkField(item.service.provider.account, \"name\", \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Вывод ошибок, если есть\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "46a259cc-3c73-4455-925f-b0a0e1c31e49",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/problems",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "problems"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-46a259cc-3c73-4455-925f-b0a0e1c31e49"
            }
          ],
          "id": "60f99b0e-70d0-4b7f-9f47-490e1e7d377e",
          "uid": "32335283-60f99b0e-70d0-4b7f-9f47-490e1e7d377e"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a problem from a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "4044db55-e184-4778-baef-eab4f6036d19",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/problems/7",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "problems",
                    "7"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-4044db55-e184-4778-baef-eab4f6036d19"
            },
            {
              "name": "Check \"Remove a problem from a project\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе нет объекта с id 7\r",
                      "pm.test(`Проверить Отсутствие объекта с id: 7 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 7;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id 7 после удаления связи`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен отсутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "43035afa-e930-4dea-98bd-31812ed9f318",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/workflows",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-43035afa-e930-4dea-98bd-31812ed9f318"
            }
          ],
          "id": "54868c73-4177-4f46-b308-b3706e463fca",
          "uid": "32335283-54868c73-4177-4f46-b308-b3706e463fca"
        }
      ],
      "id": "59831c3f-f66d-40ff-af7e-c45dd2a81996",
      "uid": "32335283-59831c3f-f66d-40ff-af7e-c45dd2a81996"
    },
    {
      "name": "Project Tasks",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all project tasks of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(json.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\");\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"completion_target_at\", \"string\", true);\r",
                      "checkField(item, \"finished_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Account\r",
                      "checkField(item, \"account\", \"object\");\r",
                      "if (item.account) {\r",
                      "    checkField(item.account, \"id\", \"string\");\r",
                      "    checkField(item.account, \"name\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Phase\r",
                      "checkField(item, \"phase\", \"object\");\r",
                      "if (item.phase) {\r",
                      "    checkField(item.phase, \"completed_at\", \"string\", true);\r",
                      "    checkField(item.phase, \"created_at\", \"string\");\r",
                      "    checkField(item.phase, \"id\", \"number\");\r",
                      "    checkField(item.phase, \"name\", \"string\");\r",
                      "    checkField(item.phase, \"position\", \"number\");\r",
                      "    checkField(item.phase, \"started_at\", \"string\", true);\r",
                      "    checkField(item.phase, \"status\", \"string\");\r",
                      "    checkField(item.phase, \"updated_at\", \"string\");\r",
                      "    checkField(item.phase, \"nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item.phase, \"account\", \"object\");\r",
                      "    if (item.phase.account) {\r",
                      "        checkField(item.phase.account, \"id\", \"string\");\r",
                      "        checkField(item.phase.account, \"name\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Вывод ошибок, если есть\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "fb1ea9e7-c6f3-4d70-a449-6f75925594c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/3/tasks",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "3",
                    "tasks"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-fb1ea9e7-c6f3-4d70-a449-6f75925594c2"
            }
          ],
          "id": "60318b35-8f2b-46c9-bd1c-77bb2e71827e",
          "uid": "32335283-60318b35-8f2b-46c9-bd1c-77bb2e71827e"
        }
      ],
      "id": "ca59d609-420b-4dd3-8f33-fe6f88252405",
      "uid": "32335283-ca59d609-420b-4dd3-8f33-fe6f88252405"
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a request to a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6c29e46c-fb18-44de-b725-76c0849df612",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/requests/160",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "requests",
                    "160"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6c29e46c-fb18-44de-b725-76c0849df612"
            }
          ],
          "id": "865e5390-a976-4a2d-aeb9-c18e7a96e685",
          "uid": "32335283-865e5390-a976-4a2d-aeb9-c18e7a96e685"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all requests of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе есть объект с id 160\r",
                      "pm.test(`Проверить присутствие объекта с id: 160 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 160;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 160`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(json.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\");\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"category\", \"string\");\r",
                      "checkField(item, \"impact\", \"string\", true);\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"next_target_at\", \"string\");\r",
                      "checkField(item, \"completed_at\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "checkField(item, \"grouped_into\", \"object\", true);\r",
                      "\r",
                      "// Team\r",
                      "checkField(item, \"team\", \"object\");\r",
                      "if (item.team) {\r",
                      "    checkField(item.team, \"id\", \"number\");\r",
                      "    checkField(item.team, \"name\", \"string\");\r",
                      "    checkField(item.team, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Member\r",
                      "checkField(item, \"member\", \"object\");\r",
                      "if (item.member) {\r",
                      "    checkField(item.member, \"id\", \"number\");\r",
                      "    checkField(item.member, \"name\", \"string\");\r",
                      "    checkField(item.member, \"nodeID\", \"string\");\r",
                      "\r",
                      "    checkField(item.member, \"account\", \"object\");\r",
                      "    if (item.member.account) {\r",
                      "        checkField(item.member.account, \"id\", \"string\");\r",
                      "        checkField(item.member.account, \"name\", \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Service Instance\r",
                      "checkField(item, \"service_instance\", \"object\");\r",
                      "if (item.service_instance) {\r",
                      "    checkField(item.service_instance, \"id\", \"number\");\r",
                      "    checkField(item.service_instance, \"name\", \"string\");\r",
                      "    checkField(item.service_instance, \"localized_name\", \"string\");\r",
                      "    checkField(item.service_instance, \"nodeID\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Account\r",
                      "checkField(item, \"account\", \"object\");\r",
                      "if (item.account) {\r",
                      "    checkField(item.account, \"id\", \"string\");\r",
                      "    checkField(item.account, \"name\", \"string\");\r",
                      "}\r",
                      "\r",
                      "// Вывод ошибок\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "cf1e2930-29b2-4a79-b1bb-ed7ee3667b55",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/requests",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-cf1e2930-29b2-4a79-b1bb-ed7ee3667b55"
            }
          ],
          "id": "415bb6ce-88bf-4adb-a26d-32e8566b89bc",
          "uid": "32335283-415bb6ce-88bf-4adb-a26d-32e8566b89bc"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a request from a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e443c6f5-76ed-4bb0-a48b-ff85a8e49c12",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/requests/160",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "requests",
                    "160"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e443c6f5-76ed-4bb0-a48b-ff85a8e49c12"
            },
            {
              "name": "Check \"Remove a request from a project\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе нет объекта с id 160\r",
                      "pm.test(`Проверить Отсутствие объекта с id: 160 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 160;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id 160 после удаления связи`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен отсутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7a549c99-86d2-46d5-b80f-0c5b16de7ed1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/requests",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7a549c99-86d2-46d5-b80f-0c5b16de7ed1"
            }
          ],
          "id": "ec07d00f-97af-4c89-8cf5-59f4282215b1",
          "uid": "32335283-ec07d00f-97af-4c89-8cf5-59f4282215b1"
        }
      ],
      "id": "83881a6b-95e9-42ba-89b4-316733a27192",
      "uid": "32335283-83881a6b-95e9-42ba-89b4-316733a27192"
    },
    {
      "name": "Risks",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "Add a project to a risk",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2841a6b7-02c1-4928-9f5d-824d5534a746",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}risks/1/projects/7",
                  "host": [
                    "{{url}}risks"
                  ],
                  "path": [
                    "1",
                    "projects",
                    "7"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2841a6b7-02c1-4928-9f5d-824d5534a746"
            },
            {
              "name": "List risks of a project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "console.log(\"Ответ сервера:\\n\" + JSON.stringify(json, null, 2));\r",
                      "\r",
                      "pm.test(\"Массив не пустой\", function () {\r",
                      "    pm.expect(json.length).to.be.above(0);\r",
                      "});\r",
                      "\r",
                      "const item = json[0];\r",
                      "let errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, nullable = false) {\r",
                      "    if (!(field in obj)) {\r",
                      "        errors.push(`Отсутствует поле '${field}'`);\r",
                      "        return;\r",
                      "    }\r",
                      "    if (obj[field] === null) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле '${field}' не может быть null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "    if (typeof obj[field] !== type) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item, \"id\", \"number\");\r",
                      "checkField(item, \"sourceID\", \"string\");\r",
                      "checkField(item, \"subject\", \"string\");\r",
                      "checkField(item, \"severity\", \"string\");\r",
                      "checkField(item, \"status\", \"string\");\r",
                      "checkField(item, \"mitigation_target_at\", \"string\");\r",
                      "checkField(item, \"closed_at\", \"string\", true);\r",
                      "checkField(item, \"closure_reason\", \"string\", true);\r",
                      "checkField(item, \"created_at\", \"string\");\r",
                      "checkField(item, \"updated_at\", \"string\");\r",
                      "checkField(item, \"nodeID\", \"string\");\r",
                      "\r",
                      "// Вывод ошибок\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + errors.join(\"\\n\"));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c86dfd01-873d-4936-b99f-ddb0124129f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}projects/7/risks",
                  "host": [
                    "{{url}}projects"
                  ],
                  "path": [
                    "7",
                    "risks"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c86dfd01-873d-4936-b99f-ddb0124129f3"
            },
            {
              "name": "Remove all projects from a risk",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f120f4fe-86cd-42d7-a6d1-1a6a3d97adea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}risks/1/projects/7",
                  "host": [
                    "{{url}}risks"
                  ],
                  "path": [
                    "1",
                    "projects",
                    "7"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f120f4fe-86cd-42d7-a6d1-1a6a3d97adea"
            }
          ],
          "id": "cd75b238-fbd7-499a-9366-da7b628e023d",
          "uid": "32335283-cd75b238-fbd7-499a-9366-da7b628e023d"
        }
      ],
      "id": "017bd6a6-98ac-4042-9758-a441e9521ca4",
      "uid": "32335283-017bd6a6-98ac-4042-9758-a441e9521ca4"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}