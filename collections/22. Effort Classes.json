{
  "info": {
    "_postman_id": "b9e83a5f-eb3d-4caf-92b1-363047cac71b",
    "name": "22. Effort Classes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-28T12:14:38.000Z",
    "createdAt": "2025-07-28T11:11:38.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-b9e83a5f-eb3d-4caf-92b1-363047cac71b"
  },
  "item": [
    {
      "name": "Effort Classes",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "// Проверяем одиночный объект\r",
                      "const item = jsonData;\r",
                      "pm.environment.set(\"effort_class_id\", item.id);\r",
                      "\r",
                      "// Хелпер для валидации полей\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    const actual = item[field];\r",
                      "    if (actual === null && nullable) return;\r",
                      "    if (actual === null && !nullable) {\r",
                      "        errors.push(`Свойство '${field}' не должно быть null`);\r",
                      "    } else if (typeof actual !== expectedType) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${expectedType}, а пришло ${typeof actual}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "checkField(\"id\", \"number\");\r",
                      "checkField(\"name\", \"string\");\r",
                      "checkField(\"position\", \"number\");\r",
                      "checkField(\"cost_multiplier\", \"string\");\r",
                      "checkField(\"disabled\", \"boolean\");\r",
                      "checkField(\"created_at\", \"string\");\r",
                      "checkField(\"updated_at\", \"string\");\r",
                      "checkField(\"nodeID\", \"string\");\r",
                      "\r",
                      "// sourceID может быть null — проверка отдельно\r",
                      "if (item.sourceID !== null && typeof item.sourceID !== \"string\") {\r",
                      "    errors.push(`Свойство 'sourceID' ожидалось быть string или null, а пришло ${typeof item.sourceID}`);\r",
                      "}\r",
                      "\r",
                      "console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры и типов\", function () {\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e775087d-c17a-40a0-a2ac-a16eb6376325",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"cost_multiplier\": \"1.0\",\r\n    \"name\": \"effort class {{$randomCompanyName}}\",\r\n    \"position\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}effort_classes",
                  "host": [
                    "{{url}}effort_classes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e775087d-c17a-40a0-a2ac-a16eb6376325"
            }
          ],
          "id": "33ea0059-4c9a-4700-b761-fcb70c60b6dd",
          "uid": "32335283-33ea0059-4c9a-4700-b761-fcb70c60b6dd"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List effort classes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, path = \"\", optional = false) {\r",
                      "    const fullPath = path ? `${path}.${field}` : field;\r",
                      "    const value = obj[field];\r",
                      "\r",
                      "    if (value === undefined || value === null) {\r",
                      "        if (!optional) {\r",
                      "            errors.push(`Свойство '${fullPath}' обязательно, но отсутствует или равно null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (type === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fullPath}' ожидалось как массив, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== type) {\r",
                      "        errors.push(`Свойство '${fullPath}' ожидалось быть ${type}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (!Array.isArray(jsonData) || jsonData.length === 0) {\r",
                      "    errors.push(\"Ожидался непустой массив Effort Class\");\r",
                      "} else {\r",
                      "    const item = jsonData[0];\r",
                      "\r",
                      "    // Простые поля\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"name\", \"string\");\r",
                      "    checkField(item, \"position\", \"number\");\r",
                      "    checkField(item, \"cost_multiplier\", \"string\");\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "    // sourceID — не проверяется\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData[0], null, 2));\r",
                      "}\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7c8bcfb3-e903-4d7d-a7fa-e22d0a177009",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes",
                  "host": [
                    "{{url}}effort_classes"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7c8bcfb3-e903-4d7d-a7fa-e22d0a177009"
            },
            {
              "name": "Get a single effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "// Проверяем одиночный объект\r",
                      "const item = jsonData;\r",
                      "\r",
                      "// Хелпер для валидации полей\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    const actual = item[field];\r",
                      "    if (actual === null && nullable) return;\r",
                      "    if (actual === null && !nullable) {\r",
                      "        errors.push(`Свойство '${field}' не должно быть null`);\r",
                      "    } else if (typeof actual !== expectedType) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${expectedType}, а пришло ${typeof actual}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "checkField(\"id\", \"number\");\r",
                      "checkField(\"name\", \"string\");\r",
                      "checkField(\"position\", \"number\");\r",
                      "checkField(\"cost_multiplier\", \"string\");\r",
                      "checkField(\"disabled\", \"boolean\");\r",
                      "checkField(\"created_at\", \"string\");\r",
                      "checkField(\"updated_at\", \"string\");\r",
                      "checkField(\"nodeID\", \"string\");\r",
                      "\r",
                      "// sourceID может быть null — проверка отдельно\r",
                      "if (item.sourceID !== null && typeof item.sourceID !== \"string\") {\r",
                      "    errors.push(`Свойство 'sourceID' ожидалось быть string или null, а пришло ${typeof item.sourceID}`);\r",
                      "}\r",
                      "\r",
                      "console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры и типов\", function () {\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "68ff38a7-93fd-45b8-8a72-1f264160f3d8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-68ff38a7-93fd-45b8-8a72-1f264160f3d8"
            }
          ],
          "id": "bcca03ba-eb08-478d-87e2-b436409e37e5",
          "uid": "32335283-bcca03ba-eb08-478d-87e2-b436409e37e5"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "// Проверяем одиночный объект\r",
                      "const item = jsonData;\r",
                      "\r",
                      "// Хелпер для валидации полей\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    const actual = item[field];\r",
                      "    if (actual === null && nullable) return;\r",
                      "    if (actual === null && !nullable) {\r",
                      "        errors.push(`Свойство '${field}' не должно быть null`);\r",
                      "    } else if (typeof actual !== expectedType) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${expectedType}, а пришло ${typeof actual}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "checkField(\"id\", \"number\");\r",
                      "checkField(\"name\", \"string\");\r",
                      "checkField(\"position\", \"number\");\r",
                      "checkField(\"cost_multiplier\", \"string\");\r",
                      "checkField(\"disabled\", \"boolean\");\r",
                      "checkField(\"created_at\", \"string\");\r",
                      "checkField(\"updated_at\", \"string\");\r",
                      "checkField(\"nodeID\", \"string\");\r",
                      "\r",
                      "// sourceID может быть null — проверка отдельно\r",
                      "if (item.sourceID !== null && typeof item.sourceID !== \"string\") {\r",
                      "    errors.push(`Свойство 'sourceID' ожидалось быть string или null, а пришло ${typeof item.sourceID}`);\r",
                      "}\r",
                      "\r",
                      "if (item.cost_multiplier !== \"2.0\") {\r",
                      "    errors.push(`Свойство 'cost_multiplier' ожидалось быть \"2.0\", а пришло ${item.cost_multiplier}`);\r",
                      "}\r",
                      "\r",
                      "if (item.position !== 2) {\r",
                      "    errors.push(`Свойство 'position' ожидалось быть 2, а пришло ${item.position}`);\r",
                      "}\r",
                      "\r",
                      "console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры и типов\", function () {\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6eeb85a4-368b-448a-9e87-535d05d94ef6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"cost_multiplier\": \"2.0\",\r\n    \"position\": 2\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6eeb85a4-368b-448a-9e87-535d05d94ef6"
            }
          ],
          "id": "86195c7d-27df-4666-9a78-701eb2c4d8f2",
          "uid": "32335283-86195c7d-27df-4666-9a78-701eb2c4d8f2"
        }
      ],
      "id": "a4b88a3f-6d51-4dcc-b7d9-b97c2ff3e7c5",
      "uid": "32335283-a4b88a3f-6d51-4dcc-b7d9-b97c2ff3e7c5"
    },
    {
      "name": "Timesheet Settings",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a timesheet settings",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа — 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"timesheet_settings_id\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c2aa179b-7b97-4588-a321-02bf3b5efa53",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \r\n    \"name\": \"timesheet settings {{$randomCompanyName}}\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}timesheet_settings",
                  "host": [
                    "{{url}}timesheet_settings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c2aa179b-7b97-4588-a321-02bf3b5efa53"
            },
            {
              "name": "Add a timesheet settings to an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "04c5f749-9fd1-42ee-97f5-296d5d5c00c9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/timesheet_settings/{{timesheet_settings_id}}",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "timesheet_settings",
                    "{{timesheet_settings_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-04c5f749-9fd1-42ee-97f5-296d5d5c00c9"
            }
          ],
          "id": "4ad03c1a-9d2c-4479-98c8-17130c34c923",
          "uid": "32335283-4ad03c1a-9d2c-4479-98c8-17130c34c923"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all timesheet settings of an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Функция проверки поля\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры данных\r",
                      "pm.test(\"Валидация структуры ответа\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let jsonData;\r",
                      "    try {\r",
                      "        jsonData = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    let item;\r",
                      "    if (Array.isArray(jsonData)) {\r",
                      "        if (jsonData.length === 0) {\r",
                      "            errors.push(\"Массив ответа пуст\");\r",
                      "            pm.expect(errors.length).to.eql(0);\r",
                      "            return;\r",
                      "        }\r",
                      "        item = jsonData[0];\r",
                      "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                      "        item = jsonData;\r",
                      "    } else {\r",
                      "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем поля объекта\r",
                      "    checkField(item.id, \"number\");\r",
                      "    checkField(item.sourceID, \"number\", true); // nullable\r",
                      "    checkField(item.name, \"string\");\r",
                      "    checkField(item.created_at, \"string\");\r",
                      "    checkField(item.updated_at, \"string\");\r",
                      "    checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "    // Вывод при ошибке\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    // Проверка финального количества ошибок\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7c7e1945-6a11-4671-ae24-509b60006062",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/timesheet_settings",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "timesheet_settings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7c7e1945-6a11-4671-ae24-509b60006062"
            },
            {
              "name": "Get a single effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "// Проверяем одиночный объект\r",
                      "const item = jsonData;\r",
                      "\r",
                      "// Хелпер для валидации полей\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    const actual = item[field];\r",
                      "    if (actual === null && nullable) return;\r",
                      "    if (actual === null && !nullable) {\r",
                      "        errors.push(`Свойство '${field}' не должно быть null`);\r",
                      "    } else if (typeof actual !== expectedType) {\r",
                      "        errors.push(`Свойство '${field}' ожидалось быть ${expectedType}, а пришло ${typeof actual}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "let errors = [];\r",
                      "\r",
                      "checkField(\"id\", \"number\");\r",
                      "checkField(\"name\", \"string\");\r",
                      "checkField(\"position\", \"number\");\r",
                      "checkField(\"cost_multiplier\", \"string\");\r",
                      "checkField(\"disabled\", \"boolean\");\r",
                      "checkField(\"created_at\", \"string\");\r",
                      "checkField(\"updated_at\", \"string\");\r",
                      "checkField(\"nodeID\", \"string\");\r",
                      "\r",
                      "// sourceID может быть null — проверка отдельно\r",
                      "if (item.sourceID !== null && typeof item.sourceID !== \"string\") {\r",
                      "    errors.push(`Свойство 'sourceID' ожидалось быть string или null, а пришло ${typeof item.sourceID}`);\r",
                      "}\r",
                      "\r",
                      "console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры и типов\", function () {\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "34004160-03d2-469c-a480-c4f47b6d1c7d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-34004160-03d2-469c-a480-c4f47b6d1c7d"
            }
          ],
          "id": "010c74e0-cdd4-4ea5-bdf1-129950cf6807",
          "uid": "32335283-010c74e0-cdd4-4ea5-bdf1-129950cf6807"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a timesheet settings from an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "952ed9bb-577f-4929-8e16-ba2d063073ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/timesheet_settings/{{timesheet_settings_id}}",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "timesheet_settings",
                    "{{timesheet_settings_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-952ed9bb-577f-4929-8e16-ba2d063073ad"
            },
            {
              "name": "List all timesheet settings of an effort class Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверяем, что в ответе нет объекта с id 100\r",
                      "pm.test(`Проверить отсутствие объекта с id: {{timesheet_settings_id}} в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = pm.environment.get('timesheet_settings_id');\r",
                      "    console.log('targetId', targetId);\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id timesheet_settings_id после удаления`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "5f1fded9-a51e-46eb-aaf2-b379a25e2d22",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/timesheet_settings",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "timesheet_settings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-5f1fded9-a51e-46eb-aaf2-b379a25e2d22"
            }
          ],
          "id": "5c992045-c4ae-43ad-aaaa-f8dc9fe7ad6b",
          "uid": "32335283-5c992045-c4ae-43ad-aaaa-f8dc9fe7ad6b"
        }
      ],
      "id": "b5bfffa1-304d-4bee-a020-9fdc9b9ad3de",
      "uid": "32335283-b5bfffa1-304d-4bee-a020-9fdc9b9ad3de"
    },
    {
      "name": "Service Offerings",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a service offering to an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "b48852ee-442d-48f3-8b3d-03261f87adfe",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/service_offerings/193",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "service_offerings",
                    "193"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-b48852ee-442d-48f3-8b3d-03261f87adfe"
            }
          ],
          "id": "2e48456e-5241-478a-8d1f-59ac377b211a",
          "uid": "32335283-2e48456e-5241-478a-8d1f-59ac377b211a"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all service offerings of an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Функция проверки поля\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка статуса\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры\r",
                      "pm.test(\"Валидация структуры ответа\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let jsonData;\r",
                      "    try {\r",
                      "        jsonData = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    let item;\r",
                      "    if (Array.isArray(jsonData)) {\r",
                      "        if (jsonData.length === 0) {\r",
                      "            errors.push(\"Массив ответа пуст\");\r",
                      "            pm.expect(errors.length).to.eql(0);\r",
                      "            return;\r",
                      "        }\r",
                      "        item = jsonData[0];\r",
                      "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                      "        item = jsonData;\r",
                      "    } else {\r",
                      "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // Проверка полей верхнего уровня\r",
                      "    checkField(item.id, \"number\");\r",
                      "    checkField(item.sourceID, \"number\", true); // nullable\r",
                      "    checkField(item.name, \"string\");\r",
                      "    checkField(item.status, \"string\");\r",
                      "    checkField(item.created_at, \"string\");\r",
                      "    checkField(item.updated_at, \"string\");\r",
                      "    checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "    // Проверка service\r",
                      "    if (item.service) {\r",
                      "        checkField(item.service.id, \"number\");\r",
                      "        checkField(item.service.name, \"string\");\r",
                      "        checkField(item.service.localized_name, \"string\");\r",
                      "        checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "        // Проверка provider\r",
                      "        if (item.service.provider) {\r",
                      "            checkField(item.service.provider.id, \"number\");\r",
                      "            checkField(item.service.provider.name, \"string\");\r",
                      "            checkField(item.service.provider.nodeID, \"string\");\r",
                      "\r",
                      "            // Проверка account\r",
                      "            if (item.service.provider.account) {\r",
                      "                checkField(item.service.provider.account.id, \"string\");\r",
                      "                checkField(item.service.provider.account.name, \"string\");\r",
                      "            } else {\r",
                      "                errors.push(\"Отсутствует объект account в provider\");\r",
                      "            }\r",
                      "        } else {\r",
                      "            errors.push(\"Отсутствует объект provider в service\");\r",
                      "        }\r",
                      "    } else {\r",
                      "        errors.push(\"Отсутствует объект service\");\r",
                      "    }\r",
                      "\r",
                      "    // Вывод ошибок при наличии\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a01d3669-25eb-4363-bde3-1e55717911ec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/service_offerings",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "service_offerings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a01d3669-25eb-4363-bde3-1e55717911ec"
            }
          ],
          "id": "e7f05920-0331-46e6-b723-923f44f63b5b",
          "uid": "32335283-e7f05920-0331-46e6-b723-923f44f63b5b"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service offering from an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "98631b93-f5ea-4781-8e1f-31294b65ad56",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/service_offerings/193",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "service_offerings",
                    "193"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-98631b93-f5ea-4781-8e1f-31294b65ad56"
            },
            {
              "name": "Check \"Remove a service offering from an effort class\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(`Проверить отсутствие объекта с id: 193 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 193;\r",
                      "    console.log('targetId', targetId);\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id  после удаления`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "3f3e049b-3d30-4f74-8fab-5d71321a0a42",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/service_offerings",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "service_offerings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-3f3e049b-3d30-4f74-8fab-5d71321a0a42"
            }
          ],
          "id": "65578a5a-fb6f-4cc2-b76f-eee91ca4bdbc",
          "uid": "32335283-65578a5a-fb6f-4cc2-b76f-eee91ca4bdbc"
        }
      ],
      "id": "f2af4e10-e5d1-41f0-b01d-d01a98c22416",
      "uid": "32335283-f2af4e10-e5d1-41f0-b01d-d01a98c22416"
    },
    {
      "name": "Skill Pools",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a skill pool to an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "aa5bb950-88f3-4420-94b6-d7703dc12dcc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/skill_pools/2",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "skill_pools",
                    "2"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-aa5bb950-88f3-4420-94b6-d7703dc12dcc"
            }
          ],
          "id": "dafcf1df-e380-4cac-9645-90ee71800f1a",
          "uid": "32335283-dafcf1df-e380-4cac-9645-90ee71800f1a"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all skill pools of an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Функция проверки поля\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (field === null || field === undefined) {\r",
                      "        if (!nullable) {\r",
                      "            errors.push(`Поле не должно быть null или undefined (ожидался тип ${expectedType})`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался массив, но получен ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, но получен ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Проверка статуса\r",
                      "pm.test(\"Статус 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры\r",
                      "pm.test(\"Валидация структуры ответа\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    let jsonData;\r",
                      "    try {\r",
                      "        jsonData = pm.response.json();\r",
                      "    } catch (e) {\r",
                      "        errors.push(\"Ответ не является корректным JSON\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    let item;\r",
                      "    if (Array.isArray(jsonData)) {\r",
                      "        if (jsonData.length === 0) {\r",
                      "            errors.push(\"Массив ответа пуст\");\r",
                      "            pm.expect(errors.length).to.eql(0);\r",
                      "            return;\r",
                      "        }\r",
                      "        item = jsonData[0];\r",
                      "    } else if (typeof jsonData === 'object' && jsonData !== null) {\r",
                      "        item = jsonData;\r",
                      "    } else {\r",
                      "        errors.push(\"Ожидался объект или массив объектов в ответе\");\r",
                      "        pm.expect(errors.length).to.eql(0);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    // Проверка полей SkillPool\r",
                      "    checkField(item.id, \"number\");\r",
                      "    checkField(item.sourceID, \"number\", true); // nullable\r",
                      "    checkField(item.name, \"string\");\r",
                      "    checkField(item.created_at, \"string\");\r",
                      "    checkField(item.updated_at, \"string\");\r",
                      "    checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "    // Вывод ошибок при наличии\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length).to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "eef8349b-0a79-4a11-80ab-1adde0ee99a0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/skill_pools",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "skill_pools"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-eef8349b-0a79-4a11-80ab-1adde0ee99a0"
            }
          ],
          "id": "96e12f10-10ca-4bec-8dac-2242414cec37",
          "uid": "32335283-96e12f10-10ca-4bec-8dac-2242414cec37"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a skill pool from an effort class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "82ad4734-5efe-4a8d-afb9-33c279e0aa26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/skill_pools/2",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "skill_pools",
                    "2"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-82ad4734-5efe-4a8d-afb9-33c279e0aa26"
            },
            {
              "name": "Check \"Remove a skill pool from an effort class\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(`Проверить отсутствие объекта с id: 2 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 2;\r",
                      "    console.log('targetId', targetId);\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id  после удаления`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} не должен присутствовать в ответе`).to.not.exist;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6a0c6cf3-6718-4b3a-9166-fcb1e0f3dfea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}effort_classes/{{effort_class_id}}/skill_pools",
                  "host": [
                    "{{url}}effort_classes"
                  ],
                  "path": [
                    "{{effort_class_id}}",
                    "skill_pools"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6a0c6cf3-6718-4b3a-9166-fcb1e0f3dfea"
            }
          ],
          "id": "f4fb5430-c666-46ac-9765-df50de21709b",
          "uid": "32335283-f4fb5430-c666-46ac-9765-df50de21709b"
        }
      ],
      "id": "6079a4d3-efb2-48af-ac13-70807b8ee4c9",
      "uid": "32335283-6079a4d3-efb2-48af-ac13-70807b8ee4c9"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}