{
  "info": {
    "_postman_id": "2a7dddd6-3054-4b2e-8677-3bdc0f37929e",
    "name": "04. FLSA",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-08-04T11:26:55.000Z",
    "createdAt": "2025-06-27T13:24:12.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-2a7dddd6-3054-4b2e-8677-3bdc0f37929e"
  },
  "item": [
    {
      "name": "GET",
      "item": [
        {
          "name": "1.1 get list FLSA",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                  "\r",
                  "    // Проверяем что ответ является массивом\r",
                  "    pm.test(\"Response is an array\", function () {\r",
                  "        const response = pm.response.json();\r",
                  "        const isArray = Array.isArray(response);\r",
                  "        if (!isArray) {\r",
                  "            console.error(\"ОШИБКА: Ответ не является массивом\");\r",
                  "        }\r",
                  "        pm.expect(isArray).to.be.true;\r",
                  "    });\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "\r",
                  "    // Проверяем что массив не пустой\r",
                  "    pm.test(\"Response is not empty\", function () {\r",
                  "        const isEmpty = response.length === 0;\r",
                  "        if (isEmpty) {\r",
                  "            console.error(\"ОШИБКА: Получен пустой массив в ответе\");\r",
                  "        }\r",
                  "        pm.expect(response).to.not.be.empty;\r",
                  "    });\r",
                  "\r",
                  "    // Проверяем структуру только первого элемента\r",
                  "    if (response.length > 0) {\r",
                  "        const item = response[0];\r",
                  "        const itemPrefix = \"Первый элемент\";\r",
                  "\r",
                  "        // Проверяем наличие обязательных полей\r",
                  "        pm.test(`${itemPrefix} has required properties`, function () {\r",
                  "            try {\r",
                  "                pm.expect(item).to.include.keys('id', 'name', 'status', 'created_at', 'updated_at', 'provider', 'account', 'nodeID');\r",
                  "                console.log(`${itemPrefix}: Все обязательные поля присутствуют`);\r",
                  "            } catch (e) {\r",
                  "                console.error(`ОШИБКА: ${itemPrefix} отсутствуют обязательные поля:`, e.message);\r",
                  "                throw e;\r",
                  "            }\r",
                  "        });\r",
                  "\r",
                  "        // Проверка поля id\r",
                  "        if (item.hasOwnProperty('id')) {\r",
                  "            pm.test(`${itemPrefix} id has correct type`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.id).to.be.a('number');\r",
                  "                    console.log(`${itemPrefix}: Поле id имеет корректный тип (number)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} поле id имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: ${itemPrefix} отсутствует поле id`);\r",
                  "        }\r",
                  "\r",
                  "        // Проверка поля name\r",
                  "        if (item.hasOwnProperty('name')) {\r",
                  "            pm.test(`${itemPrefix} name has correct type`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.name).to.be.a('string');\r",
                  "                    console.log(`${itemPrefix}: Поле name имеет корректный тип (string)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} поле name имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: ${itemPrefix} отсутствует поле name`);\r",
                  "        }\r",
                  "\r",
                  "        // Проверка поля status\r",
                  "        if (item.hasOwnProperty('status')) {\r",
                  "            pm.test(`${itemPrefix} status has correct type`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.status).to.be.a('string');\r",
                  "                    console.log(`${itemPrefix}: Поле status имеет корректный тип (string)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} поле status имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: ${itemPrefix} отсутствует поле status`);\r",
                  "        }\r",
                  "\r",
                  "        // Проверка поля provider\r",
                  "        if (item.hasOwnProperty('provider')) {\r",
                  "            pm.test(`${itemPrefix} provider has correct structure`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.provider).to.be.an('object');\r",
                  "                    pm.expect(item.provider).to.include.keys('id', 'name', 'account', 'nodeID');\r",
                  "                    console.log(`${itemPrefix}: Поле provider имеет корректную структуру`);\r",
                  "\r",
                  "                    // Проверка вложенных полей provider\r",
                  "                    if (item.provider.hasOwnProperty('id')) {\r",
                  "                        pm.expect(item.provider.id).to.be.a('number');\r",
                  "                    } else {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} в объекте provider отсутствует поле id`);\r",
                  "                    }\r",
                  "\r",
                  "                    if (item.provider.hasOwnProperty('name')) {\r",
                  "                        pm.expect(item.provider.name).to.be.a('string');\r",
                  "                    } else {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} в объекте provider отсутствует поле name`);\r",
                  "                    }\r",
                  "\r",
                  "                    // Проверка account внутри provider\r",
                  "                    if (item.provider.hasOwnProperty('account')) {\r",
                  "                        pm.test(`${itemPrefix} provider.account has correct structure`, function () {\r",
                  "                            pm.expect(item.provider.account).to.be.an('object');\r",
                  "                            pm.expect(item.provider.account).to.include.keys('id', 'name');\r",
                  "                            pm.expect(item.provider.account.id).to.be.a('string');\r",
                  "                            pm.expect(item.provider.account.name).to.be.a('string');\r",
                  "                        });\r",
                  "                    } else {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} в объекте provider отсутствует поле account`);\r",
                  "                    }\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} структура поля provider некорректна:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: ${itemPrefix} отсутствует поле provider`);\r",
                  "        }\r",
                  "\r",
                  "        // Проверка поля account\r",
                  "        if (item.hasOwnProperty('account')) {\r",
                  "            pm.test(`${itemPrefix} account has correct structure`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.account).to.be.an('object');\r",
                  "                    pm.expect(item.account).to.include.keys('id', 'name');\r",
                  "                    console.log(`${itemPrefix}: Поле account имеет корректную структуру`);\r",
                  "\r",
                  "                    if (item.account.hasOwnProperty('id')) {\r",
                  "                        pm.expect(item.account.id).to.be.a('string');\r",
                  "                    } else {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} в объекте account отсутствует поле id`);\r",
                  "                    }\r",
                  "\r",
                  "                    if (item.account.hasOwnProperty('name')) {\r",
                  "                        pm.expect(item.account.name).to.be.a('string');\r",
                  "                    } else {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} в объекте account отсутствует поле name`);\r",
                  "                    }\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} структура поля account некорректна:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: ${itemPrefix} отсутствует поле account`);\r",
                  "        }\r",
                  "\r",
                  "        // Проверка полей дат\r",
                  "        ['created_at', 'updated_at'].forEach(field => {\r",
                  "            if (item.hasOwnProperty(field)) {\r",
                  "                pm.test(`${itemPrefix} ${field} has correct format`, function () {\r",
                  "                    try {\r",
                  "                        pm.expect(item[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2}$/);\r",
                  "                        console.log(`${itemPrefix}: Поле ${field} имеет корректный формат даты`);\r",
                  "                    } catch (e) {\r",
                  "                        console.error(`ОШИБКА: ${itemPrefix} поле ${field} имеет некорректный формат даты:`, e.message);\r",
                  "                        throw e;\r",
                  "                    }\r",
                  "                });\r",
                  "            } else {\r",
                  "                console.error(`ОШИБКА: ${itemPrefix} отсутствует поле ${field}`);\r",
                  "            }\r",
                  "        });\r",
                  "\r",
                  "        // Проверка поля sourceID (может быть null)\r",
                  "        if (item.hasOwnProperty('sourceID')) {\r",
                  "            pm.test(`${itemPrefix} sourceID is nullable`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(item.sourceID).to.satisfy((val) => val === null || typeof val === 'string' || typeof val === 'number');\r",
                  "                    console.log(`${itemPrefix}: Поле sourceID имеет допустимое значение (null или строка/число)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: ${itemPrefix} поле sourceID имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.log(`ПРЕДУПРЕЖДЕНИЕ: ${itemPrefix} отсутствует поле sourceID (но оно может быть опциональным)`);\r",
                  "        }\r",
                  "    } else {\r",
                  "        console.error(\"ПРЕДУПРЕЖДЕНИЕ: Массив пуст, проверка элементов невозможна\");\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "6a023d9f-af3e-43dc-a660-7f7825d46091",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dc",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}flsas",
              "host": [
                "{{url}}flsas"
              ]
            }
          },
          "response": [],
          "uid": "32335283-6a023d9f-af3e-43dc-a660-7f7825d46091"
        },
        {
          "name": "1.2 get flsa/id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                  "\r",
                  "    // Проверяем что ответ является объектом\r",
                  "    pm.test(\"Response is an object\", function () {\r",
                  "        const response = pm.response.json();\r",
                  "        const isObject = typeof response === 'object' && !Array.isArray(response);\r",
                  "        if (!isObject) {\r",
                  "            console.error(\"ОШИБКА: Ответ не является объектом\");\r",
                  "        }\r",
                  "        pm.expect(isObject).to.be.true;\r",
                  "    });\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "\r",
                  "    // Проверяем что объект не пустой\r",
                  "    pm.test(\"Response is not empty\", function () {\r",
                  "        const isEmpty = Object.keys(response).length === 0;\r",
                  "        if (isEmpty) {\r",
                  "            console.error(\"ОШИБКА: Получен пустой объект в ответе\");\r",
                  "        }\r",
                  "        pm.expect(response).to.not.be.empty;\r",
                  "    });\r",
                  "\r",
                  "    // Проверяем наличие обязательных полей\r",
                  "    pm.test(\"Response has required properties\", function () {\r",
                  "        try {\r",
                  "            pm.expect(response).to.include.keys(\r",
                  "                'id', 'name', 'status', 'created_at', 'updated_at',\r",
                  "                'customer', 'provider', 'account', 'nodeID',\r",
                  "                'start_date', 'time_zone', 'charges'\r",
                  "            );\r",
                  "            console.log(\"Все обязательные поля присутствуют\");\r",
                  "        } catch (e) {\r",
                  "            console.error(\"ОШИБКА: Отсутствуют обязательные поля:\", e.message);\r",
                  "            throw e;\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка простых полей\r",
                  "    const simpleFields = {\r",
                  "        'id': 'number',\r",
                  "        'name': 'string',\r",
                  "        'status': 'string',\r",
                  "        'charges': 'string',\r",
                  "        'time_zone': 'string',\r",
                  "        'first_call_resolutions': 'number',\r",
                  "        'pickup_target': 'number',\r",
                  "        'pickups_within_target': 'number',\r",
                  "        'rejected_solutions': 'number',\r",
                  "        'service_desk_only_resolutions': 'number',\r",
                  "        'service_desk_resolutions': 'number'\r",
                  "    };\r",
                  "\r",
                  "    Object.entries(simpleFields).forEach(([field, type]) => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} has correct type`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.be.a(type);\r",
                  "                    console.log(`Поле ${field} имеет корректный тип (${type})`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: Отсутствует поле ${field}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка полей с датами\r",
                  "    ['created_at', 'updated_at', 'start_date'].forEach(field => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} has correct format`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2})?$/);\r",
                  "                    console.log(`Поле ${field} имеет корректный формат даты`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный формат даты:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: Отсутствует поле ${field}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка nullable полей\r",
                  "    ['expiry_date', 'remarks', 'source', 'sourceID', 'support_chat_pickup_target', 'target_details'].forEach(field => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} is nullable`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.satisfy((val) => val === null || typeof val === 'string');\r",
                  "                    console.log(`Поле ${field} имеет допустимое значение (null или строка)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректное значение:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.log(`ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле ${field} (но оно может быть опциональным)`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка поля notice_date (специальный формат)\r",
                  "    if (response.hasOwnProperty('notice_date')) {\r",
                  "        pm.test(\"Field notice_date has correct format\", function () {\r",
                  "            try {\r",
                  "                pm.expect(response.notice_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "                console.log(\"Поле notice_date имеет корректный формат даты (YYYY-MM-DD)\");\r",
                  "            } catch (e) {\r",
                  "                console.error(\"ОШИБКА: Поле notice_date имеет некорректный формат даты:\", e.message);\r",
                  "                throw e;\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        console.error(\"ОШИБКА: Отсутствует поле notice_date\");\r",
                  "    }\r",
                  "\r",
                  "    // Проверка вложенных объектов\r",
                  "    const nestedObjects = ['customer', 'provider', 'service_desk_team', 'support_hours', 'account'];\r",
                  "\r",
                  "    nestedObjects.forEach(obj => {\r",
                  "        if (response.hasOwnProperty(obj)) {\r",
                  "            pm.test(`Object ${obj} has correct structure`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[obj]).to.be.an('object');\r",
                  "\r",
                  "                    if (obj !== 'account') {\r",
                  "                        pm.expect(response[obj]).to.include.keys('id', 'name', 'account', 'nodeID');\r",
                  "                    } else {\r",
                  "                        pm.expect(response[obj]).to.include.keys('id', 'name');\r",
                  "                    }\r",
                  "\r",
                  "                    console.log(`Объект ${obj} имеет корректную структуру`);\r",
                  "\r",
                  "                    // Проверка вложенных полей\r",
                  "                    if (response[obj].hasOwnProperty('id')) {\r",
                  "                        const expectedType = obj === 'account' ? 'string' : 'number';\r",
                  "                        pm.expect(response[obj].id).to.be.a(expectedType);\r",
                  "                    }\r",
                  "\r",
                  "                    if (response[obj].hasOwnProperty('name')) {\r",
                  "                        pm.expect(response[obj].name).to.be.a('string');\r",
                  "                    }\r",
                  "\r",
                  "                    // Проверка account внутри вложенных объектов\r",
                  "                    if (response[obj].hasOwnProperty('account') && obj !== 'account') {\r",
                  "                        pm.test(`Object ${obj}.account has correct structure`, function () {\r",
                  "                            pm.expect(response[obj].account).to.be.an('object');\r",
                  "                            pm.expect(response[obj].account).to.include.keys('id', 'name');\r",
                  "                            pm.expect(response[obj].account.id).to.be.a('string');\r",
                  "                            pm.expect(response[obj].account.name).to.be.a('string');\r",
                  "                        });\r",
                  "                    }\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Структура объекта ${obj} некорректна:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else if (obj !== 'customer_rep') { // customer_rep может быть опциональным\r",
                  "            console.error(`ОШИБКА: Отсутствует объект ${obj}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка массива attachments\r",
                  "    if (response.hasOwnProperty('attachments')) {\r",
                  "        pm.test(\"Attachments is an array\", function () {\r",
                  "            try {\r",
                  "                pm.expect(response.attachments).to.be.an('array');\r",
                  "                console.log(\"Поле attachments является массивом\");\r",
                  "            } catch (e) {\r",
                  "                console.error(\"ОШИБКА: Поле attachments не является массивом:\", e.message);\r",
                  "                throw e;\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        console.error(\"ОШИБКА: Отсутствует поле attachments\");\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "5534ecd7-b89d-406f-863a-b4bb4654d921",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dc",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}flsas/14",
              "host": [
                "{{url}}flsas"
              ],
              "path": [
                "14"
              ]
            }
          },
          "response": [],
          "uid": "32335283-5534ecd7-b89d-406f-863a-b4bb4654d921"
        }
      ],
      "id": "b96e5686-dde3-4392-b611-d969a5a72d75",
      "uid": "32335283-b96e5686-dde3-4392-b611-d969a5a72d75"
    },
    {
      "name": "PATCH",
      "item": [
        {
          "name": "1.3 get flsa dp-account, set id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    console.log(\"Статус код ответа: 200 - Успешно\");\r",
                  "\r",
                  "    // Проверяем что ответ является массивом\r",
                  "    pm.test(\"Response is an array\", function () {\r",
                  "        const response = pm.response.json();\r",
                  "        const isArray = Array.isArray(response);\r",
                  "        if (!isArray) {\r",
                  "            console.error(\"ОШИБКА: Ответ не является массивом\");\r",
                  "        }\r",
                  "        pm.expect(isArray).to.be.true;\r",
                  "    });\r",
                  "\r",
                  "    const response = pm.response.json()\r",
                  "    pm.environment.set(\"flsa_id\", response[0].id);\r",
                  "    if (response[0].status !== 'active') {\r",
                  "        console.error(\"ОШИБКА: Статус не является 'active'\");\r",
                  "    }\r",
                  "    pm.expect(response[0].status, 'status').to.eq('active');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "33836bab-8838-4afd-b9cd-bb2a3145a4c8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dp",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}flsas/active",
              "host": [
                "{{url}}flsas"
              ],
              "path": [
                "active"
              ]
            }
          },
          "response": [],
          "uid": "32335283-33836bab-8838-4afd-b9cd-bb2a3145a4c8"
        },
        {
          "name": "1.4 update flsa",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "pm.test(\"Проверка ответа сервера\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    const data = pm.response.json();\r",
                  "    pm.expect(data).to.be.an(\"object\");\r",
                  "    pm.expect(data.status, 'status').to.eq('expired');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "73ab4d78-d17d-48aa-acfa-a03122f5c7d8",
                "exec": [
                  "// Получаем вчерашнюю дату\r",
                  "const yesterday = new Date();\r",
                  "yesterday.setDate(yesterday.getDate() - 1); // Отнимаем 1 день\r",
                  "\r",
                  "// Форматируем дату в YYYY-MM-DD\r",
                  "const year = yesterday.getFullYear();\r",
                  "const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // +1, т.к. месяцы 0-11\r",
                  "const day = String(yesterday.getDate()).padStart(2, '0');\r",
                  "\r",
                  "const formattedDate = `${year}-${month}-${day}`;\r",
                  "\r",
                  "// Сохраняем в переменную Postman\r",
                  "pm.environment.set(\"yesterday_date\", formattedDate);\r",
                  "\r",
                  "// Логируем для проверки (опционально)\r",
                  "console.log(\"Вчерашняя дата: \", formattedDate);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "0ca40487-62a3-4c1c-8d39-a116e6a26f9f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dp",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\": \"expired\",\r\n    \"expiry_date\": \"{{yesterday_date}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}flsas/{{flsa_id}}",
              "host": [
                "{{url}}flsas"
              ],
              "path": [
                "{{flsa_id}}"
              ]
            }
          },
          "response": [],
          "uid": "32335283-0ca40487-62a3-4c1c-8d39-a116e6a26f9f"
        }
      ],
      "id": "f8bbdab1-35f7-4f52-8e9c-886ccb252c94",
      "uid": "32335283-f8bbdab1-35f7-4f52-8e9c-886ccb252c94"
    },
    {
      "name": "POST",
      "item": [
        {
          "name": "1.5 create flsa",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                "exec": [
                  "pm.test(\"Проверка ответа сервера\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    const data = pm.response.json();\r",
                  "    pm.expect(data).to.be.an(\"object\")\r",
                  "    pm.expect(data.status, 'status').to.eq('active');\r",
                  "});\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    console.log(\"Статус код ответа: 201 - Успешно\");\r",
                  "\r",
                  "    // Проверяем что ответ является объектом\r",
                  "    pm.test(\"Response is an object\", function () {\r",
                  "        const response = pm.response.json();\r",
                  "        const isObject = typeof response === 'object' && !Array.isArray(response);\r",
                  "        if (!isObject) {\r",
                  "            console.error(\"ОШИБКА: Ответ не является объектом\");\r",
                  "        }\r",
                  "        pm.expect(isObject).to.be.true;\r",
                  "    });\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "\r",
                  "    // Проверяем что объект не пустой\r",
                  "    pm.test(\"Response is not empty\", function () {\r",
                  "        const isEmpty = Object.keys(response).length === 0;\r",
                  "        if (isEmpty) {\r",
                  "            console.error(\"ОШИБКА: Получен пустой объект в ответе\");\r",
                  "        }\r",
                  "        pm.expect(response).to.not.be.empty;\r",
                  "    });\r",
                  "\r",
                  "    // Проверяем наличие обязательных полей\r",
                  "    pm.test(\"Response has required properties\", function () {\r",
                  "        try {\r",
                  "            pm.expect(response).to.include.keys(\r",
                  "                'id', 'name', 'status', 'created_at', 'updated_at',\r",
                  "                'customer', 'provider', 'nodeID',\r",
                  "                'start_date', 'time_zone'\r",
                  "            );\r",
                  "            console.log(\"Все обязательные поля присутствуют\");\r",
                  "        } catch (e) {\r",
                  "            console.error(\"ОШИБКА: Отсутствуют обязательные поля:\", e.message);\r",
                  "            throw e;\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка простых полей\r",
                  "    const simpleFields = {\r",
                  "        'id': 'number',\r",
                  "        'name': 'string',\r",
                  "        'status': 'string',\r",
                  "        'time_zone': 'string',\r",
                  "        'source': 'string'\r",
                  "    };\r",
                  "\r",
                  "    Object.entries(simpleFields).forEach(([field, type]) => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} has correct type`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.be.a(type);\r",
                  "                    console.log(`Поле ${field} имеет корректный тип (${type})`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else if (field !== 'source') { // source может быть опциональным\r",
                  "            console.error(`ОШИБКА: Отсутствует поле ${field}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка числовых полей, которые могут быть null\r",
                  "    const nullableNumberFields = [\r",
                  "        'first_call_resolutions',\r",
                  "        'pickup_target',\r",
                  "        'pickups_within_target',\r",
                  "        'rejected_solutions',\r",
                  "        'service_desk_only_resolutions',\r",
                  "        'service_desk_resolutions'\r",
                  "    ];\r",
                  "\r",
                  "    nullableNumberFields.forEach(field => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} is nullable number`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.satisfy((val) => val === null || typeof val === 'number');\r",
                  "                    console.log(`Поле ${field} имеет допустимое значение (null или number)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный тип:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.log(`ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле ${field} (но оно может быть опциональным)`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка полей с датами\r",
                  "    ['created_at', 'updated_at', 'start_date'].forEach(field => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} has correct format`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2})?$/);\r",
                  "                    console.log(`Поле ${field} имеет корректный формат даты`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректный формат даты:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.error(`ОШИБКА: Отсутствует поле ${field}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка nullable полей\r",
                  "    ['expiry_date', 'remarks', 'charges', 'notice_date', 'sourceID', 'support_chat_pickup_target', 'target_details'].forEach(field => {\r",
                  "        if (response.hasOwnProperty(field)) {\r",
                  "            pm.test(`Field ${field} is nullable`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[field]).to.satisfy((val) => val === null || typeof val === 'string');\r",
                  "                    console.log(`Поле ${field} имеет допустимое значение (null или строка)`);\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Поле ${field} имеет некорректное значение:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else {\r",
                  "            console.log(`ПРЕДУПРЕЖДЕНИЕ: Отсутствует поле ${field} (но оно может быть опциональным)`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка вложенных объектов\r",
                  "    const nestedObjects = ['customer', 'customer_rep', 'provider', 'service_desk_team', 'support_hours'];\r",
                  "\r",
                  "    nestedObjects.forEach(obj => {\r",
                  "        if (response.hasOwnProperty(obj)) {\r",
                  "            pm.test(`Object ${obj} has correct structure`, function () {\r",
                  "                try {\r",
                  "                    pm.expect(response[obj]).to.be.an('object');\r",
                  "                    pm.expect(response[obj]).to.include.keys('id', 'name', 'nodeID');\r",
                  "                    console.log(`Объект ${obj} имеет корректную структуру`);\r",
                  "\r",
                  "                    // Проверка вложенных полей\r",
                  "                    pm.expect(response[obj].id).to.be.a('number');\r",
                  "                    pm.expect(response[obj].name).to.be.a('string');\r",
                  "\r",
                  "                    // Проверка account, если есть\r",
                  "                    if (response[obj].hasOwnProperty('account')) {\r",
                  "                        pm.test(`Object ${obj}.account has correct structure`, function () {\r",
                  "                            pm.expect(response[obj].account).to.be.an('object');\r",
                  "                            pm.expect(response[obj].account).to.include.keys('id', 'name');\r",
                  "                            pm.expect(response[obj].account.id).to.be.a('string');\r",
                  "                            pm.expect(response[obj].account.name).to.be.a('string');\r",
                  "                        });\r",
                  "                    } else if (obj !== 'service_desk_team' && obj !== 'support_hours') {\r",
                  "                        console.error(`ОШИБКА: В объекте ${obj} отсутствует поле account`);\r",
                  "                    }\r",
                  "                } catch (e) {\r",
                  "                    console.error(`ОШИБКА: Структура объекта ${obj} некорректна:`, e.message);\r",
                  "                    throw e;\r",
                  "                }\r",
                  "            });\r",
                  "        } else if (obj !== 'customer_rep') { // customer_rep может быть опциональным\r",
                  "            console.error(`ОШИБКА: Отсутствует объект ${obj}`);\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "    // Проверка массива attachments\r",
                  "    if (response.hasOwnProperty('attachments')) {\r",
                  "        pm.test(\"Attachments is an array\", function () {\r",
                  "            try {\r",
                  "                pm.expect(response.attachments).to.be.an('array');\r",
                  "                console.log(\"Поле attachments является массивом\");\r",
                  "            } catch (e) {\r",
                  "                console.error(\"ОШИБКА: Поле attachments не является массивом:\", e.message);\r",
                  "                throw e;\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        console.error(\"ОШИБКА: Отсутствует поле attachments\");\r",
                  "    }\r",
                  "\r",
                  "    // Проверка поля nodeID в корне\r",
                  "    if (response.hasOwnProperty('nodeID')) {\r",
                  "        pm.test(\"nodeID has correct format\", function () {\r",
                  "            try {\r",
                  "                pm.expect(response.nodeID).to.be.a('string');\r",
                  "                // pm.expect(response.nodeID).to.match(/^cnJ0MS4/);\r",
                  "                console.log(\"Поле nodeID имеет корректный формат\");\r",
                  "            } catch (e) {\r",
                  "                console.error(\"ОШИБКА: Поле nodeID имеет некорректный формат:\", e.message);\r",
                  "                throw e;\r",
                  "            }\r",
                  "        });\r",
                  "    } else {\r",
                  "        console.error(\"ОШИБКА: Отсутствует поле nodeID\");\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2f8afaa1-275c-4697-ad83-53e87897a185",
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "id": "30e30808-2b70-4b84-a69a-2fcce2ef1ead",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-4me-account",
                "value": "dp",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"FLSA {{$randomInt}}\",\r\n    \"customer_id\": 38,\r\n    \"status\": \"active\",\r\n    \"provider_id\": 19,\r\n    \"customer_rep_id\": 581,\r\n    \"service_desk_team_id\": 46,\r\n    \"start_date\": \"{{yesterday_date}}\",\r\n    \"support_hours_id\": 108,\r\n    \"time_zone\": \"Central Time (US & Canada)\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}flsas",
              "host": [
                "{{url}}flsas"
              ]
            }
          },
          "response": [],
          "uid": "32335283-30e30808-2b70-4b84-a69a-2fcce2ef1ead"
        }
      ],
      "id": "8c034ddd-84c6-431a-8f25-c80473e197d9",
      "uid": "32335283-8c034ddd-84c6-431a-8f25-c80473e197d9"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "825553f9-b089-483b-ace5-f496ab0d81f6",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "c5ed8e36-56fd-45fa-8834-1f0d3e824aa6",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}