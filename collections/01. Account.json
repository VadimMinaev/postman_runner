{
  "info": {
    "_postman_id": "9c1006db-9539-45e7-8169-6e6e89e9308f",
    "name": "01. Account",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-24T06:40:34.000Z",
    "createdAt": "2025-06-24T09:16:11.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-9c1006db-9539-45e7-8169-6e6e89e9308f"
  },
  "item": [
    {
      "name": "Account",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "Account",
              "item": [
                {
                  "name": "1.1 get accounts SDA :dc",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "pm.test(\"Проверка ответа сервера\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "    const data = pm.response.json();\r",
                          "    pm.expect(data).to.be.an(\"object\");\r",
                          "\r",
                          "    // Проверка на null\r",
                          "    if (data.currency === null) {\r",
                          "        console.error(`Значение currency не должно быть пустым. Ошибка: Получено значение ${data.currency}`);\r",
                          "    }\r",
                          "    if (data.locale === null) {\r",
                          "        console.error(`Значение locale не должно быть пустым. Ошибка: Получено значение ${data.locale}`);\r",
                          "    }\r",
                          "    if (data.name === null) {\r",
                          "        console.error(`Значение name не должно быть пустым. Ошибка: Получено значение ${data.name}`);\r",
                          "    }\r",
                          "    if (data.organization === null) {\r",
                          "        console.error(`Значение organization не должно быть пустым. Ошибка: Получено значение ${data.organization}`);\r",
                          "    }\r",
                          "    if (data.organization.id === null) {\r",
                          "        console.error(`Значение organization.id не должно быть пустым. Ошибка: Получено значение ${data.organization.id}`);\r",
                          "    }\r",
                          "    if (data.organization.name === null) {\r",
                          "        console.error(`Значение organization.name не должно быть пустым. Ошибка: Получено значение ${data.organization.name}`);\r",
                          "    }\r",
                          "    if (data.organization.account === null) {\r",
                          "        console.error(`Значение organization.account не должно быть пустым. Ошибка: Получено значение ${data.organization.account}`);\r",
                          "    }\r",
                          "    if (data.organization.account.id === null) {\r",
                          "        console.error(`Значение organization.account.id не должно быть пустым. Ошибка: Получено значение ${data.organization.account.id}`);\r",
                          "    }\r",
                          "    if (data.organization.account.name === null) {\r",
                          "        console.error(`Значение organization.account.name не должно быть пустым. Ошибка: Получено значение ${data.organization.account.name}`);\r",
                          "    }\r",
                          "    if (data.organization.nodeID === null) {\r",
                          "        console.error(`Значение organization.nodeID не должно быть пустым. Ошибка: Получено значение ${data.organization.nodeID}`);\r",
                          "    }\r",
                          "    if (data.owner === null) {\r",
                          "        console.error(`Значение owner не должно быть пустым. Ошибка: Получено значение ${data.owner}`);\r",
                          "    }\r",
                          "    if (data.owner.id === null) {\r",
                          "        console.error(`Значение owner.id не должно быть пустым. Ошибка: Получено значение ${data.owner.id}`);\r",
                          "    }\r",
                          "    if (data.owner.name === null) {\r",
                          "        console.error(`Значение owner.name не должно быть пустым. Ошибка: Получено значение ${data.owner.name}`);\r",
                          "    }\r",
                          "    if (data.owner.account === null) {\r",
                          "        console.error(`Значение owner.account не должно быть пустым. Ошибка: Получено значение ${data.owner.account}`);\r",
                          "    }\r",
                          "    if (data.owner.account.id === null) {\r",
                          "        console.error(`Значение owner.account.id не должно быть пустым. Ошибка: Получено значение ${data.owner.account.id}`);\r",
                          "    }\r",
                          "    if (data.owner.account.name === null) {\r",
                          "        console.error(`Значение owner.account.name не должно быть пустым. Ошибка: Получено значение ${data.owner.account.name}`);\r",
                          "    }\r",
                          "    if (data.owner.nodeID === null) {\r",
                          "        console.error(`Значение owner.nodeID не должно быть пустым. Ошибка: Получено значение ${data.owner.nodeID}`);\r",
                          "    }\r",
                          "    if (data.plan === null) {\r",
                          "        console.error(`Значение plan не должно быть пустым. Ошибка: Получено значение ${data.plan}`);\r",
                          "    }\r",
                          "    if (data.start_of_week === null) {\r",
                          "        console.error(`Значение start_of_week не должно быть пустым. Ошибка: Получено значение ${data.start_of_week}`);\r",
                          "    }\r",
                          "    if (data.time_format_24h === null) {\r",
                          "        console.error(`Значение time_format_24h не должно быть пустым. Ошибка: Получено значение ${data.time_format_24h}`);\r",
                          "    }\r",
                          "    if (data.time_zone === null) {\r",
                          "        console.error(`Значение time_zone не должно быть пустым. Ошибка: Получено значение ${data.time_zone}`);\r",
                          "    }\r",
                          "    if (data.url === null) {\r",
                          "        console.error(`Значение url не должно быть пустым. Ошибка: Получено значение ${data.url}`);\r",
                          "    }\r",
                          "    if (data.id === null) {\r",
                          "        console.error(`Значение id не должно быть пустым. Ошибка: Получено значение ${data.id}`);\r",
                          "    }\r",
                          "    if (data.directory_account === null) {\r",
                          "        console.error(`Значение directory_account не должно быть пустым. Ошибка: Получено значение ${data.directory_account}`);\r",
                          "    }\r",
                          "    if (data.directory_account.id === null) {\r",
                          "        console.error(`Значение directory_account.id не должно быть пустым. Ошибка: Получено значение ${data.directory_account.id}`);\r",
                          "    }\r",
                          "    if (data.directory_account.name === null) {\r",
                          "        console.error(`Значение directory_account.name не должно быть пустым. Ошибка: Получено значение ${data.directory_account.name}`);\r",
                          "    }\r",
                          "\r",
                          "    // Проверка на undefined\r",
                          "    pm.expect(data.currency, 'currency').not.eql(undefined);\r",
                          "    pm.expect(data.locale, 'locale').not.eql(undefined);\r",
                          "    pm.expect(data.name, 'name').not.eql(undefined);\r",
                          "    pm.expect(data.organization, 'organization').not.eql(undefined);\r",
                          "    pm.expect(data.organization.id, 'organization.id').not.eql(undefined);\r",
                          "    pm.expect(data.organization.name, 'organization.name').not.eql(undefined);\r",
                          "    pm.expect(data.organization.account, 'organization.account').not.eql(undefined);\r",
                          "    pm.expect(data.organization.account.id, 'organization.account.id').not.eql(undefined);\r",
                          "    pm.expect(data.organization.account.name, 'organization.account.name').not.eql(undefined);\r",
                          "    pm.expect(data.organization.nodeID, 'organization.nodeID').not.eql(undefined);\r",
                          "    pm.expect(data.owner, 'owner').not.eql(undefined);\r",
                          "    pm.expect(data.owner.id, 'owner.id').not.eql(undefined);\r",
                          "    pm.expect(data.owner.name, 'owner.name').not.eql(undefined);\r",
                          "    pm.expect(data.owner.account, 'owner.account').not.eql(undefined);\r",
                          "    pm.expect(data.owner.account.id, 'owner.account.id').not.eql(undefined);\r",
                          "    pm.expect(data.owner.account.name, 'owner.account.name').not.eql(undefined);\r",
                          "    pm.expect(data.owner.nodeID, 'owner.nodeID').not.eql(undefined);\r",
                          "    pm.expect(data.plan, 'plan').not.eql(undefined);\r",
                          "    pm.expect(data.start_of_week, 'start_of_week').not.eql(undefined);\r",
                          "    pm.expect(data.time_format_24h, 'time_format_24h').not.eql(undefined);\r",
                          "    pm.expect(data.time_zone, 'time_zone').not.eql(undefined);\r",
                          "    pm.expect(data.url, 'url').not.eql(undefined);\r",
                          "    pm.expect(data.id, 'id').not.eql(undefined);\r",
                          "    pm.expect(data.directory_account, 'directory_account').not.eql(undefined);\r",
                          "    pm.expect(data.directory_account.id, 'directory_account.id').not.eql(undefined);\r",
                          "    pm.expect(data.directory_account.name, 'directory_account.name').not.eql(undefined);\r",
                          "\r",
                          "    // Дополнительные проверки типов данных\r",
                          "    pm.expect(data.currency, 'currency').to.be.a('string');\r",
                          "    pm.expect(data.locale, 'locale').to.be.a('string');\r",
                          "    pm.expect(data.name, 'name').to.be.a('string');\r",
                          "    pm.expect(data.organization, 'organization').to.be.an('object');\r",
                          "    pm.expect(data.organization.id, 'organization.id').to.be.a('number');\r",
                          "    pm.expect(data.organization.name, 'organization.name').to.be.a('string');\r",
                          "    pm.expect(data.organization.account, 'organization.account').to.be.an('object');\r",
                          "    pm.expect(data.organization.account.id, 'organization.account.id').to.be.a('string');\r",
                          "    pm.expect(data.organization.account.name, 'organization.account.name').to.be.a('string');\r",
                          "    pm.expect(data.organization.nodeID, 'organization.nodeID').to.be.a('string');\r",
                          "    pm.expect(data.owner, 'owner').to.be.an('object');\r",
                          "    pm.expect(data.owner.id, 'owner.id').to.be.a('number');\r",
                          "    pm.expect(data.owner.name, 'owner.name').to.be.a('string');\r",
                          "    pm.expect(data.owner.account, 'owner.account').to.be.an('object');\r",
                          "    pm.expect(data.owner.account.id, 'owner.account.id').to.be.a('string');\r",
                          "    pm.expect(data.owner.account.name, 'owner.account.name').to.be.a('string');\r",
                          "    pm.expect(data.owner.nodeID, 'owner.nodeID').to.be.a('string');\r",
                          "    pm.expect(data.plan, 'plan').to.be.a('string');\r",
                          "    pm.expect(data.start_of_week, 'start_of_week').to.be.a('string');\r",
                          "    pm.expect(data.time_format_24h, 'time_format_24h').to.be.a('boolean');\r",
                          "    pm.expect(data.time_zone, 'time_zone').to.be.a('string');\r",
                          "    pm.expect(data.url, 'url').to.be.a('string');\r",
                          "    pm.expect(data.id, 'id').to.be.a('string');\r",
                          "    pm.expect(data.directory_account, 'directory_account').to.be.an('object');\r",
                          "    pm.expect(data.directory_account.id, 'directory_account.id').to.be.a('string');\r",
                          "    pm.expect(data.directory_account.name, 'directory_account.name').to.be.a('string');\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "56b12edf-c622-49ed-90bf-5e4f4dfe73b4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account",
                      "host": [
                        "{{url}}account"
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-56b12edf-c622-49ed-90bf-5e4f4dfe73b4"
                },
                {
                  "name": "1.2 get accounts DA :propoduct",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7f04a07e-0139-4efe-9b0c-d699fae39bb0",
                        "exec": [
                          "pm.test(\"Проверка ответа сервера\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "    const data = pm.response.json();\r",
                          "    pm.expect(data).to.be.an(\"object\");\r",
                          "\r",
                          "    // Проверка на null\r",
                          "    if (data.currency === null) {\r",
                          "        console.error(`Значение currency не должно быть пустым. Ошибка: Получено значение ${data.currency}`);\r",
                          "    }\r",
                          "    if (data.locale === null) {\r",
                          "        console.error(`Значение locale не должно быть пустым. Ошибка: Получено значение ${data.locale}`);\r",
                          "    }\r",
                          "    if (data.name === null) {\r",
                          "        console.error(`Значение name не должно быть пустым. Ошибка: Получено значение ${data.name}`);\r",
                          "    }\r",
                          "    if (data.organization === null) {\r",
                          "        console.error(`Значение organization не должно быть пустым. Ошибка: Получено значение ${data.organization}`);\r",
                          "    }\r",
                          "    if (data.organization.id === null) {\r",
                          "        console.error(`Значение organization.id не должно быть пустым. Ошибка: Получено значение ${data.organization.id}`);\r",
                          "    }\r",
                          "    if (data.organization.name === null) {\r",
                          "        console.error(`Значение organization.name не должно быть пустым. Ошибка: Получено значение ${data.organization.name}`);\r",
                          "    }\r",
                          "    if (data.organization.nodeID === null) {\r",
                          "        console.error(`Значение organization.nodeID не должно быть пустым. Ошибка: Получено значение ${data.organization.nodeID}`);\r",
                          "    }\r",
                          "    if (data.owner === null) {\r",
                          "        console.error(`Значение owner не должно быть пустым. Ошибка: Получено значение ${data.owner}`);\r",
                          "    }\r",
                          "    if (data.owner.id === null) {\r",
                          "        console.error(`Значение owner.id не должно быть пустым. Ошибка: Получено значение ${data.owner.id}`);\r",
                          "    }\r",
                          "    if (data.owner.name === null) {\r",
                          "        console.error(`Значение owner.name не должно быть пустым. Ошибка: Получено значение ${data.owner.name}`);\r",
                          "    }\r",
                          "    if (data.owner.nodeID === null) {\r",
                          "        console.error(`Значение owner.nodeID не должно быть пустым. Ошибка: Получено значение ${data.owner.nodeID}`);\r",
                          "    }\r",
                          "    if (data.plan === null) {\r",
                          "        console.error(`Значение plan не должно быть пустым. Ошибка: Получено значение ${data.plan}`);\r",
                          "    }\r",
                          "    if (data.start_of_week === null) {\r",
                          "        console.error(`Значение start_of_week не должно быть пустым. Ошибка: Получено значение ${data.start_of_week}`);\r",
                          "    }\r",
                          "    if (data.time_format_24h === null) {\r",
                          "        console.error(`Значение time_format_24h не должно быть пустым. Ошибка: Получено значение ${data.time_format_24h}`);\r",
                          "    }\r",
                          "    if (data.time_zone === null) {\r",
                          "        console.error(`Значение time_zone не должно быть пустым. Ошибка: Получено значение ${data.time_zone}`);\r",
                          "    }\r",
                          "    if (data.url === null) {\r",
                          "        console.error(`Значение url не должно быть пустым. Ошибка: Получено значение ${data.url}`);\r",
                          "    }\r",
                          "    if (data.id === null) {\r",
                          "        console.error(`Значение id не должно быть пустым. Ошибка: Получено значение ${data.id}`);\r",
                          "    }\r",
                          "\r",
                          "    // Проверка на undefined\r",
                          "    pm.expect(data.currency, 'currency').not.eql(undefined);\r",
                          "    pm.expect(data.locale, 'locale').not.eql(undefined);\r",
                          "    pm.expect(data.name, 'name').not.eql(undefined);\r",
                          "    pm.expect(data.organization, 'organization').not.eql(undefined);\r",
                          "    pm.expect(data.organization.id, 'organization.id').not.eql(undefined);\r",
                          "    pm.expect(data.organization.name, 'organization.name').not.eql(undefined);\r",
                          "    pm.expect(data.organization.nodeID, 'organization.nodeID').not.eql(undefined);\r",
                          "    pm.expect(data.owner, 'owner').not.eql(undefined);\r",
                          "    pm.expect(data.owner.id, 'owner.id').not.eql(undefined);\r",
                          "    pm.expect(data.owner.name, 'owner.name').not.eql(undefined);\r",
                          "    pm.expect(data.owner.nodeID, 'owner.nodeID').not.eql(undefined);\r",
                          "    pm.expect(data.plan, 'plan').not.eql(undefined);\r",
                          "    pm.expect(data.start_of_week, 'start_of_week').not.eql(undefined);\r",
                          "    pm.expect(data.time_format_24h, 'time_format_24h').not.eql(undefined);\r",
                          "    pm.expect(data.time_zone, 'time_zone').not.eql(undefined);\r",
                          "    pm.expect(data.url, 'url').not.eql(undefined);\r",
                          "    pm.expect(data.id, 'id').not.eql(undefined);\r",
                          "\r",
                          "    // Проверка типов данных\r",
                          "    pm.expect(data.currency, 'currency').to.be.a('string');\r",
                          "    pm.expect(data.locale, 'locale').to.be.a('string');\r",
                          "    pm.expect(data.name, 'name').to.be.a('string');\r",
                          "    pm.expect(data.organization, 'organization').to.be.an('object');\r",
                          "    pm.expect(data.organization.id, 'organization.id').to.be.a('number');\r",
                          "    pm.expect(data.organization.name, 'organization.name').to.be.a('string');\r",
                          "    pm.expect(data.organization.nodeID, 'organization.nodeID').to.be.a('string');\r",
                          "    pm.expect(data.owner, 'owner').to.be.an('object');\r",
                          "    pm.expect(data.owner.id, 'owner.id').to.be.a('number');\r",
                          "    pm.expect(data.owner.name, 'owner.name').to.be.a('string');\r",
                          "    pm.expect(data.owner.nodeID, 'owner.nodeID').to.be.a('string');\r",
                          "    pm.expect(data.plan, 'plan').to.be.a('string');\r",
                          "    pm.expect(data.start_of_week, 'start_of_week').to.be.a('string');\r",
                          "    pm.expect(data.time_format_24h, 'time_format_24h').to.be.a('boolean');\r",
                          "    pm.expect(data.time_zone, 'time_zone').to.be.a('string');\r",
                          "    pm.expect(data.url, 'url').to.be.a('string');\r",
                          "    pm.expect(data.id, 'id').to.be.a('string');\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "3f23c865-de0b-466b-a571-1e642f383b75",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "pro-product",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account",
                      "host": [
                        "{{url}}account"
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-3f23c865-de0b-466b-a571-1e642f383b75"
                }
              ],
              "id": "5f4dcb9c-c82d-47aa-b4b6-09ff09294022",
              "uid": "32335283-5f4dcb9c-c82d-47aa-b4b6-09ff09294022"
            },
            {
              "name": "Account/usage_statements",
              "item": [
                {
                  "name": "1.1 get accounts/usage_statements SDA :dc",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "pm.test(\"Проверка списка биллинговых записей\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "    const bills = pm.response.json();\r",
                          "    pm.expect(bills).to.be.an(\"array\");\r",
                          "    pm.expect(bills.length).to.be.greaterThan(0);\r",
                          "\r",
                          "    bills.forEach((bill, index) => {\r",
                          "        // Проверка на null\r",
                          "        if (bill.id === null) {\r",
                          "            console.error(`Элемент ${index}: Значение id не должно быть пустым. Ошибка: Получено значение ${bill.id}`);\r",
                          "        }\r",
                          "        if (bill.plan === null) {\r",
                          "            console.error(`Элемент ${index}: Значение plan не должно быть пустым. Ошибка: Получено значение ${bill.plan}`);\r",
                          "        }\r",
                          "        if (bill.year === null) {\r",
                          "            console.error(`Элемент ${index}: Значение year не должно быть пустым. Ошибка: Получено значение ${bill.year}`);\r",
                          "        }\r",
                          "        if (bill.month === null) {\r",
                          "            console.error(`Элемент ${index}: Значение month не должно быть пустым. Ошибка: Получено значение ${bill.month}`);\r",
                          "        }\r",
                          "        if (bill.start_date === null) {\r",
                          "            console.error(`Элемент ${index}: Значение start_date не должно быть пустым. Ошибка: Получено значение ${bill.start_date}`);\r",
                          "        }\r",
                          "        if (bill.end_date === null) {\r",
                          "            console.error(`Элемент ${index}: Значение end_date не должно быть пустым. Ошибка: Получено значение ${bill.end_date}`);\r",
                          "        }\r",
                          "        // if (bill.consumed_user_months === null) {\r",
                          "        //     console.error(`Элемент ${index}: Значение consumed_user_months не должно быть пустым. Ошибка: Получено значение ${bill.consumed_user_months}`);\r",
                          "        // }\r",
                          "        if (bill.user_months === null) {\r",
                          "            console.error(`Элемент ${index}: Значение user_months не должно быть пустым. Ошибка: Получено значение ${bill.user_months}`);\r",
                          "        }\r",
                          "        if (bill.nodeID === null) {\r",
                          "            console.error(`Элемент ${index}: Значение nodeID не должно быть пустым. Ошибка: Получено значение ${bill.nodeID}`);\r",
                          "        }\r",
                          "\r",
                          "        // Проверка на undefined\r",
                          "        pm.expect(bill.id, `Элемент ${index}: id`).not.eql(undefined);\r",
                          "        pm.expect(bill.plan, `Элемент ${index}: plan`).not.eql(undefined);\r",
                          "        pm.expect(bill.year, `Элемент ${index}: year`).not.eql(undefined);\r",
                          "        pm.expect(bill.month, `Элемент ${index}: month`).not.eql(undefined);\r",
                          "        pm.expect(bill.start_date, `Элемент ${index}: start_date`).not.eql(undefined);\r",
                          "        pm.expect(bill.end_date, `Элемент ${index}: end_date`).not.eql(undefined);\r",
                          "        pm.expect(bill.consumed_user_months, `Элемент ${index}: consumed_user_months`).not.eql(undefined);\r",
                          "        pm.expect(bill.user_months, `Элемент ${index}: user_months`).not.eql(undefined);\r",
                          "        pm.expect(bill.nodeID, `Элемент ${index}: nodeID`).not.eql(undefined);\r",
                          "\r",
                          "        // Проверка типов данных\r",
                          "        pm.expect(bill.id, `Элемент ${index}: id`).to.be.a('number');\r",
                          "        pm.expect(bill.plan, `Элемент ${index}: plan`).to.be.a('string');\r",
                          "        pm.expect(bill.year, `Элемент ${index}: year`).to.be.a('number');\r",
                          "        pm.expect(bill.month, `Элемент ${index}: month`).to.be.a('number');\r",
                          "        pm.expect(bill.start_date, `Элемент ${index}: start_date`).to.be.a('string');\r",
                          "        pm.expect(bill.end_date, `Элемент ${index}: end_date`).to.be.a('string');\r",
                          "        pm.expect(bill.consumed_user_months, `Элемент ${index}: consumed_user_months`).to.be.a('number');\r",
                          "        pm.expect(bill.user_months, `Элемент ${index}: user_months`).to.be.a('number');\r",
                          "        pm.expect(bill.nodeID, `Элемент ${index}: nodeID`).to.be.a('string');\r",
                          "\r",
                          "        // Дополнительные проверки форматов и значений\r",
                          "        pm.expect(bill.month, `Элемент ${index}: month`).to.be.within(1, 12);\r",
                          "        pm.expect(bill.consumed_user_months, `Элемент ${index}: consumed_user_months`).to.be.lessThanOrEqual(bill.user_months);\r",
                          "\r",
                          "        // Проверка формата дат\r",
                          "        pm.expect(bill.start_date, `Элемент ${index}: start_date`).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                          "        pm.expect(bill.end_date, `Элемент ${index}: end_date`).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                          "\r",
                          "        // Проверка, что start_date раньше end_date\r",
                          "        const startDate = new Date(bill.start_date);\r",
                          "        const endDate = new Date(bill.end_date);\r",
                          "        pm.expect(startDate.getTime(), `Элемент ${index}: start_date должен быть раньше end_date`).to.be.lessThan(endDate.getTime());\r",
                          "    });\r",
                          "\r",
                          "    // Проверка сортировки по дате (от новых к старым)\r",
                          "    for (let i = 0; i < bills.length - 1; i++) {\r",
                          "        const currentDate = new Date(bills[i].start_date);\r",
                          "        const nextDate = new Date(bills[i + 1].start_date);\r",
                          "        pm.expect(currentDate.getTime(), `Элементы ${i} и ${i + 1} должны быть отсортированы по убыванию даты`).to.be.greaterThan(nextDate.getTime());\r",
                          "    }\r",
                          "});\r",
                          "\r",
                          "pm.test(\"\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.environment.set(\"usage_statements_pro_product_dc_id\", jsonData[0].id);;\r",
                          "});\r",
                          "\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "0ae9bde4-1f90-479f-8dfb-716825effcd6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account/usage_statements",
                      "host": [
                        "{{url}}account"
                      ],
                      "path": [
                        "usage_statements"
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-0ae9bde4-1f90-479f-8dfb-716825effcd6"
                },
                {
                  "name": "1.2 get accounts/usage_statements/id SDA :dc",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "pm.test(\"Проверка деталей биллинговой записи\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "    const bill = pm.response.json();\r",
                          "    pm.expect(bill).to.be.an(\"object\");\r",
                          "\r",
                          "    // Проверка на null\r",
                          "    const fieldsToCheck = [\r",
                          "        'billable_user_ids', 'consumed_user_months', 'end_date', 'id',\r",
                          "        'month', 'plan', 'start_date', 'user_months', 'year', 'nodeID'\r",
                          "    ];\r",
                          "\r",
                          "    fieldsToCheck.forEach(field => {\r",
                          "        if (bill[field] === null) {\r",
                          "            console.error(`Значение ${field} не должно быть пустым. Ошибка: Получено значение ${bill[field]}`);\r",
                          "        }\r",
                          "    });\r",
                          "\r",
                          "    // Проверка на undefined\r",
                          "    pm.expect(bill.billable_user_ids, 'billable_user_ids').not.eql(undefined);\r",
                          "    pm.expect(bill.consumed_user_months, 'consumed_user_months').not.eql(undefined);\r",
                          "    pm.expect(bill.end_date, 'end_date').not.eql(undefined);\r",
                          "    pm.expect(bill.id, 'id').not.eql(undefined);\r",
                          "    pm.expect(bill.month, 'month').not.eql(undefined);\r",
                          "    pm.expect(bill.plan, 'plan').not.eql(undefined);\r",
                          "    pm.expect(bill.start_date, 'start_date').not.eql(undefined);\r",
                          "    pm.expect(bill.user_months, 'user_months').not.eql(undefined);\r",
                          "    pm.expect(bill.year, 'year').not.eql(undefined);\r",
                          "    pm.expect(bill.nodeID, 'nodeID').not.eql(undefined);\r",
                          "\r",
                          "    // Проверка типов данных\r",
                          "    pm.expect(bill.billable_user_ids, 'billable_user_ids').to.be.an('array');\r",
                          "    pm.expect(bill.consumed_user_months, 'consumed_user_months').to.be.a('number');\r",
                          "    pm.expect(bill.end_date, 'end_date').to.be.a('string');\r",
                          "    pm.expect(bill.id, 'id').to.be.a('number');\r",
                          "    pm.expect(bill.month, 'month').to.be.a('number');\r",
                          "    pm.expect(bill.plan, 'plan').to.be.a('string');\r",
                          "    pm.expect(bill.start_date, 'start_date').to.be.a('string');\r",
                          "    pm.expect(bill.user_months, 'user_months').to.be.a('number');\r",
                          "    pm.expect(bill.year, 'year').to.be.a('number');\r",
                          "    pm.expect(bill.nodeID, 'nodeID').to.be.a('string');\r",
                          "\r",
                          "    // Проверка формата дат\r",
                          "    pm.expect(bill.start_date, 'start_date format').to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                          "    pm.expect(bill.end_date, 'end_date format').to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                          "\r",
                          "    // Проверка что start_date раньше end_date\r",
                          "    const startDate = new Date(bill.start_date);\r",
                          "    const endDate = new Date(bill.end_date);\r",
                          "    pm.expect(startDate.getTime(), 'start_date должен быть раньше end_date').to.be.lessThan(endDate.getTime());\r",
                          "\r",
                          "    // Проверка что месяц в датах соответствует полю month\r",
                          "    pm.expect(startDate.getMonth() + 1, 'month в start_date').to.equal(bill.month);\r",
                          "    pm.expect(endDate.getMonth() + 1, 'month в end_date').to.equal(bill.month);\r",
                          "\r",
                          "    // Проверка billable_user_ids\r",
                          "    bill.billable_user_ids.forEach(userId => {\r",
                          "        pm.expect(userId, 'user_id').to.be.a('number');\r",
                          "        pm.expect(userId, 'user_id positive').to.be.greaterThan(0);\r",
                          "    });\r",
                          "\r",
                          "    // Проверка что consumed_user_months ≤ user_months\r",
                          "    pm.expect(bill.consumed_user_months, 'consumed_user_months <= user_months')\r",
                          "        .to.be.lessThanOrEqual(bill.user_months);\r",
                          "\r",
                          "    // Проверка соответствия количества пользователей\r",
                          "    pm.expect(bill.billable_user_ids.length, 'billable_user_ids.length == user_months')\r",
                          "        .to.equal(bill.user_months);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "8e253174-cbda-488d-b8c7-a754d2ee4fc3",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "ebdf2cfe-4111-42d1-8b2f-bdaea7085cdd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account/usage_statements/{{usage_statements_pro_product_dc_id}}",
                      "host": [
                        "{{url}}account"
                      ],
                      "path": [
                        "usage_statements",
                        "{{usage_statements_pro_product_dc_id}}"
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-ebdf2cfe-4111-42d1-8b2f-bdaea7085cdd"
                },
                {
                  "name": "1.3 get accounts/usage_statements (checking the filtering)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "pm.test(\"Статус ответа 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "\r",
                          "// Получаем и парсим параметры year и month из строки окружения\r",
                          "const yearMonth = pm.environment.get(\"yearMonth\"); // например, \"year=2025&month=6\"\r",
                          "const params = Object.fromEntries(yearMonth.split('&').map(pair => pair.split('=')));\r",
                          "\r",
                          "// Парсим тело ответа\r",
                          "const jsonData = pm.response.json();\r",
                          "\r",
                          "// Проверяем, что год в ответе совпадает с ожидаемым\r",
                          "pm.test(`Год в ответе должен быть ${params.year}`, () => {\r",
                          "    pm.expect(jsonData.year.toString()).to.eql(params.year);\r",
                          "});\r",
                          "\r",
                          "// Проверяем, что месяц в ответе совпадает с ожидаемым\r",
                          "pm.test(`Месяц в ответе должен быть ${params.month}`, () => {\r",
                          "    pm.expect(jsonData.month.toString()).to.eql(params.month);\r",
                          "});\r",
                          "\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e0c5db2e-9851-4015-a333-8dd4060413b7",
                        "exec": [
                          "const now = new Date();\r",
                          "const year = now.getFullYear();\r",
                          "const month = now.getMonth() + 1;\r",
                          "\r",
                          "// Формируем строку в нужном формате\r",
                          "const yearMonthStr = `year=${year}&month=${month}`;\r",
                          "\r",
                          "// Записываем в переменную окружения\r",
                          "pm.environment.set(\"yearMonth\", yearMonthStr);\r",
                          "\r",
                          "console.log(yearMonthStr);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "59ccfb14-eb90-4f04-ab4d-dc086d0c6fd4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account/usage_statements?{{yearMonth}}",
                      "host": [
                        "{{url}}account"
                      ],
                      "path": [
                        "usage_statements"
                      ],
                      "query": [
                        {
                          "key": "{{yearMonth}}",
                          "value": null
                        }
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-59ccfb14-eb90-4f04-ab4d-dc086d0c6fd4"
                }
              ],
              "id": "618edaa4-77fd-4aa5-9eba-817806fdc987",
              "uid": "32335283-618edaa4-77fd-4aa5-9eba-817806fdc987"
            },
            {
              "name": "Account/billable_users",
              "item": [
                {
                  "name": "1.1 get accounts/billable_users SDA :dc",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "let jsonData = pm.response.json();\r",
                          "let user = jsonData[0];\r",
                          "\r",
                          "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(user, null, 2));\r",
                          "\r",
                          "pm.test(\"Проверка структуры и типов первого пользователя\", () => {\r",
                          "    try {\r",
                          "        pm.expect(user).to.be.an(\"object\");\r",
                          "\r",
                          "        pm.expect(user).to.have.property(\"id\").that.is.a(\"number\");\r",
                          "        pm.expect(user).to.have.property(\"account\").that.is.a(\"string\");\r",
                          "        pm.expect(user).to.have.property(\"primary_email\").that.is.a(\"string\");\r",
                          "        pm.expect(user).to.have.property(\"name\").that.is.a(\"string\");\r",
                          "        pm.expect(user).to.have.property(\"organization\").that.is.a(\"string\");\r",
                          "\r",
                          "        pm.expect(user).to.have.property(\"business_unit\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                          "        pm.expect(user).to.have.property(\"region\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                          "\r",
                          "        pm.expect(user).to.have.property(\"sign_ins\").that.is.a(\"number\");\r",
                          "        pm.expect(user).to.have.property(\"last_visit\").that.satisfy(val => val === null || typeof val === \"string\");\r",
                          "        pm.expect(user).to.have.property(\"updates\").that.is.a(\"number\");\r",
                          "    } catch (err) {\r",
                          "        console.error(\"Ошибка валидации пользователя:\", err);\r",
                          "        throw err;\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "461fcf1c-455b-4702-8234-6de848718573",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "408e433f-e679-41c1-85b9-3478458a7678",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account/billable_users",
                      "host": [
                        "{{url}}account"
                      ],
                      "path": [
                        "billable_users"
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-408e433f-e679-41c1-85b9-3478458a7678"
                },
                {
                  "name": "get accounts/billable_users SDA :dc (checking the filtering)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                        "exec": [
                          "// pm.test(\"Статус ответа 200\", () => {\r",
                          "//     pm.response.to.have.status(200);\r",
                          "\r",
                          "//     // Проверяем, что ответ определён\r",
                          "//     pm.expect(pm.response).to.be.ok;\r",
                          "\r",
                          "//     // Парсим тело ответа\r",
                          "//     const jsonData = pm.response.json();\r",
                          "\r",
                          "//     // Проверяем, что ответ определён и содержит год\r",
                          "//     pm.test(`Год в ответе должен быть ${params.year}`, () => {\r",
                          "//         pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
                          "//         pm.expect(jsonData[0]).to.have.property('year');\r",
                          "//         pm.expect(jsonData[0].year.toString()).to.eql(params.year);\r",
                          "//     });\r",
                          "\r",
                          "//     // Проверяем, что месяц в ответе совпадает с ожидаемым\r",
                          "//     pm.test(`Месяц в ответе должен быть ${params.month}`, () => {\r",
                          "//         pm.expect(jsonData[0]).to.have.property('month');\r",
                          "//         pm.expect(jsonData[0].month.toString()).to.eql(params.month);\r",
                          "//     });\r",
                          "// });\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "58f2ba90-33d3-400a-b513-f875bb69ea26",
                        "exec": [
                          "const now = new Date();\r",
                          "const year = now.getFullYear();\r",
                          "const month = now.getMonth() + 0;\r",
                          "\r",
                          "// Формируем строку в нужном формате\r",
                          "const yearMonthStr = `year=${year}&month=${month}`;\r",
                          "\r",
                          "// Записываем в переменную окружения\r",
                          "pm.environment.set(\"yearMonth-1\", yearMonthStr);\r",
                          "\r",
                          "console.log(yearMonthStr);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "c642774e-c9e6-4506-b65a-15861e2fc0e5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "X-4me-account",
                        "value": "dc",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{url}}account/billable_users?{{yearMonth-1}}",
                      "host": [
                        "{{url}}account"
                      ],
                      "path": [
                        "billable_users"
                      ],
                      "query": [
                        {
                          "key": "{{yearMonth-1}}",
                          "value": null
                        }
                      ]
                    }
                  },
                  "response": [],
                  "uid": "32335283-c642774e-c9e6-4506-b65a-15861e2fc0e5"
                }
              ],
              "id": "bae4589e-a094-40c0-a4c2-3292c10e66b0",
              "uid": "32335283-bae4589e-a094-40c0-a4c2-3292c10e66b0"
            }
          ],
          "id": "5078fbd2-476f-48c0-b2a7-644b15402d84",
          "uid": "32335283-5078fbd2-476f-48c0-b2a7-644b15402d84"
        }
      ],
      "id": "3077570c-37b7-4ce7-b74b-0fed59f2a768",
      "uid": "32335283-3077570c-37b7-4ce7-b74b-0fed59f2a768"
    },
    {
      "name": "Support domain accounts",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "1.1 create support_domain_accounts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Проверка структуры и типов объекта аккаунта\", () => {\r",
                      "    try {\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "\r",
                      "        pm.expect(jsonData).to.have.property(\"currency\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"locale\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"plan\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"time_format_24h\").that.is.a(\"boolean\");\r",
                      "        pm.expect(jsonData).to.have.property(\"time_zone\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData).to.have.property(\"first_login_token\").that.is.a(\"string\");\r",
                      "\r",
                      "        // organization\r",
                      "        pm.expect(jsonData).to.have.property(\"organization\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.organization).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData.organization).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.organization).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // owner\r",
                      "        pm.expect(jsonData).to.have.property(\"owner\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.owner).to.have.property(\"id\").that.is.a(\"number\");\r",
                      "        pm.expect(jsonData.owner).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.owner).to.have.property(\"nodeID\").that.is.a(\"string\");\r",
                      "\r",
                      "        // directory_account\r",
                      "        pm.expect(jsonData).to.have.property(\"directory_account\").that.is.an(\"object\");\r",
                      "        pm.expect(jsonData.directory_account).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(jsonData.directory_account).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    } catch (err) {\r",
                      "        console.error(\"Ошибка валидации:\", err);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\", jsonData);\r",
                      "        throw err;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "a6655ce6-915a-4270-9f08-571d070d287e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "pro-product",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"account\": {\r\n        \"name\": \"Postman-{{$randomInt}}\",\r\n        \"sitename\": \"test-domain-{{$randomInt}}\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}support_domain_accounts",
                  "host": [
                    "{{url}}support_domain_accounts"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-a6655ce6-915a-4270-9f08-571d070d287e"
            }
          ],
          "id": "e82dcc65-6f88-4902-b82a-9325a375a9e3",
          "uid": "32335283-e82dcc65-6f88-4902-b82a-9325a375a9e3"
        }
      ],
      "id": "3f49a365-7718-4ce8-9807-2da8001cec12",
      "uid": "32335283-3f49a365-7718-4ce8-9807-2da8001cec12"
    },
    {
      "name": "Settings",
      "item": [
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update an account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Проверка ответа сервера\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    const data = pm.response.json();\r",
                      "    pm.expect(data).to.be.an(\"object\");\r",
                      "    pm.environment.set(\"updated_name\", data.name);\r",
                      "    pm.expect(data).to.have.property(\"name\", pm.environment.get(\"updated_name\"));\r",
                      "    pm.expect(data).to.have.property(\"start_of_week\", 'wed');\r",
                      "    pm.expect(data).to.have.property(\"currency\", 'usd');\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "17aa533b-1c56-4892-8884-1f2280ea0ec0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  },
                  {
                    "key": "",
                    "value": "",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"account\": {\r\n        \"name\": \"dc {{$randomInt}}\",\r\n        \"start_of_week\": \"Wed\",\r\n        \"currency\": \"usd\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}account/settings",
                  "host": [
                    "{{url}}account"
                  ],
                  "path": [
                    "settings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-17aa533b-1c56-4892-8884-1f2280ea0ec0"
            }
          ],
          "id": "99030366-081b-4045-bc13-a444bcc86781",
          "uid": "32335283-99030366-081b-4045-bc13-a444bcc86781"
        }
      ],
      "id": "9cfa9810-d34d-4204-b4c3-12c752190445",
      "uid": "32335283-9cfa9810-d34d-4204-b4c3-12c752190445"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "810ca7f4-c45f-4305-9138-a9ebd9125fc9",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "74113866-dcb0-48ab-a8ba-54bee6c7489e",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}