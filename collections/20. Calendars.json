{
  "info": {
    "_postman_id": "5c8e91cd-fec2-455d-9856-6a1843feb0d9",
    "name": "20. Calendars",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-28T13:55:09.000Z",
    "createdAt": "2025-07-28T08:05:58.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-5c8e91cd-fec2-455d-9856-6a1843feb0d9"
  },
  "item": [
    {
      "name": "Calendars",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List calendars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры календаря (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    let item = jsonData;\r",
                      "    \r",
                      "    // Если ответ — массив, берем первый элемент\r",
                      "    if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
                      "        item = jsonData[0];\r",
                      "    }\r",
                      "    \r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        \r",
                      "        const actualType = typeof value;\r",
                      "        \r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                } else {\r",
                      "                    // Рекурсивно проверяем вложенные свойства\r",
                      "                    for (const key in value) {\r",
                      "                        if (value.hasOwnProperty(key)) {\r",
                      "                            checkType(`${prop}.${key}`, value[key], typeof value[key], true);\r",
                      "                        }\r",
                      "                    }\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            } else {\r",
                      "                // Проверяем первый элемент массива\r",
                      "                if (value.length > 0) {\r",
                      "                    checkType(`${prop}[0]`, value[0], typeof value[0], true);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем основные свойства\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"name\", item.name, \"string\");\r",
                      "    checkType(\"created_at\", item.created_at, \"string\");\r",
                      "    checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "    checkType(\"calendar_hours\", item.calendar_hours, \"array\", true);\r",
                      "\r",
                      "    // Проверяем вложенные свойства calendar_hours\r",
                      "    if (item.calendar_hours && item.calendar_hours.length > 0) {\r",
                      "        const firstHour = item.calendar_hours[0];\r",
                      "        checkType(\"calendar_hours.id\", firstHour.id, \"number\");\r",
                      "        checkType(\"calendar_hours.time_from\", firstHour.time_from, \"string\");\r",
                      "        checkType(\"calendar_hours.time_until\", firstHour.time_until, \"string\");\r",
                      "        checkType(\"calendar_hours.weekday\", firstHour.weekday, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "        \r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "cd07af50-3dca-4ce8-9e23-0a01eed16bcd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars",
                  "host": [
                    "{{url}}calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-cd07af50-3dca-4ce8-9e23-0a01eed16bcd"
            },
            {
              "name": "Get a single calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры календаря\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "\r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                } else {\r",
                      "                    // Рекурсивно проверяем вложенные свойства\r",
                      "                    for (const key in value) {\r",
                      "                        if (value.hasOwnProperty(key)) {\r",
                      "                            checkType(`${prop}.${key}`, value[key], typeof value[key], true);\r",
                      "                        }\r",
                      "                    }\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            } else {\r",
                      "                // Проверяем первый элемент массива\r",
                      "                if (value.length > 0) {\r",
                      "                    checkType(`${prop}[0]`, value[0], typeof value[0], true);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем основные свойства\r",
                      "    checkType(\"id\", jsonData.id, \"number\");\r",
                      "    checkType(\"name\", jsonData.name, \"string\");\r",
                      "    checkType(\"created_at\", jsonData.created_at, \"string\");\r",
                      "    checkType(\"updated_at\", jsonData.updated_at, \"string\");\r",
                      "    checkType(\"disabled\", jsonData.disabled, \"boolean\");\r",
                      "    checkType(\"calendar_hours\", jsonData.calendar_hours, \"array\", true);\r",
                      "\r",
                      "    // Проверяем вложенные свойства calendar_hours\r",
                      "    if (jsonData.calendar_hours && jsonData.calendar_hours.length > 0) {\r",
                      "        const firstHour = jsonData.calendar_hours[0];\r",
                      "        checkType(\"calendar_hours.id\", firstHour.id, \"number\");\r",
                      "        checkType(\"calendar_hours.time_from\", firstHour.time_from, \"string\");\r",
                      "        checkType(\"calendar_hours.time_until\", firstHour.time_until, \"string\");\r",
                      "        checkType(\"calendar_hours.weekday\", firstHour.weekday, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "\r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(jsonData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1f2b699b-2681-4265-b2a5-497f9e4e6821",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/94",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "94"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1f2b699b-2681-4265-b2a5-497f9e4e6821"
            }
          ],
          "id": "f2ae75fb-cec8-403d-bc99-86cd7fc441ab",
          "uid": "32335283-f2ae75fb-cec8-403d-bc99-86cd7fc441ab"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры календаря\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.environment.set(\"calendar_id\", jsonData.id);\r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "\r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                } else {\r",
                      "                    // Рекурсивно проверяем вложенные свойства\r",
                      "                    for (const key in value) {\r",
                      "                        if (value.hasOwnProperty(key)) {\r",
                      "                            checkType(`${prop}.${key}`, value[key], typeof value[key], true);\r",
                      "                        }\r",
                      "                    }\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            } else {\r",
                      "                // Проверяем первый элемент массива\r",
                      "                if (value.length > 0) {\r",
                      "                    checkType(`${prop}[0]`, value[0], typeof value[0], true);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем основные свойства\r",
                      "    checkType(\"id\", jsonData.id, \"number\");\r",
                      "    checkType(\"name\", jsonData.name, \"string\");\r",
                      "    checkType(\"created_at\", jsonData.created_at, \"string\");\r",
                      "    checkType(\"updated_at\", jsonData.updated_at, \"string\");\r",
                      "    checkType(\"disabled\", jsonData.disabled, \"boolean\");\r",
                      "    checkType(\"calendar_hours\", jsonData.calendar_hours, \"array\", true);\r",
                      "\r",
                      "    // Проверяем вложенные свойства calendar_hours\r",
                      "    if (jsonData.calendar_hours && jsonData.calendar_hours.length > 0) {\r",
                      "        const firstHour = jsonData.calendar_hours[0];\r",
                      "        checkType(\"calendar_hours.id\", firstHour.id, \"number\");\r",
                      "        checkType(\"calendar_hours.time_from\", firstHour.time_from, \"string\");\r",
                      "        checkType(\"calendar_hours.time_until\", firstHour.time_until, \"string\");\r",
                      "        checkType(\"calendar_hours.weekday\", firstHour.weekday, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "\r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(jsonData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "46d255b5-60a7-4acf-823a-1410a307b61e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"calendar_hours\": [\r\n        {\r\n            \"time_from\": \"00:00\",\r\n            \"time_until\": \"23:59\",\r\n            \"weekday\": \"mon\"\r\n        }\r\n    ],\r\n    \"disabled\": false,\r\n    \"name\": \"24x5 (Понедельник - Пятница) ({{$randomCompanyName}})\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}calendars",
                  "host": [
                    "{{url}}calendars"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-46d255b5-60a7-4acf-823a-1410a307b61e"
            }
          ],
          "id": "a3b8872a-722a-423d-898c-5c2a4ac0ccf1",
          "uid": "32335283-a3b8872a-722a-423d-898c-5c2a4ac0ccf1"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры календаря\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "\r",
                      "        const actualType = typeof value;\r",
                      "\r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                } else {\r",
                      "                    // Рекурсивно проверяем вложенные свойства\r",
                      "                    for (const key in value) {\r",
                      "                        if (value.hasOwnProperty(key)) {\r",
                      "                            checkType(`${prop}.${key}`, value[key], typeof value[key], true);\r",
                      "                        }\r",
                      "                    }\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            } else {\r",
                      "                // Проверяем первый элемент массива\r",
                      "                if (value.length > 0) {\r",
                      "                    checkType(`${prop}[0]`, value[0], typeof value[0], true);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем основные свойства\r",
                      "    checkType(\"id\", jsonData.id, \"number\");\r",
                      "    checkType(\"name\", jsonData.name, \"string\");\r",
                      "    checkType(\"created_at\", jsonData.created_at, \"string\");\r",
                      "    checkType(\"updated_at\", jsonData.updated_at, \"string\");\r",
                      "    checkType(\"disabled\", jsonData.disabled, \"boolean\");\r",
                      "    checkType(\"calendar_hours\", jsonData.calendar_hours, \"array\", true);\r",
                      "\r",
                      "    // Проверяем вложенные свойства calendar_hours\r",
                      "    if (jsonData.calendar_hours && jsonData.calendar_hours.length > 0) {\r",
                      "        const firstHour = jsonData.calendar_hours[0];\r",
                      "        checkType(\"calendar_hours.id\", firstHour.id, \"number\");\r",
                      "        checkType(\"calendar_hours.time_from\", firstHour.time_from, \"string\");\r",
                      "        checkType(\"calendar_hours.time_until\", firstHour.time_until, \"string\");\r",
                      "        checkType(\"calendar_hours.weekday\", firstHour.weekday, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "\r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(jsonData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "    pm.expect(jsonData.disabled, \"disabled\").to.eq(true);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "539ffcc3-77a9-49bb-8562-f7740dd65b93",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"calendar_hours\": [\r\n        {\r\n            \"time_from\": \"00:00\",\r\n            \"time_until\": \"23:59\",\r\n            \"weekday\": \"mon\"\r\n        }\r\n    ],\r\n    \"disabled\": true,\r\n    \"name\": \"24x5 (Понедельник - Пятница) ({{$randomCompanyName}})\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-539ffcc3-77a9-49bb-8562-f7740dd65b93"
            }
          ],
          "id": "eea63799-af3a-4909-bdeb-c969b252ae61",
          "uid": "32335283-eea63799-af3a-4909-bdeb-c969b252ae61"
        }
      ],
      "id": "bd1b5bed-af27-4658-a900-5062b0ae50f3",
      "uid": "32335283-bd1b5bed-af27-4658-a900-5062b0ae50f3"
    },
    {
      "name": "Calendar Hours",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all calendar hours of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры часов календаря (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    \r",
                      "    // Проверяем, что ответ — массив и содержит элементы\r",
                      "    if (!Array.isArray(jsonData) || jsonData.length === 0) {\r",
                      "        console.error(\"Ответ не является массивом или пустой массив\");\r",
                      "        return;\r",
                      "    }\r",
                      "    \r",
                      "    const item = jsonData[0];\r",
                      "    const errors = [];\r",
                      "\r",
                      "    // Функция для проверки типов\r",
                      "    function checkType(prop, value, expectedType, nullable = false) {\r",
                      "        if (nullable && value === null) return;\r",
                      "        \r",
                      "        const actualType = typeof value;\r",
                      "        \r",
                      "        if (expectedType === \"object\") {\r",
                      "            if (value !== null) {\r",
                      "                if (typeof value !== \"object\" || value === null) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                }\r",
                      "            }\r",
                      "        } else if (expectedType === \"array\") {\r",
                      "            if (!Array.isArray(value)) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "            }\r",
                      "        } else if (actualType !== expectedType) {\r",
                      "            errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    // Проверяем свойства объекта\r",
                      "    checkType(\"id\", item.id, \"number\");\r",
                      "    checkType(\"time_from\", item.time_from, \"string\");\r",
                      "    checkType(\"time_until\", item.time_until, \"string\");\r",
                      "    checkType(\"weekday\", item.weekday, \"string\");\r",
                      "    checkType(\"nodeID\", item.nodeID, \"string\");\r",
                      "\r",
                      "    // Логирование ошибок\r",
                      "    if (errors.length > 0) {\r",
                      "        console.error(\"\\nОшибки валидации:\\n\");\r",
                      "        errors.forEach((error, index) => {\r",
                      "            console.error(`${index + 1}. ${error}`);\r",
                      "        });\r",
                      "        \r",
                      "        console.log(\"\\nДанные ответа:\\n\");\r",
                      "        console.log(JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "164ba7d4-29e0-4acb-adb7-24d956a1132d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/94/calendar_hours",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "94",
                    "calendar_hours"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-164ba7d4-29e0-4acb-adb7-24d956a1132d"
            }
          ],
          "id": "e4f141fd-dc2b-4dbf-8c3e-0a78a421b820",
          "uid": "32335283-e4f141fd-dc2b-4dbf-8c3e-0a78a421b820"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add calendar hours to a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.environment.set(\"hours_id\", pm.response.json().id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.time_from, 'time_from').to.eql('00:00');\r",
                      "    pm.expect(jsonData.time_until, 'time_until').to.eql('24:00');\r",
                      "    pm.expect(jsonData.weekday, 'weekday').to.eql('mon');\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "50dd5812-16ef-4bc5-b057-75fe6917a382",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"time_from\": \"00:00\",\r\n    \"time_until\": \"24:00\",\r\n    \"weekday\": \"mon\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/calendar_hours",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "calendar_hours"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-50dd5812-16ef-4bc5-b057-75fe6917a382"
            }
          ],
          "id": "df768fc4-0d42-4f70-9834-e56fa61bdd25",
          "uid": "32335283-df768fc4-0d42-4f70-9834-e56fa61bdd25"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update calendar hours of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.time_from, 'time_from').to.eql('00:00');\r",
                      "    pm.expect(jsonData.time_until, 'time_until').to.eql('23:00');\r",
                      "    pm.expect(jsonData.weekday, 'weekday').to.eql('wed');\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "51696766-f110-4e21-8568-4152f6aca2c9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"time_from\": \"00:00\",\r\n    \"time_until\": \"23:00\",\r\n    \"weekday\": \"wed\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/calendar_hours/{{hours_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "calendar_hours",
                    "{{hours_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-51696766-f110-4e21-8568-4152f6aca2c9"
            }
          ],
          "id": "b5289b4e-2925-4283-ac6e-0b597e59081f",
          "uid": "32335283-b5289b4e-2925-4283-ac6e-0b597e59081f"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove all calendar hours from a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ef14d372-3ee8-4652-bede-eb24da719954",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/calendar_hours/{{hours_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "calendar_hours",
                    "{{hours_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ef14d372-3ee8-4652-bede-eb24da719954"
            },
            {
              "name": "Check \"Remove all calendar hours from a calendar\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "1b22a949-37bc-48f4-b075-ef9c016a835e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/calendar_hours/{{hours_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "calendar_hours",
                    "{{hours_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-1b22a949-37bc-48f4-b075-ef9c016a835e"
            }
          ],
          "id": "6353394e-fcfb-4aba-b4a2-6a7acb7d4e43",
          "uid": "32335283-6353394e-fcfb-4aba-b4a2-6a7acb7d4e43"
        }
      ],
      "id": "15e8b795-18d4-43df-90c0-3e3296c8a50b",
      "uid": "32335283-15e8b795-18d4-43df-90c0-3e3296c8a50b"
    },
    {
      "name": "Holidays",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all holidays of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры праздников (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    \r",
                      "    // Если ответ — массив, берем первый элемент\r",
                      "    if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
                      "        const item = jsonData[0];\r",
                      "        const errors = [];\r",
                      "\r",
                      "        // Функция для проверки типов\r",
                      "        function checkType(prop, value, expectedType, nullable = false) {\r",
                      "            if (nullable && value === null) return;\r",
                      "            \r",
                      "            const actualType = typeof value;\r",
                      "            \r",
                      "            if (expectedType === \"object\") {\r",
                      "                if (value !== null) {\r",
                      "                    if (typeof value !== \"object\" || value === null) {\r",
                      "                        errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                    }\r",
                      "                }\r",
                      "            } else if (expectedType === \"array\") {\r",
                      "                if (!Array.isArray(value)) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "                }\r",
                      "            } else if (actualType !== expectedType) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        // Проверяем свойства объекта\r",
                      "        checkType(\"id\", item.id, \"number\");\r",
                      "        checkType(\"name\", item.name, \"string\");\r",
                      "        checkType(\"picture_uri\", item.picture_uri, \"string\", true);\r",
                      "        checkType(\"start_at\", item.start_at, \"string\");\r",
                      "        checkType(\"end_at\", item.end_at, \"string\");\r",
                      "        checkType(\"created_at\", item.created_at, \"string\");\r",
                      "        checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "\r",
                      "        // Логирование ошибок\r",
                      "        if (errors.length > 0) {\r",
                      "            console.error(\"\\nОшибки валидации:\\n\");\r",
                      "            errors.forEach((error, index) => {\r",
                      "                console.error(`${index + 1}. ${error}`);\r",
                      "            });\r",
                      "            \r",
                      "            console.log(\"\\nДанные ответа:\\n\");\r",
                      "            console.log(JSON.stringify(item, null, 2));\r",
                      "        }\r",
                      "\r",
                      "        pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "    } else {\r",
                      "        console.error(\"Ответ не является массивом или пустой массив\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f522b08a-284e-4dfc-96f1-da0a7d399de8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/94/holidays",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "94",
                    "holidays"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f522b08a-284e-4dfc-96f1-da0a7d399de8"
            }
          ],
          "id": "01fa251b-3d4f-4988-99eb-223a44472d8b",
          "uid": "32335283-01fa251b-3d4f-4988-99eb-223a44472d8b"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a holiday",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"holiday_id\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "19f49a9f-0b4c-42fb-9d0f-bc13b0fb845e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"end_at\": \"2035-12-26T00:00\",\r\n    \"id\": 180,\r\n    \"name\": \"Christmas 20{{$randomInt}}\",\r\n    \"picture_uri\": null,\r\n    \"source\": null,\r\n    \"sourceID\": null,\r\n    \"start_at\": \"2012-12-25T00:00\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}holidays",
                  "host": [
                    "{{url}}holidays"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-19f49a9f-0b4c-42fb-9d0f-bc13b0fb845e"
            },
            {
              "name": "Add a holiday to a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e3a454bc-7341-4978-a9cb-1791dd2669a8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/holidays/ {{holiday_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "holidays",
                    " {{holiday_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e3a454bc-7341-4978-a9cb-1791dd2669a8"
            },
            {
              "name": "List all holidays of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Получаем ответ от сервера\r",
                      "pm.test(\"Проверка наличия объекта с id=253 в массиве\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "\r",
                      "    // Проверяем, что ответ содержит массив\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "\r",
                      "    // Находим объект с нужным id\r",
                      "    const foundItem = responseJson.find(item => item.id === pm.environment.get(\"holiday_id\"));\r",
                      "\r",
                      "    // Проверяем, что объект найден\r",
                      "    pm.expect(foundItem).to.exist;\r",
                      "\r",
                      "    // Дополнительно можно проверить структуру найденного объекта\r",
                      "    pm.expect(foundItem).to.have.property('id');\r",
                      "    pm.expect(foundItem.id).to.equal(pm.environment.get(\"holiday_id\"));\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "69ab9a74-e0ae-44de-a5cb-bcdc8cc656d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/holidays",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "holidays"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-69ab9a74-e0ae-44de-a5cb-bcdc8cc656d2"
            }
          ],
          "id": "93526cd5-50a3-4a22-8898-ba9350214fac",
          "uid": "32335283-93526cd5-50a3-4a22-8898-ba9350214fac"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a holiday from a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "6f33c071-c763-481f-bdce-479e2e8049b8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/holidays/ {{holiday_id}}",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "holidays",
                    " {{holiday_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-6f33c071-c763-481f-bdce-479e2e8049b8"
            },
            {
              "name": "Check \"Remove a holiday from a calendar\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Получаем ответ от сервера\r",
                      "pm.test(\"Проверка наличия объекта с id=253 в массиве\", () => {\r",
                      "    // Преобразуем ответ в JSON\r",
                      "    const responseJson = pm.response.json();\r",
                      "\r",
                      "    // Проверяем, что ответ содержит массив\r",
                      "    pm.expect(responseJson).to.be.an('array');\r",
                      "\r",
                      "    // Находим объект с нужным id\r",
                      "    const foundItem = responseJson.find(item => item.id === pm.environment.get(\"holiday_id\"));\r",
                      "\r",
                      "    // Проверяем, что объект найден\r",
                      "    pm.expect(foundItem).to.not.exist;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "abc423a6-626e-4f20-a0d1-9bc11061a997",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/{{calendar_id}}/holidays",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "{{calendar_id}}",
                    "holidays"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-abc423a6-626e-4f20-a0d1-9bc11061a997"
            }
          ],
          "id": "b1697efa-9b01-41a7-bf7f-991ab5b189bd",
          "uid": "32335283-b1697efa-9b01-41a7-bf7f-991ab5b189bd"
        }
      ],
      "id": "1fd86934-5b30-48b8-a7b3-2d67ad8fdd2d",
      "uid": "32335283-1fd86934-5b30-48b8-a7b3-2d67ad8fdd2d"
    },
    {
      "name": "Service Offerings",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service offerings of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры сервисов (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    // Если ответ — массив, берем первый элемент\r",
                      "    if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
                      "        const item = jsonData[0];\r",
                      "        const errors = [];\r",
                      "\r",
                      "        // Функция для проверки типов\r",
                      "        function checkType(prop, value, expectedType, nullable = false) {\r",
                      "            if (nullable && value === null) return;\r",
                      "\r",
                      "            const actualType = typeof value;\r",
                      "\r",
                      "            if (expectedType === \"object\") {\r",
                      "                if (value !== null) {\r",
                      "                    if (typeof value !== \"object\" || value === null) {\r",
                      "                        errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                    }\r",
                      "                }\r",
                      "            } else if (expectedType === \"array\") {\r",
                      "                if (!Array.isArray(value)) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "                }\r",
                      "            } else if (actualType !== expectedType) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        // Проверяем основные свойства\r",
                      "        checkType(\"id\", item.id, \"number\");\r",
                      "        checkType(\"name\", item.name, \"string\");\r",
                      "        checkType(\"status\", item.status, \"string\");\r",
                      "        checkType(\"created_at\", item.created_at, \"string\");\r",
                      "        checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "        checkType(\"service\", item.service, \"object\", true);\r",
                      "\r",
                      "        // Проверяем вложенный объект service\r",
                      "        if (item.service) {\r",
                      "            checkType(\"service.id\", item.service.id, \"number\");\r",
                      "            checkType(\"service.name\", item.service.name, \"string\");\r",
                      "            checkType(\"service.localized_name\", item.service.localized_name, \"string\");\r",
                      "            checkType(\"service.provider\", item.service.provider, \"object\", true);\r",
                      "\r",
                      "            // Проверяем вложенный объект provider\r",
                      "            if (item.service.provider) {\r",
                      "                checkType(\"service.provider.id\", item.service.provider.id, \"number\");\r",
                      "                checkType(\"service.provider.name\", item.service.provider.name, \"string\");\r",
                      "                checkType(\"service.provider.account\", item.service.provider.account, \"object\", true);\r",
                      "\r",
                      "                // Проверяем вложенный объект account\r",
                      "                if (item.service.provider.account) {\r",
                      "                    checkType(\"service.provider.account.id\", item.service.provider.account.id, \"string\");\r",
                      "                    checkType(\"service.provider.account.name\", item.service.provider.account.name, \"string\");\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        // Логирование ошибок\r",
                      "        if (errors.length > 0) {\r",
                      "            console.error(\"\\nОшибки валидации:\\n\");\r",
                      "            errors.forEach((error, index) => {\r",
                      "                console.error(`${index + 1}. ${error}`);\r",
                      "            });\r",
                      "\r",
                      "            console.log(\"\\nДанные ответа:\\n\");\r",
                      "            console.log(JSON.stringify(item, null, 2));\r",
                      "        }\r",
                      "\r",
                      "        pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "    } else {\r",
                      "        console.error(\"Ответ не является массивом или пустой массив\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f48f9fde-bed5-4104-b91f-e839ff40cd2c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/96/service_offerings",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "96",
                    "service_offerings"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f48f9fde-bed5-4104-b91f-e839ff40cd2c"
            }
          ],
          "id": "eab2c2f5-9aa3-4281-8885-3d1313d018bc",
          "uid": "32335283-eab2c2f5-9aa3-4281-8885-3d1313d018bc"
        }
      ],
      "id": "215893eb-67fc-4487-b5b0-a487889341a6",
      "uid": "32335283-215893eb-67fc-4487-b5b0-a487889341a6"
    },
    {
      "name": "Teams",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List teams of a calendar",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "// Проверка статуса ответа\r",
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Проверка структуры ответа\r",
                      "pm.test(\"Проверка структуры направлений (первый объект массива)\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    // Если ответ — массив, берем первый элемент\r",
                      "    if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
                      "        const item = jsonData[0];\r",
                      "        const errors = [];  // Исправлено объявление массива\r",
                      "\r",
                      "        // Функция для проверки типов\r",
                      "        function checkType(prop, value, expectedType, nullable = false) {\r",
                      "            if (nullable && value === null) return;\r",
                      "\r",
                      "            const actualType = typeof value;\r",
                      "\r",
                      "            if (expectedType === \"object\") {\r",
                      "                if (value !== null) {\r",
                      "                    if (typeof value !== \"object\" || value === null) {\r",
                      "                        errors.push(`Свойство '${prop}' ожидалось быть объектом, а пришло ${actualType}`);\r",
                      "                    }\r",
                      "                }\r",
                      "            } else if (expectedType === \"array\") {\r",
                      "                if (!Array.isArray(value)) {\r",
                      "                    errors.push(`Свойство '${prop}' ожидалось быть массивом, а пришло ${actualType}`);\r",
                      "                }\r",
                      "            } else if (actualType !== expectedType) {\r",
                      "                errors.push(`Свойство '${prop}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "        // Проверяем свойства объекта\r",
                      "        checkType(\"id\", item.id, \"number\");\r",
                      "        checkType(\"name\", item.name, \"string\");\r",
                      "        checkType(\"created_at\", item.created_at, \"string\");\r",
                      "        checkType(\"updated_at\", item.updated_at, \"string\");\r",
                      "\r",
                      "        // Логирование ошибок\r",
                      "        if (errors.length > 0) {\r",
                      "            console.error(\"\\nОшибки валидации:\\n\");\r",
                      "            errors.forEach((error, index) => {\r",
                      "                console.error(`${index + 1}. ${error}`);\r",
                      "            });\r",
                      "\r",
                      "            console.log(\"\\nДанные ответа:\\n\");\r",
                      "            console.log(JSON.stringify(item, null, 2));\r",
                      "        }\r",
                      "\r",
                      "        pm.expect(errors.length, \"Все проверки должны пройти успешно\").to.equal(0);\r",
                      "    } else {\r",
                      "        console.error(\"Ответ не является массивом или пустой массив\");\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "65718e01-cb7b-4d1a-ba29-300f7e014f9b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}calendars/96/teams",
                  "host": [
                    "{{url}}calendars"
                  ],
                  "path": [
                    "96",
                    "teams"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-65718e01-cb7b-4d1a-ba29-300f7e014f9b"
            }
          ],
          "id": "3f5a6715-ec0f-40ad-a6b1-de7596517173",
          "uid": "32335283-3f5a6715-ec0f-40ad-a6b1-de7596517173"
        }
      ],
      "id": "c0288009-1a68-4807-b669-203337d660cd",
      "uid": "32335283-c0288009-1a68-4807-b669-203337d660cd"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}