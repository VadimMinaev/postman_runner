{
  "info": {
    "_postman_id": "2ed04d6b-85d4-4487-93e4-ba48f1a1dc3d",
    "name": "25. Knowledge Articles",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-31T13:48:12.000Z",
    "createdAt": "2025-07-31T08:23:32.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-2ed04d6b-85d4-4487-93e4-ba48f1a1dc3d"
  },
  "item": [
    {
      "name": "Knowledge Articles",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List knowledge articles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.localized_subject, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// account (nullable — иногда отсутствует)\r",
                      "if (item.account !== undefined && item.account !== null) {\r",
                      "    checkField(item.account.id, \"string\");\r",
                      "    checkField(item.account.name, \"string\");\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    // account в service (nullable)\r",
                      "    if (item.service.account !== undefined && item.service.account !== null) {\r",
                      "        checkField(item.service.account.id, \"string\");\r",
                      "        checkField(item.service.account.name, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    // provider\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const account = provider.account;\r",
                      "        if (account) {\r",
                      "            checkField(account.id, \"string\");\r",
                      "            checkField(account.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7fdddbc6-5917-49e2-9571-242de0b4254c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles",
                  "host": [
                    "{{url}}knowledge_articles"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7fdddbc6-5917-49e2-9571-242de0b4254c"
            },
            {
              "name": "Get a single knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "// source не проверяем\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.localized_subject, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.description, \"string\");\r",
                      "checkField(item.localized_description, \"string\");\r",
                      "checkField(item.instructions, \"string\");\r",
                      "checkField(item.localized_instructions, \"string\");\r",
                      "checkField(item.archive_date, \"string\", true);\r",
                      "checkField(item.attachments, \"array\");\r",
                      "checkField(item.covered_specialists, \"boolean\");\r",
                      "checkField(item.end_users, \"boolean\");\r",
                      "checkField(item.internal_specialists, \"boolean\");\r",
                      "checkField(item.key_contacts, \"boolean\");\r",
                      "checkField(item.public, \"boolean\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.custom_fields, \"object\", true);\r",
                      "checkField(item.template, \"object\", true);\r",
                      "checkField(item.keywords, \"object\", true);\r",
                      "checkField(item.localized_keywords, \"object\", true);\r",
                      "checkField(item.times_applied, \"number\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// account\r",
                      "if (item.account) {\r",
                      "    checkField(item.account.id, \"string\");\r",
                      "    checkField(item.account.name, \"string\");\r",
                      "}\r",
                      "\r",
                      "// created_by\r",
                      "if (item.created_by) {\r",
                      "    checkField(item.created_by.id, \"number\");\r",
                      "    checkField(item.created_by.name, \"string\");\r",
                      "    checkField(item.created_by.nodeID, \"string\");\r",
                      "\r",
                      "    const createdAccount = item.created_by.account;\r",
                      "    if (createdAccount) {\r",
                      "        checkField(createdAccount.id, \"string\");\r",
                      "        checkField(createdAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// updated_by\r",
                      "if (item.updated_by) {\r",
                      "    checkField(item.updated_by.id, \"number\");\r",
                      "    checkField(item.updated_by.name, \"string\");\r",
                      "    checkField(item.updated_by.nodeID, \"string\");\r",
                      "\r",
                      "    const updatedAccount = item.updated_by.account;\r",
                      "    if (updatedAccount) {\r",
                      "        checkField(updatedAccount.id, \"string\");\r",
                      "        checkField(updatedAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    const serviceAccount = item.service.account;\r",
                      "    if (serviceAccount) {\r",
                      "        checkField(serviceAccount.id, \"string\");\r",
                      "        checkField(serviceAccount.name, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const providerAccount = provider.account;\r",
                      "        if (providerAccount) {\r",
                      "            checkField(providerAccount.id, \"string\");\r",
                      "            checkField(providerAccount.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "f5266863-1abc-4726-a2f0-915c30d9f16c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/133",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "133"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-f5266863-1abc-4726-a2f0-915c30d9f16c"
            }
          ],
          "id": "c65fca6e-6990-45de-9be1-0cce80f11b5f",
          "uid": "32335283-c65fca6e-6990-45de-9be1-0cce80f11b5f"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"knowledge_article_id\", json.id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "// source не проверяем\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.localized_subject, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.description, \"string\");\r",
                      "checkField(item.localized_description, \"string\");\r",
                      "checkField(item.instructions, \"string\");\r",
                      "checkField(item.localized_instructions, \"string\");\r",
                      "checkField(item.archive_date, \"string\", true);\r",
                      "checkField(item.attachments, \"array\");\r",
                      "checkField(item.covered_specialists, \"boolean\");\r",
                      "checkField(item.end_users, \"boolean\");\r",
                      "checkField(item.internal_specialists, \"boolean\");\r",
                      "checkField(item.key_contacts, \"boolean\");\r",
                      "checkField(item.public, \"boolean\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.custom_fields, \"object\", true);\r",
                      "checkField(item.template, \"object\", true);\r",
                      "checkField(item.keywords, \"object\", true);\r",
                      "checkField(item.localized_keywords, \"object\", true);\r",
                      "checkField(item.times_applied, \"number\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// account\r",
                      "if (item.account) {\r",
                      "    checkField(item.account.id, \"string\");\r",
                      "    checkField(item.account.name, \"string\");\r",
                      "}\r",
                      "\r",
                      "// created_by\r",
                      "if (item.created_by) {\r",
                      "    checkField(item.created_by.id, \"number\");\r",
                      "    checkField(item.created_by.name, \"string\");\r",
                      "    checkField(item.created_by.nodeID, \"string\");\r",
                      "\r",
                      "    const createdAccount = item.created_by.account;\r",
                      "    if (createdAccount) {\r",
                      "        checkField(createdAccount.id, \"string\");\r",
                      "        checkField(createdAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// updated_by\r",
                      "if (item.updated_by) {\r",
                      "    checkField(item.updated_by.id, \"number\");\r",
                      "    checkField(item.updated_by.name, \"string\");\r",
                      "    checkField(item.updated_by.nodeID, \"string\");\r",
                      "\r",
                      "    const updatedAccount = item.updated_by.account;\r",
                      "    if (updatedAccount) {\r",
                      "        checkField(updatedAccount.id, \"string\");\r",
                      "        checkField(updatedAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    const serviceAccount = item.service.account;\r",
                      "    if (serviceAccount) {\r",
                      "        checkField(serviceAccount.id, \"string\");\r",
                      "        checkField(serviceAccount.name, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const providerAccount = provider.account;\r",
                      "        if (providerAccount) {\r",
                      "            checkField(providerAccount.id, \"string\");\r",
                      "            checkField(providerAccount.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "11dd37b0-0751-45e8-8dad-071ccaa33155",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"covered_specialists\": true,\r\n    \"created_by_id\": 1077,\r\n    \"description\": \"Если вы считаете, что ваше устройство (компьютер, смартфон и т.д.) могло быть взломано, отнеситесь к этому серьезно и предпримите быстрые действия. Взломы устройства могут проводиться самыми неожиданными способами, и вам необходимо знать признаки взлома, чтобы вовремя среагировать. В этой статье описаны некоторые признаки того, что вас могли взломать, и действия, которые вам следует предпринять.\",\r\n    \"end_users\": true,\r\n    \"instructions\": \"Подумайте, не происходит ли на вашем устройстве что-то необычное. Свое устройство и то, как оно работает, вы знаете лучше остальных. Если раньше оно работало нормально, но внезапно появились какие-либо странности, это может быть так же из-за износа или поломки, но следующие проблемы могут быть признаками взлома:\\n\\n* У вас есть стандартные программы и файлы, которые не открываются и не работают.\\n* Файлы, которые вы не удаляли, сами по себе исчезли, были помещены в корзину или удалены.\\n* Вы не можете получить доступ к программе или сайту, используя свой обычный пароль, или обнаруживаете, что ваши пароли были изменены.\\n* На вашем компьютере вы обнаружили ​​новую программу, которую вы не устанавливали.\\n* Когда вы не используете компьютер, он часто отправляет или получает сетевой трафик.\\n* Содержимое файла было изменено, но вы не вносили эти изменения.\\n* Появляется впечатление, что вы не можете контролировать все, что делаете на своем устройстве.\\n\\n**Что делать:**\\n\\n1. Немедленно отключитесь от сети.\\n2. Используйте другое устройство или попросите коллегу сообщить об этом в группу информационной безопасности, используя стандартный запрос [Обнаружена проблема безопасности другого типа](/self-service/requests/new/provide_description?template_id=267).\",\r\n    \"internal_specialists\": true,\r\n    \"key_contacts\": true,\r\n    \"keywords\": null,\r\n    \"public\": false,\r\n    \"service_id\": 81,\r\n    \"status\": \"validated\",\r\n    \"template_id\": 1,\r\n    \"subject\": \"Что делать, если вы считаете, что вас взломали {{$randomWord}}\",\r\n    \"times_applied\": 1,\r\n    \"localized_description\": \"Если вы считаете, что ваше устройство (компьютер, смартфон и т.д.) могло быть взломано, отнеситесь к этому серьезно и предпримите быстрые действия. Взломы устройства могут проводиться самыми неожиданными способами, и вам необходимо знать признаки взлома, чтобы вовремя среагировать. В этой статье описаны некоторые признаки того, что вас могли взломать, и действия, которые вам следует предпринять.\",\r\n    \"localized_instructions\": \"Подумайте, не происходит ли на вашем устройстве что-то необычное. Свое устройство и то, как оно работает, вы знаете лучше остальных. Если раньше оно работало нормально, но внезапно появились какие-либо странности, это может быть так же из-за износа или поломки, но следующие проблемы могут быть признаками взлома:\\n\\n* У вас есть стандартные программы и файлы, которые не открываются и не работают.\\n* Файлы, которые вы не удаляли, сами по себе исчезли, были помещены в корзину или удалены.\\n* Вы не можете получить доступ к программе или сайту, используя свой обычный пароль, или обнаруживаете, что ваши пароли были изменены.\\n* На вашем компьютере вы обнаружили ​​новую программу, которую вы не устанавливали.\\n* Когда вы не используете компьютер, он часто отправляет или получает сетевой трафик.\\n* Содержимое файла было изменено, но вы не вносили эти изменения.\\n* Появляется впечатление, что вы не можете контролировать все, что делаете на своем устройстве.\\n\\n**Что делать:**\\n\\n1. Немедленно отключитесь от сети.\\n2. Используйте другое устройство или попросите коллегу сообщить об этом в группу информационной безопасности, используя стандартный запрос [Обнаружена проблема безопасности другого типа](/self-service/requests/new/provide_description?template_id=267).\",\r\n    \"localized_keywords\": null,\r\n    \"localized_subject\": \"Что делать, если вы считаете, что вас взломали {{$randomWord}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}knowledge_articles",
                  "host": [
                    "{{url}}knowledge_articles"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-11dd37b0-0751-45e8-8dad-071ccaa33155"
            }
          ],
          "id": "522c7123-ba8e-45e6-be35-889708f2bf92",
          "uid": "32335283-522c7123-ba8e-45e6-be35-889708f2bf92"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа — 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    if (pm.response.json().covered_specialists !== false) {\r",
                      "        console.error('covered_specialists не обновилось', pm.response.json().covered_specialists);\r",
                      "    }\r",
                      "    pm.expect(pm.response.json().covered_specialists).to.eql(false);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = Array.isArray(json) ? json[0] : json;\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяем\r",
                      "// source не проверяем\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.localized_subject, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.description, \"string\");\r",
                      "checkField(item.localized_description, \"string\");\r",
                      "checkField(item.instructions, \"string\");\r",
                      "checkField(item.localized_instructions, \"string\");\r",
                      "checkField(item.archive_date, \"string\", true);\r",
                      "checkField(item.attachments, \"array\");\r",
                      "checkField(item.covered_specialists, \"boolean\");\r",
                      "checkField(item.end_users, \"boolean\");\r",
                      "checkField(item.internal_specialists, \"boolean\");\r",
                      "checkField(item.key_contacts, \"boolean\");\r",
                      "checkField(item.public, \"boolean\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.custom_fields, \"object\", true);\r",
                      "checkField(item.template, \"object\", true);\r",
                      "checkField(item.keywords, \"object\", true);\r",
                      "checkField(item.localized_keywords, \"object\", true);\r",
                      "checkField(item.times_applied, \"number\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// account\r",
                      "if (item.account) {\r",
                      "    checkField(item.account.id, \"string\");\r",
                      "    checkField(item.account.name, \"string\");\r",
                      "}\r",
                      "\r",
                      "// created_by\r",
                      "if (item.created_by) {\r",
                      "    checkField(item.created_by.id, \"number\");\r",
                      "    checkField(item.created_by.name, \"string\");\r",
                      "    checkField(item.created_by.nodeID, \"string\");\r",
                      "\r",
                      "    const createdAccount = item.created_by.account;\r",
                      "    if (createdAccount) {\r",
                      "        checkField(createdAccount.id, \"string\");\r",
                      "        checkField(createdAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// updated_by\r",
                      "if (item.updated_by) {\r",
                      "    checkField(item.updated_by.id, \"number\");\r",
                      "    checkField(item.updated_by.name, \"string\");\r",
                      "    checkField(item.updated_by.nodeID, \"string\");\r",
                      "\r",
                      "    const updatedAccount = item.updated_by.account;\r",
                      "    if (updatedAccount) {\r",
                      "        checkField(updatedAccount.id, \"string\");\r",
                      "        checkField(updatedAccount.name, \"string\");\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    const serviceAccount = item.service.account;\r",
                      "    if (serviceAccount) {\r",
                      "        checkField(serviceAccount.id, \"string\");\r",
                      "        checkField(serviceAccount.name, \"string\");\r",
                      "    }\r",
                      "\r",
                      "    const provider = item.service.provider;\r",
                      "    if (provider) {\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        const providerAccount = provider.account;\r",
                      "        if (providerAccount) {\r",
                      "            checkField(providerAccount.id, \"string\");\r",
                      "            checkField(providerAccount.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d8791b01-9b9e-4ba6-85e0-c98234aafac3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"covered_specialists\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}knowledge_articles/{{knowledge_article_id}}",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "{{knowledge_article_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d8791b01-9b9e-4ba6-85e0-c98234aafac3"
            }
          ],
          "id": "2f55f0e2-08e5-4050-b5d4-9db07051390e",
          "uid": "32335283-2f55f0e2-08e5-4050-b5d4-9db07051390e"
        }
      ],
      "id": "b6b8f5cc-c239-4649-a048-26312f9c519d",
      "uid": "32335283-b6b8f5cc-c239-4649-a048-26312f9c519d"
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List requests of a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяется\r",
                      "checkField(item.subject, \"string\");\r",
                      "checkField(item.category, \"string\");\r",
                      "checkField(item.impact, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.next_target_at, \"string\");\r",
                      "checkField(item.completed_at, \"string\", true);\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// team\r",
                      "if (item.team) {\r",
                      "    checkField(item.team.id, \"number\");\r",
                      "    checkField(item.team.name, \"string\");\r",
                      "    checkField(item.team.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "// member\r",
                      "if (item.member !== null) {\r",
                      "    const m = item.member;\r",
                      "    checkField(m.id, \"number\");\r",
                      "    checkField(m.name, \"string\");\r",
                      "    checkField(m.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "// grouped_into\r",
                      "if (item.grouped_into !== null) {\r",
                      "    const g = item.grouped_into;\r",
                      "    checkField(g.id, \"number\");\r",
                      "    checkField(g.subject, \"string\");\r",
                      "    checkField(g.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "// service_instance\r",
                      "if (item.service_instance) {\r",
                      "    checkField(item.service_instance.id, \"number\");\r",
                      "    checkField(item.service_instance.name, \"string\");\r",
                      "    checkField(item.service_instance.localized_name, \"string\");\r",
                      "    checkField(item.service_instance.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "49485747-10d2-4d42-96d6-ff1f16baebc3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/requests",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "requests"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-49485747-10d2-4d42-96d6-ff1f16baebc3"
            }
          ],
          "id": "f45ace99-bb3d-48c6-8414-a268929ec959",
          "uid": "32335283-f45ace99-bb3d-48c6-8414-a268929ec959"
        }
      ],
      "id": "e1c2e085-81ab-4eb1-aa2f-742584ddc6ce",
      "uid": "32335283-e1c2e085-81ab-4eb1-aa2f-742584ddc6ce"
    },
    {
      "name": "Service Instances",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List service instances of a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "// Основные поля\r",
                      "checkField(item.id, \"number\");\r",
                      "// sourceID не проверяется\r",
                      "checkField(item.name, \"string\");\r",
                      "checkField(item.localized_name, \"string\");\r",
                      "checkField(item.status, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "checkField(item.nodeID, \"string\");\r",
                      "\r",
                      "// service\r",
                      "if (item.service) {\r",
                      "    checkField(item.service.id, \"number\");\r",
                      "    checkField(item.service.name, \"string\");\r",
                      "    checkField(item.service.localized_name, \"string\");\r",
                      "    checkField(item.service.nodeID, \"string\");\r",
                      "\r",
                      "    // provider внутри service\r",
                      "    if (item.service.provider) {\r",
                      "        const provider = item.service.provider;\r",
                      "        checkField(provider.id, \"number\");\r",
                      "        checkField(provider.name, \"string\");\r",
                      "        checkField(provider.nodeID, \"string\");\r",
                      "\r",
                      "        // account внутри provider\r",
                      "        if (provider.account) {\r",
                      "            checkField(provider.account.id, \"string\");\r",
                      "            checkField(provider.account.name, \"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// support_team\r",
                      "if (item.support_team) {\r",
                      "    checkField(item.support_team.id, \"number\");\r",
                      "    checkField(item.support_team.name, \"string\");\r",
                      "    checkField(item.support_team.nodeID, \"string\");\r",
                      "}\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "db9014b7-3a0b-4666-8476-a187836c067e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/service_instances",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-db9014b7-3a0b-4666-8476-a187836c067e"
            }
          ],
          "id": "79d682e0-588a-471a-8726-cb5ace071d5f",
          "uid": "32335283-79d682e0-588a-471a-8726-cb5ace071d5f"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a service instance to a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c6e3978d-048e-48c2-920d-bca9386035f5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/{{knowledge_article_id}}/service_instances/134",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "{{knowledge_article_id}}",
                    "service_instances",
                    "134"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c6e3978d-048e-48c2-920d-bca9386035f5"
            },
            {
              "name": "Check \"Add a service instance to a knowledge article\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Проверяем, что в ответе нет объекта с id из переменной service_id после удаления\r",
                      "pm.test(`Проверить присутствие объекта с id: 134 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 134;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} не найден в ответе. Проверяем, что в ответе есть объект с id 134`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "5eaf012c-9c84-41f1-bd28-6395cb39ba15",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/{{knowledge_article_id}}/service_instances",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "{{knowledge_article_id}}",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-5eaf012c-9c84-41f1-bd28-6395cb39ba15"
            }
          ],
          "id": "f5d02d23-ed19-49d4-8b67-2964a9c886ea",
          "uid": "32335283-f5d02d23-ed19-49d4-8b67-2964a9c886ea"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a service instance from a knowledge article",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "44971e06-a64d-4735-aca7-d6a172d93856",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/{{knowledge_article_id}}/service_instances/134",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "{{knowledge_article_id}}",
                    "service_instances",
                    "134"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-44971e06-a64d-4735-aca7-d6a172d93856"
            },
            {
              "name": "Check \"Remove a service instance from a knowledge article\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Проверяем, что в ответе нет объекта с id 134\r",
                      "pm.test(`Проверить отсутствие объекта с id: 134 в массиве`, function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const targetId = 134;\r",
                      "\r",
                      "    // Проверяем, что ответ является массивом\r",
                      "    pm.expect(Array.isArray(responseData)).to.be.true;\r",
                      "\r",
                      "    // Ищем объект с нужным id\r",
                      "    const foundObject = responseData.find(item => item.id == targetId);\r",
                      "\r",
                      "    if (foundObject) {\r",
                      "        console.error(`Тест провален: объект с id: ${targetId} найден в ответе. Проверяем, что в ответе нет объекта с id 134 после удаления связи`);\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(foundObject, null, 2));\r",
                      "        console.log(\"Полный ответ:\\n\" + JSON.stringify(responseData, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(foundObject, `Объект с id: ${targetId} должен присутствовать в ответе`).to.not.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "0ac7826f-2099-483d-86d8-d08f01895c91",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/{{knowledge_article_id}}/service_instances",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "{{knowledge_article_id}}",
                    "service_instances"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-0ac7826f-2099-483d-86d8-d08f01895c91"
            }
          ],
          "id": "750180c5-6530-4cc4-894d-7e9544efee2d",
          "uid": "32335283-750180c5-6530-4cc4-894d-7e9544efee2d"
        }
      ],
      "id": "581c115b-abc1-4dd3-b7e5-4dc6f8e41d12",
      "uid": "32335283-581c115b-abc1-4dd3-b7e5-4dc6f8e41d12"
    },
    {
      "name": "Translations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List knowledge article translations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "pm.environment.set(\"knowledge_article_translations_id\", json[0].id);\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(field, expectedType, nullable = false) {\r",
                      "    if (nullable && field === null) return;\r",
                      "    if (!nullable && field === null) {\r",
                      "        errors.push(`Поле не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof field;\r",
                      "    if (expectedType === 'array') {\r",
                      "        if (!Array.isArray(field)) {\r",
                      "            errors.push(`Ожидался тип array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Ожидался тип ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json[0];\r",
                      "\r",
                      "checkField(item.id, \"number\");\r",
                      "checkField(item.locale, \"string\");\r",
                      "checkField(item.created_at, \"string\");\r",
                      "checkField(item.updated_at, \"string\");\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ef5e62a5-d644-4991-a351-afd703b20d6b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/translations",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "translations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ef5e62a5-d644-4991-a351-afd703b20d6b"
            },
            {
              "name": "Get a single knowledge article translation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const json = pm.response.json();\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(fieldName, value, expectedType, nullable = false) {\r",
                      "    if (nullable && value === null) return;\r",
                      "    if (!nullable && value === null) {\r",
                      "        errors.push(`Свойство '${fieldName}' не может быть null`);\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (expectedType === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fieldName}' ожидалось быть array, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== expectedType) {\r",
                      "        errors.push(`Свойство '${fieldName}' ожидалось быть ${expectedType}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const item = json;\r",
                      "\r",
                      "checkField(\"id\", item.id, \"number\");\r",
                      "checkField(\"nodeID\", item.nodeID, \"string\");\r",
                      "checkField(\"locale\", item.locale, \"string\");\r",
                      "checkField(\"created_at\", item.created_at, \"string\");\r",
                      "checkField(\"updated_at\", item.updated_at, \"string\");\r",
                      "checkField(\"subject\", item.subject, \"string\");\r",
                      "checkField(\"keywords\", item.keywords, \"string\");\r",
                      "checkField(\"description\", item.description, \"string\");\r",
                      "checkField(\"instructions\", item.instructions, \"string\");\r",
                      "checkField(\"attachments\", item.attachments, \"array\");\r",
                      "\r",
                      "if (errors.length) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "}\r",
                      "\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "584619fa-3d9c-4eef-9c9b-0601d9941a68",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}knowledge_articles/109/translations/{{knowledge_article_translations_id}}",
                  "host": [
                    "{{url}}knowledge_articles"
                  ],
                  "path": [
                    "109",
                    "translations",
                    "{{knowledge_article_translations_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-584619fa-3d9c-4eef-9c9b-0601d9941a68"
            }
          ],
          "id": "dcefbb1e-c24c-4a54-b6fd-9edf1e3ec48b",
          "uid": "32335283-dcefbb1e-c24c-4a54-b6fd-9edf1e3ec48b"
        }
      ],
      "id": "8aa78947-6b95-4395-9ff7-3bacfaba5210",
      "uid": "32335283-8aa78947-6b95-4395-9ff7-3bacfaba5210"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "519edd2f-f6ff-454b-82a1-e0ff854eb965",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "38dc580d-a3f9-4ace-a6eb-53968362e5e0",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}