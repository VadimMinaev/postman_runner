{
  "info": {
    "_postman_id": "cb074914-fc51-4c3a-9b47-237c2ca1c9ef",
    "name": "18. Workflow Templates",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2025-07-25T13:28:33.000Z",
    "createdAt": "2025-07-25T12:17:33.000Z",
    "lastUpdatedBy": "32335283",
    "uid": "32335283-cb074914-fc51-4c3a-9b47-237c2ca1c9ef"
  },
  "item": [
    {
      "name": "Workflow Templates",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List workflow templates",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "pm.test(\"Ответ — массив с хотя бы одним объектом\", function () {\r",
                      "    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
                      "});\r",
                      "\r",
                      "let template = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого WorkflowTemplate\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    if (typeof template.id !== \"number\") {\r",
                      "        errors.push(`Свойство 'id' ожидалось быть number, а пришло ${typeof template.id}`);\r",
                      "    }\r",
                      "\r",
                      "    if (template.sourceID !== null && typeof template.sourceID !== \"string\") {\r",
                      "        errors.push(`Свойство 'sourceID' ожидалось быть string или null, а пришло ${typeof template.sourceID}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof template.subject !== \"string\") {\r",
                      "        errors.push(`Свойство 'subject' ожидалось быть string, а пришло ${typeof template.subject}`);\r",
                      "    }\r",
                      "\r",
                      "    if (template.service !== null) {\r",
                      "        const service = template.service;\r",
                      "\r",
                      "        if (typeof service.id !== \"number\") {\r",
                      "            errors.push(`Свойство 'service.id' ожидалось быть number, а пришло ${typeof service.id}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof service.name !== \"string\") {\r",
                      "            errors.push(`Свойство 'service.name' ожидалось быть string, а пришло ${typeof service.name}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof service.localized_name !== \"string\") {\r",
                      "            errors.push(`Свойство 'service.localized_name' ожидалось быть string, а пришло ${typeof service.localized_name}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof service.nodeID !== \"string\") {\r",
                      "            errors.push(`Свойство 'service.nodeID' ожидалось быть string, а пришло ${typeof service.nodeID}`);\r",
                      "        }\r",
                      "\r",
                      "        const provider = service.provider;\r",
                      "\r",
                      "        if (typeof provider.id !== \"number\") {\r",
                      "            errors.push(`Свойство 'provider.id' ожидалось быть number, а пришло ${typeof provider.id}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof provider.name !== \"string\") {\r",
                      "            errors.push(`Свойство 'provider.name' ожидалось быть string, а пришло ${typeof provider.name}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof provider.nodeID !== \"string\") {\r",
                      "            errors.push(`Свойство 'provider.nodeID' ожидалось быть string, а пришло ${typeof provider.nodeID}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof provider.account.id !== \"string\") {\r",
                      "            errors.push(`Свойство 'provider.account.id' ожидалось быть string, а пришло ${typeof provider.account.id}`);\r",
                      "        }\r",
                      "\r",
                      "        if (typeof provider.account.name !== \"string\") {\r",
                      "            errors.push(`Свойство 'provider.account.name' ожидалось быть string, а пришло ${typeof provider.account.name}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    if (typeof template.created_at !== \"string\") {\r",
                      "        errors.push(`Свойство 'created_at' ожидалось быть string, а пришло ${typeof template.created_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof template.updated_at !== \"string\") {\r",
                      "        errors.push(`Свойство 'updated_at' ожидалось быть string, а пришло ${typeof template.updated_at}`);\r",
                      "    }\r",
                      "\r",
                      "    if (typeof template.nodeID !== \"string\") {\r",
                      "        errors.push(`Свойство 'nodeID' ожидалось быть string, а пришло ${typeof template.nodeID}`);\r",
                      "    }\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(template, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2cb48a9d-7c57-4d4a-82bb-5184e10aeab5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates",
                  "host": [
                    "{{url}}workflow_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2cb48a9d-7c57-4d4a-82bb-5184e10aeab5"
            },
            {
              "name": "Get a single workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let tpl = jsonData;\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow Template\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(tpl, \"assign_relations_to_workflow_manager\", \"boolean\");\r",
                      "    checkField(tpl, \"attachments\", \"object\"); // массив — typeof [] === 'object'\r",
                      "    checkField(tpl, \"category\", \"string\");\r",
                      "    checkField(tpl, \"created_at\", \"string\");\r",
                      "    checkField(tpl, \"disabled\", \"boolean\");\r",
                      "    checkField(tpl, \"id\", \"number\");\r",
                      "    checkField(tpl, \"impact\", \"string\");\r",
                      "    checkField(tpl, \"justification\", \"string\");\r",
                      "    checkField(tpl, \"source\", \"string\");\r",
                      "    checkField(tpl, \"sourceID\", \"string\");\r",
                      "    checkField(tpl, \"subject\", \"string\");\r",
                      "    checkField(tpl, \"times_applied\", \"number\");\r",
                      "    checkField(tpl, \"updated_at\", \"string\");\r",
                      "    checkField(tpl, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля\r",
                      "    [\"instructions\", \"note\", \"recurrence\", \"ui_extension\", \"workflow_manager\", \"workflow_type\"].forEach(field => {\r",
                      "        if (tpl[field] !== null && tpl[field] !== undefined) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть null, а пришло ${typeof tpl[field]}`);\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // service\r",
                      "    if (tpl.service !== null) {\r",
                      "        const s = tpl.service;\r",
                      "        checkField(s, \"id\", \"number\");\r",
                      "        checkField(s, \"name\", \"string\");\r",
                      "        checkField(s, \"localized_name\", \"string\");\r",
                      "        checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        const acc = p.account;\r",
                      "        checkField(acc, \"id\", \"string\");\r",
                      "        checkField(acc, \"name\", \"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(tpl, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c50990e4-082a-4af5-8e36-40a9a462f5e8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/92",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "92"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c50990e4-082a-4af5-8e36-40a9a462f5e8"
            }
          ],
          "id": "8fe9c7af-9a98-41ec-ac8e-a2974e7a7f7c",
          "uid": "32335283-8fe9c7af-9a98-41ec-ac8e-a2974e7a7f7c"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let tpl = jsonData;\r",
                      "pm.environment.set(\"workflow_template_id\", tpl.id); // Сохранение ID Workflow Template в переменную окружения\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow Template\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(tpl, \"assign_relations_to_workflow_manager\", \"boolean\");\r",
                      "    checkField(tpl, \"attachments\", \"object\"); // массив — typeof [] === 'object'\r",
                      "    checkField(tpl, \"category\", \"string\");\r",
                      "    checkField(tpl, \"created_at\", \"string\");\r",
                      "    checkField(tpl, \"disabled\", \"boolean\");\r",
                      "    checkField(tpl, \"id\", \"number\");\r",
                      "    checkField(tpl, \"impact\", \"string\");\r",
                      "    checkField(tpl, \"justification\", \"string\");\r",
                      "    checkField(tpl, \"subject\", \"string\");\r",
                      "    checkField(tpl, \"times_applied\", \"number\");\r",
                      "    checkField(tpl, \"updated_at\", \"string\");\r",
                      "    checkField(tpl, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // nullable поля\r",
                      "    [\"instructions\", \"note\", \"recurrence\", \"ui_extension\", \"workflow_manager\", \"workflow_type\"].forEach(field => {\r",
                      "        if (tpl[field] !== null && tpl[field] !== undefined) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть null, а пришло ${typeof tpl[field]}`);\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    // service\r",
                      "    if (tpl.service !== null) {\r",
                      "        const s = tpl.service;\r",
                      "        checkField(s, \"id\", \"number\");\r",
                      "        checkField(s, \"name\", \"string\");\r",
                      "        checkField(s, \"localized_name\", \"string\");\r",
                      "        checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "        const p = s.provider;\r",
                      "        checkField(p, \"id\", \"number\");\r",
                      "        checkField(p, \"name\", \"string\");\r",
                      "        checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "        const acc = p.account;\r",
                      "        checkField(acc, \"id\", \"string\");\r",
                      "        checkField(acc, \"name\", \"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(tpl, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "92ccadcb-d9fe-4908-8d71-f02bc5092b94",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"assign_relations_to_workflow_manager\": true,\r\n    \"category\": \"order\",\r\n    \"impact\": \"none\",\r\n    \"justification\": \"purchase\",\r\n    \"service_id\": 130,\r\n    \"subject\": \"Согласование покупки менеджером {{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates",
                  "host": [
                    "{{url}}workflow_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-92ccadcb-d9fe-4908-8d71-f02bc5092b94"
            }
          ],
          "id": "2e3d21c9-88e5-4c83-8d79-89253cf3d553",
          "uid": "32335283-2e3d21c9-88e5-4c83-8d79-89253cf3d553"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Value of 'assign_relations_to_workflow_manager' is false\", function () {\r",
                      "    pm.expect(jsonData).to.have.property('assign_relations_to_workflow_manager', false);\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "eccc7b45-3f0f-4a6d-b2ad-d7b437abe4b1",
                    "exec": [
                      "pm.request.headers.add({key: 'User-Agent', value: 'VADMIN@RR-TH.COM'});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "39cee0be-05c9-4189-915f-c4716f082635",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"assign_relations_to_workflow_manager\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/{{workflow_template_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "{{workflow_template_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-39cee0be-05c9-4189-915f-c4716f082635"
            }
          ],
          "id": "da20f998-07c4-4ae3-a7c0-4b0e7c1fd0c3",
          "uid": "32335283-da20f998-07c4-4ae3-a7c0-4b0e7c1fd0c3"
        }
      ],
      "id": "7234cfa8-56ce-4105-8c2a-7c269de2d06b",
      "uid": "32335283-7234cfa8-56ce-4105-8c2a-7c269de2d06b"
    },
    {
      "name": "Automation Rules",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List automation rules of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e9e139bd-838c-481c-bb0c-f9a5e9b0e448",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/92/automation_rules",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "92",
                    "automation_rules"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e9e139bd-838c-481c-bb0c-f9a5e9b0e448"
            }
          ],
          "id": "7900c08a-1dbe-4e64-b416-232e2869cac7",
          "uid": "32335283-7900c08a-1dbe-4e64-b416-232e2869cac7"
        }
      ],
      "id": "91a446f6-9c44-43e3-971c-5a09a0960b6c",
      "uid": "32335283-91a446f6-9c44-43e3-971c-5a09a0960b6c"
    },
    {
      "name": "Workflows",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List workflows of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let wf = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(wf, \"id\", \"number\");\r",
                      "    checkField(wf, \"sourceID\", \"string\");\r",
                      "    checkField(wf, \"subject\", \"string\");\r",
                      "\r",
                      "    // manager\r",
                      "    const m = wf.manager;\r",
                      "    checkField(m, \"id\", \"number\");\r",
                      "    checkField(m, \"name\", \"string\");\r",
                      "    checkField(m, \"nodeID\", \"string\");\r",
                      "\r",
                      "    const acc = m.account;\r",
                      "    checkField(acc, \"id\", \"string\");\r",
                      "    checkField(acc, \"name\", \"string\");\r",
                      "\r",
                      "    checkField(wf, \"category\", \"string\");\r",
                      "    checkField(wf, \"impact\", \"string\");\r",
                      "    checkField(wf, \"status\", \"string\");\r",
                      "    checkField(wf, \"completion_target_at\", \"string\", true);\r",
                      "    checkField(wf, \"completed_at\", \"string\", true);\r",
                      "    checkField(wf, \"created_at\", \"string\");\r",
                      "    checkField(wf, \"updated_at\", \"string\");\r",
                      "    checkField(wf, \"nodeID\", \"string\");\r",
                      "\r",
                      "    // service\r",
                      "    const s = wf.service;\r",
                      "    checkField(s, \"id\", \"number\");\r",
                      "    checkField(s, \"name\", \"string\");\r",
                      "    checkField(s, \"localized_name\", \"string\");\r",
                      "    checkField(s, \"nodeID\", \"string\");\r",
                      "\r",
                      "    const p = s.provider;\r",
                      "    checkField(p, \"id\", \"number\");\r",
                      "    checkField(p, \"name\", \"string\");\r",
                      "    checkField(p, \"nodeID\", \"string\");\r",
                      "\r",
                      "    const acc2 = p.account;\r",
                      "    checkField(acc2, \"id\", \"string\");\r",
                      "    checkField(acc2, \"name\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(wf, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "694de85f-60c9-4a0d-a762-602d21920d0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/72/workflows",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "workflows"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-694de85f-60c9-4a0d-a762-602d21920d0d"
            }
          ],
          "id": "7fa90ef3-8ac8-499b-9289-2ca4775101c0",
          "uid": "32335283-7fa90ef3-8ac8-499b-9289-2ca4775101c0"
        }
      ],
      "id": "b51d803d-1d70-42d9-8748-cd86b114f07a",
      "uid": "32335283-b51d803d-1d70-42d9-8748-cd86b114f07a"
    },
    {
      "name": "Phases",
      "item": [
        {
          "name": "POST",
          "item": [
            {
              "name": "Add a phase to a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let phase = jsonData;\r",
                      "pm.environment.set(\"phases_id\", phase.id);\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow Template Phase\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(phase, \"created_at\", \"string\");\r",
                      "    checkField(phase, \"id\", \"number\");\r",
                      "    checkField(phase, \"name\", \"string\");\r",
                      "    checkField(phase, \"position\", \"number\");\r",
                      "    checkField(phase, \"updated_at\", \"string\");\r",
                      "    checkField(phase, \"localized_name\", \"string\");\r",
                      "    checkField(phase, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(phase, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "ed9a2570-86f9-44d7-9c7d-47e526883292",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\" \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-ed9a2570-86f9-44d7-9c7d-47e526883292"
            }
          ],
          "id": "d0e42ee4-bb70-4cbf-9fbb-4747afe6db06",
          "uid": "32335283-d0e42ee4-bb70-4cbf-9fbb-4747afe6db06"
        },
        {
          "name": "GET",
          "item": [
            {
              "name": "List all phases of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "if (!Array.isArray(jsonData) || jsonData.length === 0) {\r",
                      "    pm.expect.fail(\"Ответ должен быть непустым массивом\");\r",
                      "}\r",
                      "\r",
                      "let phase = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта Workflow Template Phase\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(phase, \"created_at\", \"string\");\r",
                      "    checkField(phase, \"id\", \"number\");\r",
                      "    checkField(phase, \"name\", \"string\");\r",
                      "    checkField(phase, \"position\", \"number\");\r",
                      "    checkField(phase, \"updated_at\", \"string\");\r",
                      "    checkField(phase, \"localized_name\", \"string\");\r",
                      "    checkField(phase, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(phase, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "120926ce-08e7-43da-b8c8-9f8c34c0ceb6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-120926ce-08e7-43da-b8c8-9f8c34c0ceb6"
            },
            {
              "name": "Get a single phase of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let phase = jsonData;\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow Template Phase\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(phase, \"created_at\", \"string\");\r",
                      "    checkField(phase, \"id\", \"number\");\r",
                      "    checkField(phase, \"name\", \"string\");\r",
                      "    checkField(phase, \"position\", \"number\");\r",
                      "    checkField(phase, \"updated_at\", \"string\");\r",
                      "    checkField(phase, \"localized_name\", \"string\");\r",
                      "    checkField(phase, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(phase, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "44f2d76f-bc18-4b6e-b702-6a7aec5e1d3a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-44f2d76f-bc18-4b6e-b702-6a7aec5e1d3a"
            }
          ],
          "id": "b040f66b-5155-4e0e-be88-4a772b3fddf6",
          "uid": "32335283-b040f66b-5155-4e0e-be88-4a772b3fddf6"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a phase of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "let phase = jsonData;\r",
                      "\r",
                      "pm.test(\"Проверка структуры Workflow Template Phase\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && obj[field] === null) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(phase, \"created_at\", \"string\");\r",
                      "    checkField(phase, \"id\", \"number\");\r",
                      "    checkField(phase, \"name\", \"string\");\r",
                      "    checkField(phase, \"position\", \"number\");\r",
                      "    checkField(phase, \"updated_at\", \"string\");\r",
                      "    checkField(phase, \"localized_name\", \"string\");\r",
                      "    checkField(phase, \"nodeID\", \"string\");\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(phase, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "978da3e8-12dc-439d-862b-2351d3b9144a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-978da3e8-12dc-439d-862b-2351d3b9144a"
            }
          ],
          "id": "7f7ad253-48f4-4967-b8dc-244e3bab3581",
          "uid": "32335283-7f7ad253-48f4-4967-b8dc-244e3bab3581"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a phase from a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код — 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "561f49b1-bf27-43d9-a3d4-2eb7fe952d7e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"qwerty {{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-561f49b1-bf27-43d9-a3d4-2eb7fe952d7e"
            },
            {
              "name": "Check \"Remove a phase from a workflow template\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус код — 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "cb83003d-db1f-4378-ad14-02607a6cff9d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/72/phases/{{phases_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "phases",
                    "{{phases_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-cb83003d-db1f-4378-ad14-02607a6cff9d"
            }
          ],
          "id": "5bbc9e26-091f-43d8-bccb-36665efba944",
          "uid": "32335283-5bbc9e26-091f-43d8-bccb-36665efba944"
        }
      ],
      "id": "5200c2f5-540a-48b5-a210-6ce5aa026be2",
      "uid": "32335283-5200c2f5-540a-48b5-a210-6ce5aa026be2"
    },
    {
      "name": "Task Template Relations",
      "item": [
        {
          "name": "GET",
          "item": [
            {
              "name": "List all task template relations of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "if (!Array.isArray(jsonData) || jsonData.length === 0) {\r",
                      "    pm.expect.fail(\"Ответ должен быть непустым массивом\");\r",
                      "}\r",
                      "\r",
                      "let item = jsonData[0];\r",
                      "\r",
                      "pm.test(\"Проверка структуры первого объекта Workflow Template Task Template\", function () {\r",
                      "    const errors = [];\r",
                      "\r",
                      "    function checkField(obj, field, type, nullable = false) {\r",
                      "        if (nullable && (obj[field] === null || obj[field] === undefined)) return;\r",
                      "        if (typeof obj[field] !== type) {\r",
                      "            errors.push(`Свойство '${field}' ожидалось быть ${type}, а пришло ${typeof obj[field]}`);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    checkField(item, \"created_at\", \"string\");\r",
                      "    checkField(item, \"failure_task_template\", \"object\", true); // nullable\r",
                      "    checkField(item, \"id\", \"number\");\r",
                      "    checkField(item, \"nodeID\", \"string\");\r",
                      "    // checkField(item, \"phase_name\", \"string\");\r",
                      "    checkField(item, \"updated_at\", \"string\");\r",
                      "\r",
                      "    // task_template (обязательный объект)\r",
                      "    if (item.task_template === null || item.task_template === undefined) {\r",
                      "        errors.push(\"Свойство 'task_template' ожидалось быть объектом, а пришло null или undefined\");\r",
                      "    } else {\r",
                      "        let t = item.task_template;\r",
                      "        checkField(t, \"id\", \"number\");\r",
                      "        checkField(t, \"subject\", \"string\");\r",
                      "        checkField(t, \"sourceID\", \"string\");\r",
                      "        checkField(t, \"nodeID\", \"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (errors.length > 0) {\r",
                      "        console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "        console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(item, null, 2));\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(errors.length, \"Ошибки валидации\").to.eql(0);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "72529d93-225f-4fa9-9d09-1b4f6681de17",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/88/task_template_relations",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "88",
                    "task_template_relations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-72529d93-225f-4fa9-9d09-1b4f6681de17"
            }
          ],
          "id": "8cecba82-a135-478f-b4ce-f6e23eb18ae9",
          "uid": "32335283-8cecba82-a135-478f-b4ce-f6e23eb18ae9"
        },
        {
          "name": "POST",
          "item": [
            {
              "name": "Create a task template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"task_template_id\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "e753114b-3bb1-44c5-ad8f-b08ce301bd14",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category\": \"approval\",\r\n    \"planned_duration\": 1000,\r\n    \"subject\": \"Тема не может быть пустым {{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}task_templates",
                  "host": [
                    "{{url}}task_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-e753114b-3bb1-44c5-ad8f-b08ce301bd14"
            },
            {
              "name": "Create a task template 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.environment.set(\"task_template_id_2\", pm.response.json().id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "7fefdec2-d9a8-4557-ae03-9b79b2016db3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category\": \"approval\",\r\n    \"planned_duration\": 1000,\r\n    \"subject\": \"Тема не может быть пустым {{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}task_templates",
                  "host": [
                    "{{url}}task_templates"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-7fefdec2-d9a8-4557-ae03-9b79b2016db3"
            },
            {
              "name": "Add a task template relation to a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.environment.set(\"task_template_relations_id\", jsonData.id);\r",
                      "console.log(\"Ответ (JSON):\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "\r",
                      "const errors = [];\r",
                      "\r",
                      "function checkField(obj, field, type, path = \"\", optional = false) {\r",
                      "    const fullPath = path ? `${path}.${field}` : field;\r",
                      "    const value = obj[field];\r",
                      "\r",
                      "    if (value === undefined || value === null) {\r",
                      "        if (!optional) {\r",
                      "            errors.push(`Свойство '${fullPath}' обязательно, но отсутствует или равно null`);\r",
                      "        }\r",
                      "        return;\r",
                      "    }\r",
                      "\r",
                      "    const actualType = typeof value;\r",
                      "    if (type === \"array\") {\r",
                      "        if (!Array.isArray(value)) {\r",
                      "            errors.push(`Свойство '${fullPath}' ожидалось как массив, а пришло ${actualType}`);\r",
                      "        }\r",
                      "    } else if (actualType !== type) {\r",
                      "        errors.push(`Свойство '${fullPath}' ожидалось быть ${type}, а пришло ${actualType}`);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "// Корень\r",
                      "checkField(jsonData, \"id\", \"number\");\r",
                      "checkField(jsonData, \"created_at\", \"string\");\r",
                      "checkField(jsonData, \"updated_at\", \"string\");\r",
                      "checkField(jsonData, \"phase_name\", \"string\", \"\", true);\r",
                      "checkField(jsonData, \"nodeID\", \"string\");\r",
                      "checkField(jsonData, \"failure_task_template\", \"object\", \"\", true);\r",
                      "\r",
                      "// task_template\r",
                      "checkField(jsonData, \"task_template\", \"object\");\r",
                      "\r",
                      "if (jsonData.task_template) {\r",
                      "    checkField(jsonData.task_template, \"id\", \"number\", \"task_template\");\r",
                      "    checkField(jsonData.task_template, \"subject\", \"string\", \"task_template\");\r",
                      "    checkField(jsonData.task_template, \"nodeID\", \"string\", \"task_template\");\r",
                      "    checkField(jsonData.task_template, \"sourceID\", \"string\", \"task_template\", true); // nullable/опционально\r",
                      "}\r",
                      "\r",
                      "if (errors.length > 0) {\r",
                      "    console.log(\"Ошибки валидации:\\n\" + JSON.stringify(errors, null, 2));\r",
                      "    console.log(\"Данные, вызвавшие ошибку:\\n\" + JSON.stringify(jsonData, null, 2));\r",
                      "}\r",
                      "pm.expect(errors.length).to.eql(0);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "2747ee23-edd6-4ba5-bbd5-55719972cc6c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"task_template\": \"{{task_template_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/task_template_relations",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "task_template_relations"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-2747ee23-edd6-4ba5-bbd5-55719972cc6c"
            }
          ],
          "id": "6277fb23-6a9a-407f-9179-d84b0c6411e5",
          "uid": "32335283-6277fb23-6a9a-407f-9179-d84b0c6411e5"
        },
        {
          "name": "PATCH",
          "item": [
            {
              "name": "Update a task template relation of a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Статус ответа 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.json().task_template.id, 'task_template.id').to.eql(pm.environment.get(\"task_template_id_2\"));\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d6c51ffc-a6f3-48b1-a85d-b383f8b6f46b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"task_template\": \"{{task_template_id_2}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/task_template_relations/{{task_template_relations_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "task_template_relations",
                    "{{task_template_relations_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d6c51ffc-a6f3-48b1-a85d-b383f8b6f46b"
            }
          ],
          "id": "f7ed5283-d238-4283-a1f5-8103f94ad7b4",
          "uid": "32335283-f7ed5283-d238-4283-a1f5-8103f94ad7b4"
        },
        {
          "name": "DELETE",
          "item": [
            {
              "name": "Remove a task template relation from a workflow template",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "d77cea3b-383f-4af2-b006-e20d1f667485",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"task_template\": \"{{task_template_id_2}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}workflow_templates/72/task_template_relations/{{task_template_relations_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "task_template_relations",
                    "{{task_template_relations_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-d77cea3b-383f-4af2-b006-e20d1f667485"
            },
            {
              "name": "Remove a task template relation from a workflow template Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55b007f-9ec5-4f0a-a9f2-bf4ac412f11f",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "id": "c3e51340-e7a8-44da-b1e5-ba23940fc626",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-4me-account",
                    "value": "dc",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}workflow_templates/72/task_template_relations/{{task_template_relations_id}}",
                  "host": [
                    "{{url}}workflow_templates"
                  ],
                  "path": [
                    "72",
                    "task_template_relations",
                    "{{task_template_relations_id}}"
                  ]
                }
              },
              "response": [],
              "uid": "32335283-c3e51340-e7a8-44da-b1e5-ba23940fc626"
            }
          ],
          "id": "d0df5843-33cf-46ca-a674-5b0b1ee0ac37",
          "uid": "32335283-d0df5843-33cf-46ca-a674-5b0b1ee0ac37"
        }
      ],
      "id": "4f6b5f43-315c-4116-a401-b79cb7b50051",
      "uid": "32335283-4f6b5f43-315c-4116-a401-b79cb7b50051"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "581a95fd-871e-4514-8023-7e149f9c07da",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "b598ca16-9966-4cfd-b69b-a8232327b74d",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ]
}